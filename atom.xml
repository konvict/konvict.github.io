<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://konvict.github.io</id>
    <title>Konvict&apos;s Notebook</title>
    <updated>2022-08-14T17:43:59.394Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://konvict.github.io"/>
    <link rel="self" href="https://konvict.github.io/atom.xml"/>
    <subtitle>空空如也……</subtitle>
    <logo>https://konvict.github.io/images/avatar.png</logo>
    <icon>https://konvict.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Konvict&apos;s Notebook</rights>
    <entry>
        <title type="html"><![CDATA[多网卡聚合]]></title>
        <id>https://konvict.github.io/post/duo-wang-qia-ju-he/</id>
        <link href="https://konvict.github.io/post/duo-wang-qia-ju-he/">
        </link>
        <updated>2022-08-08T15:37:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-简介">一、简介</h1>
<p>bonding(绑定)是一种linux系统下的网卡绑定技术，可以把服务器上n个物理网卡在系统内部抽象(绑定)成一个逻辑上的网卡，能够提升网络吞吐量、实现网络冗余、负载等功能，有很多优势。bonding技术是linux系统内核层面实现的，它是一个内核模块(驱动)。使用它需要系统有这个模块,我们可以modinfo命令查看下这个模块的信息, 一般来说都支持。</p>
<h1 id="二-网卡bonding模式">二、网卡bonding模式</h1>
<p><strong>1、mode=0（balance-rr）</strong></p>
<p>表示负载分担round-robin，并且是轮询的方式比如第一个包走eth0，第二个包走eth1，直到数据包发送完毕。</p>
<p>优点：流量提高一倍</p>
<p>缺点：需要接入交换机做端口聚合，否则可能无法使用</p>
<p><strong>2、mode=1（active-backup）</strong></p>
<p>表示主备模式，即同时只有1块网卡在工作。</p>
<p>优点：冗余性高</p>
<p>缺点：链路利用率低，两块网卡只有1块在工作</p>
<p>二、bond其他模式：</p>
<p>1、<strong>mode=2(balance-xor)(平衡策略)</strong></p>
<p>表示XOR Hash负载分担，和交换机的聚合强制不协商方式配合。（需要xmit_hash_policy，需要交换机配置port channel）</p>
<p>特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力</p>
<p>2、<strong>mode=3(broadcast)(广播策略)</strong></p>
<p>表示所有包从所有网络接口发出，这个不均衡，只有冗余机制，但过于浪费资源。此模式适用于金融行业，因为他们需要高可靠性的网络，不允许出现任何问题。需要和交换机的聚合强制不协商方式配合。</p>
<p>特点：在每个slave接口上传输每个数据包，此模式提供了容错能力</p>
<p>3、<strong>mode=4(802.3ad)(IEEE 802.3ad 动态链接聚合)</strong></p>
<p>表示支持802.3ad协议，和交换机的聚合LACP方式配合（需要xmit_hash_policy）.标准要求所有设备在聚合操作时，要在同样的速率和双工模式，而且，和除了balance-rr模式外的其它bonding负载均衡模式一样，任何连接都不能使用多于一个接口的带宽。</p>
<p>特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。</p>
<p>必要条件：</p>
<ul>
<li>条件1：ethtool支持获取每个slave的速率和双工设定</li>
<li>条件2：switch(交换机)支持IEEE802.3ad Dynamic link aggregation</li>
<li>条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</li>
</ul>
<p>4、<strong>mode=5(balance-tlb)(适配器传输负载均衡)</strong></p>
<p>是根据每个slave的负载情况选择slave进行发送，接收时使用当前轮到的slave。该模式要求slave接口的网络设备驱动有某种ethtool支持；而且ARP监控不可用。</p>
<p>特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</p>
<p>必要条件：</p>
<ul>
<li>ethtool支持获取每个slave的速率</li>
</ul>
<p>5、<strong>mode=6(balance-alb)(适配器适应性负载均衡)</strong></p>
<p>在5的tlb基础上增加了rlb(接收负载均衡receiveload balance).不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的.</p>
<p>特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receiveload balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播 ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新（ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新激活时，接收流量也要重新分布。接收的负载被顺序地分布（round robin）在bond中最高速的slave上当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答不会被switch(交换机)阻截。</p>
<p><strong>小结：</strong></p>
<p>mode5和mode6不需要交换机端的设置，网卡能自动聚合。mode4需要支持802.3ad。mode0，mode2和mode3理论上需要静态聚合方式。</p>
<p><strong>xmit_hash_policy选项说明：</strong></p>
<p>BONDING_OPTS=&quot;mode=4 miimon=100 xmit_hash_policy=layer2&quot;      2层模式=IP</p>
<p>BONDING_OPTS=&quot;mode=4 miimon=100 xmit_hash_policy=layer2+3&quot;   2+3层模式 =MAC+IP</p>
<p>BONDING_OPTS=&quot;mode=4 miimon=100 xmit_hash_policy=layer3+4&quot;      3+4层模式=IP+端口</p>
<p>根据资料，xmit_hash_policy策略适用于mode2和mode4。</p>
<p>参数说明：</p>
<p>1.    layer2：使用二层帧头作为计算分发出口的参数，这导致通过同一个网关的数据流将完全从一个端口发送，为了更加细化分发策略，必须使用一些三层信息，然而却增加了计算开销。</p>
<p>使用硬件MAC地址的XOR来生成hash。公式为：</p>
<p>(MACsrc⊕MACdest)% Nslave</p>
<p>该算法会将某个网络对（network peer）上所有的流量全部分配到同一个slave上。</p>
<p>2.    layer2+3：在1的基础上增加了三层的ip报头信息，计算量增加了，然而负载却更加均衡了，一个个主机到主机的数据流形成并且同一个流被分发到同一个端口，根据这个思想，如果要使负载更加均衡。</p>
<p>3.    layer3+4：可以形成一个个端口到端口的流，负载更加均衡。通过TCP及UDP端口及其IP地址进行HASH计算。该策略在可能的时候使用上层协议的信息来生成hash。这将允许特定网络对（network peer）的流量分摊到多个slave上，尽管同一个连接（connection）不会分摊到多个slave上。</p>
<p>针对未分片的TCP和UDP包的计算公式为：</p>
<p>((portsrc⊕portdest)⊕(IPsrc⊕IPdest)) % Nslave</p>
<p>对于已分片TCP或UDP包，以及其他的IP包，源端口和目的端口的信息被忽略了；对于非IP流量，采用和layer2一样的hash策略。</p>
<h1 id="三-bond配置">三、Bond配置</h1>
<p>1.生成bond虚拟网卡配置文件</p>
<pre><code class="language-bash">IP_ADDR=
BOND_NETMASK=
GATEW=
UUID=`uuidgen`cat &lt;&lt;EOF &gt; /etc/sysconfig/network-scripts/ifcfg-bond0
DEVICE=bond0
TYPE=Ethernet
ONBOOT=yesUUID=${UUID}
BOOTPROTO=&quot;static&quot;
IPADDR=${IP_ADDR}
NETMASK=${BOND_NETMASK}
GATEWAY=${GATEW}
EOF
</code></pre>
<p>2.配置两个或更多网卡到bond0中</p>
<pre><code class="language-bash">NIC1=
NIC2=
cat &lt;&lt;EOF &gt; /etc/sysconfig/network-scripts/ifcfg-${NIC1}
TYPE=&quot;Ethernet&quot;
BOOTPROTO=&quot;none&quot;
DEVICE=${NIC1}
ONBOOT=&quot;yes&quot;
MASTER=bond0
SLAVE=yes
EOF
 
cat &lt;&lt;EOF &gt; /etc/sysconfig/network-scripts/ifcfg-${NIC2}
TYPE=&quot;Ethernet&quot;
BOOTPROTO=&quot;none&quot;
DEVICE=${NIC2}
ONBOOT=&quot;yes&quot;
MASTER=bond0
SLAVE=yes
EOF
</code></pre>
<p>3.将bond加载到内核</p>
<pre><code class="language-bash">cat &lt;&lt;EOF &gt; /etc/modprobe.d/modprobe.conf
alias bond0 bonding
options bond0 miimon=100 mode=6 fail_over_mac=1
EOF
</code></pre>
<p>4.加载内核</p>
<pre><code class="language-bash">modprobe bonding &amp;&amp; echo &quot;modprobe bonding&quot; &gt;&gt; /etc/rc.local &amp;&amp; chmod +x /etc/rc.d/rc.local
</code></pre>
<p>5.查看状态</p>
<pre><code class="language-bash">cat /proc/net/bonding/bond0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7 安装高版本VIM]]></title>
        <id>https://konvict.github.io/post/centos7-install-vim9/</id>
        <link href="https://konvict.github.io/post/centos7-install-vim9/">
        </link>
        <updated>2022-07-24T15:44:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="gcc-git-升级">GCC, Git  升级</h1>
<pre><code class="language-bash"># 安装高版本GCC
yum install -y centos-release-scl &amp;&amp; yum install -y devtoolset-11-gcc*
echo &quot;source /opt/rh/devtoolset-11/enable&quot; &gt;&gt;/etc/profile &amp;&amp; source /etc/profile
# 安装高版本git
# 非必要步骤
yum remove -y git rpm -Uvh https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
yum clean &amp;&amp; yum makecache &amp;&amp; yum install -y git
</code></pre>
<h1 id="安装依赖">安装依赖</h1>
<pre><code class="language-bash">yum install -y \
	make ncurses ncurses-devel ctagstcl-devel ruby ruby-devel lua lua-devel \
	luajit luajit-devel python python-devel perl perl-devel perl-ExtUtils-ParseXS \
	perl-ExtUtils-XSpp perl-ExtUtils-CBuilder perl-ExtUtils-Embed
</code></pre>
<h1 id="卸载现有-vim">卸载现有 vim</h1>
<pre><code class="language-bash">yum remove -y vim-enhanced vim-common vim-filesystem
</code></pre>
<h1 id="升级vim">升级vim</h1>
<pre><code class="language-bash">cd ~ &amp;&amp; git clone https://github.com/vim/vim.git &amp;&amp; cd vim
./configure --with-features=huge --enable-luainterp -enable-multibyte --enable-rubyinterp \
--enable-pythoninterp --enable-perlinterp &amp;&amp; make &amp;&amp; make install
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 添加扩展模块]]></title>
        <id>https://konvict.github.io/post/php-install-extension/</id>
        <link href="https://konvict.github.io/post/php-install-extension/">
        </link>
        <updated>2022-07-20T15:38:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-下载php源码">一 下载PHP源码</h1>
<pre><code class="language-bash">wget https://www.php.net/distributions/php-7.4.30.tar.gz &amp;&amp; \
    tar zxvf php-7.4.30.tar.gz &amp;&amp; cd php-7.4.30/ext/ldap || exit 1
</code></pre>
<h1 id="二-下载依赖">二 下载依赖</h1>
<pre><code class="language-bash">yum install -y openldap-devel openldap-devel.i686
</code></pre>
<h1 id="三-编译安装">三 编译安装</h1>
<pre><code class="language-bash">phpize &amp;&amp; ./configure --with-php-config=/usr/local/php/bin/php-config &amp;&amp; make &amp;&amp; make install
#加载ldap模块并重启
echo &quot;extension=ldap.so&quot; &gt;&gt; /usr/local/php/etc/php.ini  &amp;&amp; systemctl restart httpd 
#或者 
#systemctl restart php-fpm
</code></pre>
<h1 id="四-验证">四 验证</h1>
<pre><code class="language-bash">php -m | grep ldap
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 将硬盘格式化为NTFS并挂载]]></title>
        <id>https://konvict.github.io/post/centos-ntfs/</id>
        <link href="https://konvict.github.io/post/centos-ntfs/">
        </link>
        <updated>2022-01-10T15:33:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装相应软件">安装相应软件</h1>
<pre><code class="language-bash">yum install -y epel-release &amp;&amp; yum clean all &amp;&amp; yum makecache &amp;&amp; \
yum install -y ntfs-3g ntfsprogs
</code></pre>
<h1 id="格式化以及挂载">格式化以及挂载</h1>
<p>假设新硬盘为 /dev/sdc， 挂载点为 /NTFS</p>
<ul>
<li>格式化</li>
</ul>
<pre><code class="language-bash">parted -s /dev/sdc mklabel gpt &amp;&amp; \
parted -s /dev/sdc unit mib mkpart primary 0% 100% &amp;&amp; \
mkfs.ntfs -f /dev/sdc1
</code></pre>
<ul>
<li>挂载</li>
</ul>
<pre><code class="language-bash">mkdir /NTFS &amp;&amp; \
mount -t ntfs /dev/sdc1 &amp;&amp; \
echo &quot;/dev/sdc1       /NTFS   ntfs     defaults 0 0&quot; &gt;&gt; /etc/fstab
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[onedev 搭建]]></title>
        <id>https://konvict.github.io/post/onedev/</id>
        <link href="https://konvict.github.io/post/onedev/">
        </link>
        <updated>2022-01-07T18:03:56.000Z</updated>
        <content type="html"><![CDATA[<p>OneDev是一个开源的一体化的DevOps平台，原生支持Docker, 详情详见 https://github.com/theonedev/onedev</p>
<pre><code class="language-bash">#!/bin/bash 
DATA_PATH=/opt/docker/1dev
HOST_PORT1=6610
HOST_PORT2=6611

docker run -dit --name 1dev --restart=unless-stopped \
     -v ${DATA_PATH}:/opt/onedev \
     -v /var/run/docker.sock:/var/run/docker.sock \
     -p ${HOST_PORT1}:6610 \
     -p ${HOST_PORT2}:6611 \
     1dev/server

firewall-cmd --zone=public --permanent \
    --add-port=${HOST_PORT1}/tcp \
    --add-port=${HOST_PORT2}/tcp &amp;&amp; \
    firewall-cmd --reload
</code></pre>
<p>稍等片刻，可以使用 http://localhost:6610 访问。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7 更改软件软为清华源]]></title>
        <id>https://konvict.github.io/post/c7repo-tsinghua/</id>
        <link href="https://konvict.github.io/post/c7repo-tsinghua/">
        </link>
        <updated>2022-01-07T17:52:05.000Z</updated>
        <content type="html"><![CDATA[<p>安装 epel源</p>
<pre><code class="language-bash">yum install epel-release -y 
</code></pre>
<p>更改自带源为清华源</p>
<pre><code class="language-bash">cp -r /etc/yum.repos.d /etc/yum.repos.d-bak &amp;&amp; \
sed -e 's|^mirrorlist=|#mirrorlist=|g' \
         -e 's|^#baseurl=http://mirror.centos.org|baseurl=https://mirrors.tuna.tsinghua.edu.cn|g' \
         -i.bak \
         /etc/yum.repos.d/CentOS-*.repo
</code></pre>
<p>更改epel源为清华源</p>
<pre><code class="language-bash">sed -e 's!^metalink=!#metalink=!g' \
    -e 's!^#baseurl=!baseurl=!g' \
    -e 's!//download\.fedoraproject\.org/pub!//mirrors.tuna.tsinghua.edu.cn!g' \
    -e 's!//download\.example/pub!//mirrors.tuna.tsinghua.edu.cn!g' \
    -e 's!http://mirrors!https://mirrors!g' \
    -i /etc/yum.repos.d/epel*.repo
</code></pre>
<p>更改结果如下</p>
<pre><code class="language-bash">[epel]
name=Extra Packages for Enterprise Linux 7 - $basearch
baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch
failovermethod=priority
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

[epel-debuginfo]
name=Extra Packages for Enterprise Linux 7 - $basearch - Debug
baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch/debug
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch
failovermethod=priority
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
gpgcheck=1

[epel-source]
name=Extra Packages for Enterprise Linux 7 - $basearch - Source
baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch
failovermethod=priority
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
gpgcheck=1
</code></pre>
<p>更新 yum缓存</p>
<pre><code class="language-bash">yum clean all &amp;&amp; yum makecache
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在CentOS7 上升级git至2.x版本]]></title>
        <id>https://konvict.github.io/post/update-git/</id>
        <link href="https://konvict.github.io/post/update-git/">
        </link>
        <updated>2022-01-07T17:44:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前期准备">前期准备</h1>
<p>卸载当前系统git</p>
<pre><code class="language-bash">yum remove -y git &amp;&amp; yum autoremove -y
</code></pre>
<p>安装相应软件源</p>
<pre><code class="language-bash">rpm -Uvh https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm &amp;&amp; \
yum clean all &amp;&amp; yum makecache
</code></pre>
<p>安装git</p>
<pre><code class="language-bash">yum install git -y 
</code></pre>
<p>查看是否成功</p>
<pre><code class="language-bash">git --version
git version 2.34.1
</code></pre>
<p>升级完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[西安城区小吃]]></title>
        <id>https://konvict.github.io/post/xian-snaks-route/</id>
        <link href="https://konvict.github.io/post/xian-snaks-route/">
        </link>
        <updated>2022-01-07T17:18:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="西安城区小吃分布">西安城区小吃分布</h1>
<figure data-type="image" tabindex="1"><img src="https://oss.konvict.cn/xian-snaks-route/1641575973399.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[命令行生成随机密码]]></title>
        <id>https://konvict.github.io/post/makepasswd/</id>
        <link href="https://konvict.github.io/post/makepasswd/">
        </link>
        <updated>2021-12-16T15:57:14.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>sha256sum</li>
</ol>
<pre><code class="language-bash">date +%s | sha256sum | base64 | head -c 32  ; echo
</code></pre>
<ol start="2">
<li>/dev/urandom</li>
</ol>
<pre><code class="language-bash">&lt;  /dev/urandom tr -dc _A-Z-a-z-0-9  | head -c${1:-32};echo;
#或
tr -cd '[:alnum:]'  &lt;  /dev/urandom | fold -w30 | head -n1
#或
&lt;  /dev/urandom tr -dc _A-Z-a-z-0-9  | head -c6
#或
&lt;/dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB'  | head -c8; echo &quot;&quot;

</code></pre>
<ol start="3">
<li>openssl</li>
</ol>
<pre><code class="language-bash">openssl rand -base64 32
</code></pre>
<ol start="4">
<li>dd</li>
</ol>
<pre><code class="language-bash">dd if=/dev/urandom bs=1 count=32  2&gt;/dev/null | base64 -w 0  | rev | cut -b 2-  | rev
</code></pre>
<ol start="5">
<li>string</li>
</ol>
<pre><code class="language-bash">strings /dev/urandom | grep -o '[[:alnum:]]'  | head -n 30  | tr -d 'n'; echo
</code></pre>
<ol start="6">
<li>date+md5sum</li>
</ol>
<pre><code class="language-bash">date | md5sum
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Für die Liebe——Berge]]></title>
        <id>https://konvict.github.io/post/fur-die-liebe/</id>
        <link href="https://konvict.github.io/post/fur-die-liebe/">
        </link>
        <updated>2021-11-28T12:03:20.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://konvict.github.io/post-images/1638102018133.jpg" alt="" loading="lazy"><br>
Wir haben die Wahl<br>
我们可以选择<br>
Wir können im Gleichschritt mitmarschieren<br>
或携手同行<br>
Oder unserer Stimme folgen und aufhören nur zu funktionieren<br>
也可以遵从内心的声音，不在麻木的活着<br>
Wir haben die Wahl<br>
我们可以选择<br>
Wir könnten auch mal was riskieren<br>
何不尝试冒险改变<br>
Wir könnten uns verletzlich zeigen und die Hoffnung nicht verlieren<br>
用于展示自己的脆弱，但绝不能失去希望<br>
Wir können es versuchen, Anstatt gleich aufzugeben<br>
不要放弃,勇敢一搏<br>
Und uns Mut machen,Die guten Seiten sehen<br>
鼓起勇气，发现生活的美好<br>
Uns verbünden, statt aufeinander loszugehen<br>
握紧彼此的手，不要互相伤害<br>
Wir können wählen<br>
我们拥有选择<br>
Ich entscheide mich für die Liebe und für die Menschlichkeit<br>
我会选择爱，选择人性美好<br>
Denn nur wer nicht geliebt wird, hört auf ein Mensch zu sein<br>
因为只有不被爱的人，才会泯灭人性<br>
Ich entscheid mich für den Frieden und ich höre immer auf mein Herz<br>
我会选择和平，也总是听从自己的内心<br>
Wir sollten anfangen uns zu lieben<br>
我们应该开始彼此相爱<br>
Ich weiß genau wir sind es wert<br>
因为我知道，我们值得<br>
Es ist mir egal<br>
我不在乎<br>
Wie oft ich selbst den ganzen Hass<br>
我曾有过多少次<br>
Das ganze Leid am eigenen Leib ertragen habe<br>
亲身体会过仇恨和痛苦<br>
Es ist mir egal<br>
而毫不在乎<br>
Denn wir haben die Wahl, die ganze Wut und all die Ängste abzulegen<br>
因为我们可以选择，挣脱所有的愤怒和恐惧<br>
Unsere Feinde zu umarmen und uns selber zu vergeben<br>
拥抱我们的敌人，原谅我们自己<br>
Lasst uns zusammenführen, was längst zusammen gehört<br>
让我们欢聚在一起，我们本就属于彼此<br>
Und nie wieder wegsehen, sondern voneinander lernen<br>
再也不要回避闪躲，而是互相学习<br>
Und wenn es das Letzte ist in dieser kalten, harten Zeit<br>
如果这就是我在这冰冷吉安南的时刻做的最后一件事<br>
Ich bleibe weich<br>
我会保持一颗柔软的心<br>
Ich entscheide mich für die Liebe und für die Menschlichkeit<br>
我会选择爱，选择人性美好<br>
Denn nur wer nicht geliebt wird, hört auf ein Mensch zu sein<br>
因为只有不被爱的人，才会泯灭人性<br>
Ich entscheide mich für den Frieden und ich höre immer auf mein Herz<br>
我会选择和平，也总是听从自己的内心<br>
Wir sollten anfangen uns zu lieben<br>
我们应该开始彼此相爱<br>
Ich weiß genau wir sind es wert<br>
因为我知道，我们值得<br>
Ich entscheide mich für die Liebe und für die Menschlichkeit<br>
我会选择爱，选择人性美好<br>
Denn nur wer nicht geliebt wird, hört auf ein Mensch zu sein<br>
因为只有不被爱的人，才会泯灭人性<br>
Ich entscheid mich für den Frieden und ich hör immer auf mein Herz<br>
我会选择和平，也总是听从自己的内心<br>
Wir sollten anfangen uns zu lieben<br>
我们应该开始彼此相爱<br>
Wir sollten anfangen Mensch zu sein<br>
我们应该开始，做一个真正的人</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[经典台词]]></title>
        <id>https://konvict.github.io/post/lines/</id>
        <link href="https://konvict.github.io/post/lines/">
        </link>
        <updated>2021-11-27T19:56:28.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><br>
你要尽全力保护你的梦想。那些嘲笑你的人，他们必定会失败，他们想把你变成和他们一样的人。如果你有梦想的话，就要努力去实现。<br>
——《当幸福来敲门》</li>
<li><br>
如果做人没有梦想，那跟咸鱼有什么分别？<br>
——《少林足球》</li>
<li><br>
死亡不是生命的终点，遗忘才是。<br>
——《寻梦环游记》</li>
<li><br>
一直以为爱的反义词是不爱，只到现在我才明白，爱的反义词是遗忘。<br>
——《寻梦环游记》</li>
<li><br>
走人生的路就像爬山一样，看起来走了许多冤枉的路，崎岖的路，但最终会到达山顶。<br>
——《城南旧事》</li>
<li><br>
星星在哪里都是很亮的，就看你有没有抬头去看他们。<br>
——《玻璃樽》</li>
<li><br>
决定我们成为什么样人的，不是我们的能力，而是我们的选择。<br>
——《哈利·波特与密室》</li>
<li><br>
其实那边也不错，可惜我已经不能回头了。<br>
——《东邪西毒》</li>
<li><br>
爱情这东西，时间很关键，认识得太早或太晚，都不行。<br>
——《2046》</li>
<li><br>
聚时何其欢，散时终须散。<br>
——《凉生，我们可不可以不忧伤》</li>
<li><br>
有些人，见三百次也没用，有些人，见三次就够了。<br>
——《大约在冬季》</li>
<li><br>
现在想起来，光是遇到那家伙，就感觉自己赚到了。<br>
——《横道世之介》</li>
<li><br>
人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完，当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。<br>
——《千与千寻》</li>
<li><br>
如果你不出去走走，就会以为眼前的就是全世界。 ——《天堂电影院》</li>
<li><br>
我们每个人都生活在各自的过去中，人们会用一分钟的时间去认识一个人，用一小时的时间去喜欢一个人，再用一天的时间去爱上一个人，到最后呢，却要用一辈子的时间去忘记一个人。<br>
——《廊桥遗梦》</li>
<li><br>
生而为人，我很抱歉。<br>
——《被嫌弃的松子的一生》</li>
<li><br>
你可以像疯狗一样地发泄不满，可以对天发誓，也可以诅咒命运，但在你走的时候，一定要释怀。<br>
——《本杰明▪巴顿奇事》</li>
<li><br>
钱没了可以挣回来，今天过来就再也没有了。<br>
——《无人区》</li>
<li><br>
如果我可以让人们微笑，那这就是我存在的意义。<br>
——《一条狗的使命》</li>
<li><br>
听说人类的一生 大多数时间都是孤独的，很多事需要一个人做，很多委屈痛苦需要一个人去承受。<br>
——《一条狗的使命2》</li>
<li><br>
不管你要做什么，都不要放弃。<br>
——《疯狂动物城》</li>
<li><br>
人生也许就是不断的放下 遗憾的是，我们却来不及好好道别。<br>
——《少年派的奇幻漂流》</li>
<li><br>
凡事都有可能，永远别说永远。<br>
——《放牛班的春天》</li>
<li><br>
幸福是当你想吃的时候有得吃 ，想被爱的时候有人来爱你。<br>
——《飞屋环游记》</li>
<li><br>
我不知将去何方，但我已经在路上。<br>
——《千与千寻》</li>
<li><br>
一生那么短，遗忘又那么漫长。<br>
——《泰坦尼克号》</li>
<li><br>
如果我们一直住在彼此心里，那死亡就不是分离。<br>
——《北京遇上西雅图》</li>
<li><br>
”前面漆黑一片，什么也看不到。”“也不是，天亮后会很美的。”——《喜剧之王》</li>
<li><br>
或许幸福像玻璃一样，因为平时从未察觉。<br>
——《反叛的鲁路修》</li>
<li><br>
人心中的成见就像一座大山，任你怎么努力也休想搬动。<br>
——《哪吒之魔童降世》</li>
<li><br>
We laughed and kept saying&quot;see u soon&quot;,but inside we both knew we'd never see each other again.<br>
我们笑着说再见，却深知再见遥遥无期。<br>
——《The Legend of 1900》</li>
<li>你不了解真正的失去，唯有爱别人胜于自己，才能体会。<br>
——《心灵捕手》</li>
<li><br>
We sat and drank with the Sun on our shoulders and felt like free men.<br>
阳光洒肩头,仿佛自由人。<br>
——《The Shawshank Redemption》</li>
<li><br>
Life was like a box of chocolates, you never know what you're gonna get.<br>
人生就像一盒巧克力,你永远不知道会尝到哪种滋味。<br>
——《Forrest Gump》</li>
<li><br>
Lonely people in this world are afraid to take the first step.<br>
世界上孤独的人都害怕迈出第一步。<br>
—— 《Green Book》</li>
<li><br>
Life is not like cooking, put all the ingredients are ready before the pot.<br>
人生不能象做菜,把所有的料都准备好了才下锅。<br>
——《Eat Drink Man Woman》</li>
<li><br>
Live in the present, regardless of gains and losses, with the heart of doing nothing to do things<br>
活在当下，不计得失，以无为之心做有为之事<br>
——《3 Idiots》</li>
<li><br>
“Is life always this hard,or is it just when you are a kid?&quot; &quot; Always like this.&quot;<br>
人生总是那么痛苦吗？还是只有小时候是这样？ 总是如此。<br>
——《Léon The Professional》</li>
<li><br>
In case I don’t see you… Good afternoon, good evening, and good night!<br>
如果再也不能见到你，祝你早安，午安，晚安!<br>
——《The Truman Show》</li>
<li><br>
Now, you're thinking about this all wrong. It's not so much what you look like. It's what's inside that he can't stand.<br>
你想错了，他在乎的不是你的外表，他看重的是你的灵魂。<br>
——《How to Train Your Dragon》</li>
<li><br>
We become the most familiar strangers.<br>
我们变成了最熟悉的陌生人。<br>
——《Gone with the Wind》</li>
<li><br>
After all, tomorrow is another day.<br>
无论如何，明天又是新的一天。<br>
——《La vita è bella》</li>
<li><br>
You let youself be overcome by sorrow. You will drown in it.<br>
你让自己沉溺在悲伤里会越陷越深的。<br>
——《12 Years a Slave》</li>
<li><br>
Happiness is not about being immortal nor having food or rights in one's hand. It's about having each tiny wish come true, or having something to eat when you are hungry or having someone's love when you need love. 　<br>
幸福，不是长生不老，不是大鱼大肉，不是权倾朝野。幸福是每一个微小的生活愿望达成。当你想吃的时候有得吃，想被爱的时候有人来爱你 。<br>
——《Up》</li>
<li><br>
I'm messed up. I am. You know, on the one hand, I want to forget her. On the other hand, I know that she's the only person in the entire universe that will make me happy.<br>
我真的很惨，一方面我想忘了她，另一方面，我知道全宇宙只有她可以让我快乐。<br>
——《500 Days of Summer》</li>
<li><br>
The bigger the man, the deeper his imprint. And if he loves, he suffers, knowing it's a dead-end street.<br>
越是煎熬 越刻骨铭心 爱了就要受苦 明知没有结果 。<br>
——《Nuovo Cinema Paradiso》</li>
<li><br>
We re meant to lose the people we love. How else would we know how important they are to us.<br>
我们注定要失去我们所爱之人，不然我们怎么知道他们在我们生命中有多重要？<br>
——《Zootopia》</li>
<li><br>
Be determined. Instead of intending to just try, do it.<br>
要下定决心去拼一把，而不只是试一试。<br>
——《Star Wars》</li>
<li><br>
When you re young, you just believe there ll be many people with whom you ll connect with. Later in life, you realize it only happens a few times.<br>
年轻的时候你以为会和许多人心灵相通，但是后来你发现，这样的事情一辈子只会发生那么几次。<br>
——《Before Sunset》</li>
<li><br>
Love means never having to say you're sorry.<br>
爱就是永远不必说对不起。<br>
——《Love Story》(1970)</li>
<li><br>
Your spark isn't your purpose. That last box fills in when you are ready to come live. And, the thing is, you are pretty great at Jazzing.<br>
火花不是人生目标。当你准备好去生活的那一刻，火花就已经被点燃。还有，你真的很爵士。<br>
——《Soul》</li>
<li><br>
-How are you gonna spend your life？<br>
-你将如何度过这一生？<br>
-I'm not sure. But, I'm going to live every minute of it.<br>
-我也不知道，但是，我会珍惜当下的每一分钟。<br>
——《Soul》</li>
<li><br>
Some people just can't let go of their own anxieties and obsessions, leaving them lost and disconnected from life.<br>
有些人就是放不下自己的焦虑和痴迷，以至于他们迷失自我，与人生脱节。<br>
——《Soul》</li>
<li><br>
I'm happy as a clam, my man. Not everyone can be Charles Drew inventing blood transfusions.<br>
我很开心，伙计。并不是每个人都能成为像查尔斯·德鲁那样发明输血的人。<br>
I get to meet interesting folks like you, make them happy, and make them handsome.<br>
我会遇到像你这样有趣的人，让他们快乐，让他们看起来英俊。<br>
——《Soul》</li>
<li><br>
Some people just can't let go of their own anxieites an d obsessions, leaving them lost and disconnected from life.<br>
有些人就是放不下自己的焦虑和执念，以至于他们迷失自我与人生脱节。<br>
——《Soul》</li>
<li><br>
Sometimes you have to reach into someone else’s world to find out what’s missing in your own.<br>
有时，你必须进入别人的世界去发现自己的世界缺少什么。<br>
——《The Upside》(USA, 2019)</li>
<li><br>
You fall off the horse, you get up, get back on.<br>
跌倒了就再爬起来。<br>
——《The Upside》(USA, 2019)</li>
<li><br>
-I took it? 'Cause I'm a thief, right?<br>
-我偷走了？因为我就是个贼，对吧？<br>
-Well, aren't you?<br>
-难道不是么？<br>
-You know, that's my past and I will own that. I got no problem with that. But I'm moving forward.<br>
-这是我的过去，我承认。我接受自己的过去，但我在向前进。<br>
——《The Upside》(USA, 2019)</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网易云热评]]></title>
        <id>https://konvict.github.io/post/netease-music/</id>
        <link href="https://konvict.github.io/post/netease-music/">
        </link>
        <updated>2021-11-27T17:06:47.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>我当然知道人都是会变的，也从未指望过你永远如初，但感觉到你对我不似从前的时候，还是忍不住偷偷难过了很久。——《后来的我们》</p>
</li>
<li>
<p>没人在乎你怎样在深夜痛哭，也没人在乎你辗转反侧的要熬几个秋。外人只看结果，自己要独撑过程。等我们都明白了这个道理，便不会再在人前矫情，四处诉说以求宽慰。——《最好》</p>
</li>
<li>
<p>头等舱可以优先登机，银行VIP可以不用排队，演唱会最贵的票位置也最好，世界从不平等，你有多努力，就有多特殊 。 ——《年少有为》</p>
</li>
</ol>
<p>4.相爱过请不要后悔，也不必痛恨，因为曾经的那一刻你们是相爱的。所有的过往，就像电影画面，有快乐，有忧伤，只是曲终人散，奈何独自回忆。他的放弃，促使你找到更好的下一个，记住，永远不要为一个不爱你的人，去浪费一分一秒。——《从前的我快乐过》</p>
<ol start="5">
<li>
<p>纽扣第一颗就扣错了，可你扣到最后一颗才发现。有些事一开始就是错的，可只有到最后才不得不承认。——《等一分钟》</p>
</li>
<li>
<p>想和你踩咯吱咯吱的雪，去吃辣火锅，悄悄把手塞进你的大衣口袋，一切暖的刚刚好。——《刚刚好》</p>
</li>
</ol>
<p>7.有些人认识了一天就能谈恋爱，有些人认识了好几年都不敢表白，有些人在一起好多年却没能走到最后，有些人分分合合兜兜转转还是会天荒地老，人生就是这么奇妙，遇到错的人做什么都像是错的，遇到对的人怎样都是对的。——《望》</p>
<p>8.我睡了一下午，醒的时候屋子里黑漆漆，一点声音都没有，抬头望了望窗外，天还没完全黑，四处摸了摸，在枕头下找到手机，开机后屏幕亮起，干净，没有一条信息。——《打回原形》</p>
<ol start="9">
<li>
<p>我想放弃的时候，求你别对我笑了。——《小半》</p>
</li>
<li>
<p>有时你自己可能都没察觉，在你经历一些事或遇到某个人后。你就像换了一种性格，悄悄地告别了从前的自己。——《Near Light》</p>
</li>
<li>
<p>至今单身，并不是因为情商低，并不是忘不了谁，请别独自揣摩我有多复杂。我只是稍微比你清楚自己想要的是什么，而不是随便抓着个人就告诉自己处着试试。——《没有花收的日子》</p>
</li>
<li>
<p>先别着急爱我，如果你愿意，先来尝尝我的怪脾气、占有欲、自私、任性。——《上心》</p>
</li>
<li>
<p>从前我想你，我会奔向你拥抱你，说很多情话；后来我想你，思念都藏在草稿箱里，生怕你知道，又担心你不知道，现在我想你，我会带上耳机听一首歌，关了手机倒头就睡。——《我们也陌生》</p>
</li>
<li>
<p>我当然知道人和人之间只是一段路的关系。但你要记得这个，在那段同行的时光里，我是真心实意的向着你的。——《遗憾》</p>
</li>
<li>
<p>我在最没有能力的年纪，碰见了最想照顾一生的人。 ——《同桌的你》</p>
</li>
<li>
<p>“长大了以后想当什么？”“小孩” ——《大人》</p>
</li>
<li>
<p>聚散无常，来来往往，学会感谢每个陪你走过一段时光的人，无论好坏悲喜，都要心存感激，也希望离开的人不经意想起我的时候，能够面带微笑。——《你只是经过》</p>
</li>
<li>
<p>我觉得自己就像个精神分裂者，像个怪人，像个神经病。我一边要压抑着自己的悲观情绪和想法，一边让自己看起来开朗活泼人见人爱。——《安眠药》</p>
</li>
<li>
<p>你喜欢一个人，就像喜欢富士山。你可以看到它，但是不能搬走它。你有什么方法可以移动一座富士山呢？回答是，你自己走过去。爱情也是如此，逛过就已经足够。——《富士山下》</p>
</li>
<li>
<p>如果你爱一个人，不是下课给人家买买水，不是短信发来发去，也不是周末一起出来唱唱歌聊聊天吃吃饭，而是努力做一个出色的人，因为以后的以后，可能还有别的人爱她，你要做的是把别人都比下去，你要变得优秀，要比其他人都优秀。——《纯粹》</p>
</li>
<li>
<p>因为慢半拍，一开始动心的人是你，结果越陷越深的是我。因为慢半拍，所以你走了，我还爱着你。有人说，慢热是怕被辜负，因为每一次都太全情投入。所以，如果你终究要离开我，请不要来爱我。毕竟，就连忘记，我都学得很慢。 ——《慢半拍》</p>
</li>
<li>
<p>有些人，很奇怪，不爱你，也不放过你。而有些人更奇怪，爱你，还放过你。——《我走后》</p>
</li>
<li>
<p>有人说，当你有了固定歌单后就很少会去听新歌。但假如有一天路过某个小街不小心听到了喜欢的，你会把它下载下来一直单曲循环。所以你并不是不能像爱最初那个人一样再去爱一个人，只是还没有遇到自己心里想找的那个人，等你找到了还会去爱，加倍地爱。——《晚睡的姑娘》</p>
</li>
<li>
<p>老人拿手机去店里维修，工作人员告诉他手机并没有坏，老人突然哭了“那我的孩子们怎么不给我打电话” 。——《爸爸妈妈》</p>
</li>
<li>
<p>不要把负面情绪传递到别人身上，朋友也不行，每个人每天都很辛苦的。自己心里难过就好了，乖。——《寻人启事》</p>
</li>
<li>
<p>真正爱过的人，是不可能做朋友的。一见面就会心软，一拥抱就会沦陷。哪怕多看一眼，就会想重新拥有。——《姑娘》</p>
</li>
<li>
<p>开始，她皱下眉你都慌张;后来，她流泪你都不紧张。——《记得》</p>
</li>
<li>
<p>我一个人走过很多路，努力过的开朗，带着你曾给我的光芒。<br>
可我还是会忍不住想你，吃着饭眼泪就流下来，夜深时清醒的回忆，而这些你都不会知道。——《叶子》</p>
</li>
<li>
<p>无奈的吧，语言这东西，表达爱意的时候如此无力，在表达伤害的时候却又如此锋利。——《尘土》</p>
</li>
<li>
<p>如果当初忍住做朋友就好了。——《喜欢》</p>
</li>
<li>
<p>祝你们幸福是假的，祝你幸福是真的。——《我到外地去看你》</p>
</li>
<li>
<p>你走了，说祝我幸福，就像一个贼偷走了我所有的钱，还留言说，恭喜发财。——《也罢》</p>
</li>
<li>
<p>张爱玲是骗人的，时间和新欢都忘不了一个人。——《可不可以》</p>
</li>
<li>
<p>事实上，机场比婚礼现场见证了更多真挚的接吻，医院的墙壁比教堂聆听了更多的祷告。——《我还想她》</p>
</li>
<li>
<p>不在一起就不在一起吧，反正一辈子也没多长。——《关于郑州的回忆》</p>
</li>
<li>
<p>我从未拥有过你一秒钟，心里却失去过你千万次。——《再见二丁目》</p>
</li>
<li>
<p>可惜喜欢就像乘法一样，只要一方为零，结果便为零。——《败将》</p>
</li>
<li>
<p>我听过一万首歌，看过一千部电影，读过一百本书，却从未俘获一个人的心。——《奇妙能力歌》</p>
</li>
<li>
<p>有时候人就是这么奇怪，受了天大的委屈都不会吭声，但听到安慰的话却泣不成声。那些硬生生憋回去的眼泪，往往会败给一句简单的安慰。——《哑巴》</p>
</li>
<li>
<p>别人以为你会有很多暧昧的关系，其实只有你自己知道你孤独的像条狗。——《其实都没有》</p>
</li>
<li>
<p>见过感情放过谁，又见谁全身而退。——《我爱的人》</p>
</li>
<li>
<p>别人稍一注意你，你就敞开心扉，你觉得这是坦率，其实这是孤独。——摘自《rainaftersummer》</p>
</li>
<li>
<p>“我要没点自我安慰的本事，还真活不到现在！”——《你的孤独，虽败犹荣》</p>
</li>
<li>
<p>我上了那么多年学，熬了那么多夜，做那么多习题，顶着各种各样的压力，参加各种残酷的考试，谈恋爱，分手，工作，加班。我这么辛苦，竟然是为了成为一个普通人......——《生而为人》</p>
</li>
<li>
<p>老人拿手机去店里维修，工作人员告诉他手机并没有坏，老人突然哭了“那我的孩子们怎么不给我打电话” 。——网易云音乐《爸爸妈妈》</p>
</li>
<li>
<p>&quot;你羡慕我 一身潇洒 无牵无挂。我却羡慕你 有家 有他 有人等你回家。&quot;——网易云音乐《偷生》</p>
</li>
<li>
<p>总有人说你变了，却从没人问你经历过什么。——《经历》热评</p>
</li>
<li>
<p>老师:“思念一个人到极致是什么感觉？” 学生:“…… 老师:“只要岁岁平安，即使，生生不见。——《Answering the door》</p>
</li>
<li>
<p>我以为，只要努力了，总可以在一起的。——《悄悄告诉你》</p>
</li>
<li>
<p>我嫉妒每一个可以影响你情绪的人。——《疑心病》</p>
</li>
<li>
<p>老爸第一次支支吾吾问我还有没有钱的时候，却忘了，我以前是理直气壮的去向他们要钱。</p>
</li>
<li>
<p>你的世界里，有那么一个男孩子可以不顾形象逗你开心，让你感到又气又好笑，好好珍惜你的宝藏男孩而不是告诉他，他很幼稚，不成熟。</p>
</li>
<li>
<p>一年四季想陪你度过，世间琐事都想与你做。此生也只想同你尝尽烟火。——《东西》</p>
</li>
<li>
<p>一个人能有多不正经，就能有多深情。——《演员》</p>
</li>
<li>
<p>你走了也好，不然总担心你要走。——《后来》</p>
</li>
<li>
<p>你讨厌父亲的粗糙朴实，可他曾经跟你一样也是个有远大抱负的少年。你讨厌母亲的斤斤计较，可她曾经和你一样也是个单纯美好的少女。</p>
</li>
<li>
<p>长大其实是一瞬间的事情，根本不用等到你十八岁成人，你只需要经历一件难忘的事，或者遇见一个让你放不下的人。——《遗憾》</p>
</li>
<li></li>
</ol>
<p>“ 怎么办，我好像丢东西了。”<br>
”丢了什么?“<br>
“多巴胺，血清素和内啡肽。”</p>
<ol start="59">
<li>
<p>月亮很亮，亮也没用，没用也亮。我喜欢你，喜欢也没用，没用也喜欢。——《当时的月亮》</p>
</li>
<li>
<p>听闻小姐治家有方，余生愿闻其详。 听闻公子四海为家，余生愿一起流浪。——《藏》</p>
</li>
<li>
<p>年纪大的高出就是：可以失去的东西很少。</p>
</li>
<li>
<p>小时候总是骗爸妈自己没钱了，现在骗他们自己还有钱。——《异乡人》</p>
</li>
<li>
<p>到头来，我不是孙悟空，也不是至尊宝，终究成了城墙下的那群人，看着别人的爱情，咀嚼自己的青春。——《一生所爱》</p>
</li>
<li>
<p>考59分比考0分更难过，最痛苦的不是不曾拥有，而是差一点就可以。——《浪费》</p>
</li>
<li>
<p>不在一起就不在一起吧，反正一辈子也没多长。——《关于郑州的记忆》</p>
</li>
<li>
<p>当你觉得孤独无助时，想一想还有十几亿的细胞只为了你一个人而活。——《相守》</p>
</li>
<li>
<p>见过感情放过谁，又见谁全身而退。——《我爱的人》</p>
</li>
<li>
<p>“我于昨晚去世，走时心如止水，我于今早重生，来时心怀暖阳。”——《心如止水》</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[村上春树]]></title>
        <id>https://konvict.github.io/post/cunshangchunshu/</id>
        <link href="https://konvict.github.io/post/cunshangchunshu/">
        </link>
        <updated>2021-11-27T15:12:12.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>我突然间想通了，就算我再喜欢你，我也不要了，因为我没有纠缠你的勇气了，也没有那份执着了，放过你就等于放过了我自己。</li>
<li>岁月这东西，总是要按时带走它要带走的部分。</li>
<li>有人把白色说成灰色，你有必要跟他辩论一番；有人把白色说成黑色，你就没有必要理会他了。<strong>前者可能是色盲，后者无疑是流氓。</strong> ——村上春树 《无比芜杂的心绪》</li>
<li>不能用语言准确表达的东西，最好完全不说。</li>
<li>假如遇上烦心事，就盖好被子呼呼大睡。不管怎么说，这都是最好的对策。</li>
<li>记忆这东西总有些不可思议。实际身临其境的时候，几乎未曾意识到那片风景，未曾觉得它有什么撩人情怀之处，更没想到十八年后仍历历在目。——村上春树 《挪威的森林》</li>
<li>当你穿过了暴风雨，你就不再是原来那个人。</li>
<li>吃苦受难绝不是乐事一桩，但是如果您恰好陷入困境，我很想告诉您：“尽管眼前十分困难，可日后这段经历说不定就会开花结果。”请您这样换位思考、奋力前行。</li>
<li>爱，是什么都介意，又什么都原谅。</li>
<li>如果真心爱上一个人，哪怕对方不爱自己，人生也至少不会是地狱。</li>
<li>我很想看到渐次泛白的黎明时分的天宇，想喝热气蒸腾的牛奶，想闻树木的清香，想翻晨报的版面。</li>
<li>曾以为走不出的日子，现在都回不去了。</li>
<li>当我们学会用积极的心态去对待“放弃”时，我们将拥有“成长”这笔巨大的财富。</li>
<li>当自律变成一种本能的习惯，你就会享受到它的快乐。——《我的职业是小说家》</li>
<li>我在自己周围筑起高墙，没有哪个人能够入内，也尽量不放自己出去。</li>
<li>我们的人生，并不能单纯地划分明亮和黑暗。在那之间有所谓阴影的中间地带。——《天黑之后》</li>
<li>在自己喜欢的时间里，按照自己喜欢的方式，去做自己喜欢做的事，对我而言这便是自由人的定义。——《我的职业是小说家》</li>
<li>世间许多人需要的其实不是实用的忠告，而恰恰是充满暖意的附和。——《爱吃沙拉的狮子》</li>
<li>你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。 ——《舞！舞！舞》</li>
<li>我仅仅是感到惊讶，惊讶于昨天和前天毫无区别，惊讶于自己被编排入这样的人生，惊讶于自己留下的足迹甚至还未及认清，就在转瞬间被风吹走，变得无影无踪。——《眠》</li>
<li>拖拖拉拉地熬夜不睡觉，根本没一点好处。天一黑就赶紧钻进被窝，早上跟着太阳一起醒来，这样再好不过。——《1Q84》</li>
<li>这个世界上根本没有正确的选择，我们只不过是要努力奋斗，使当初的选择变得正确。</li>
<li>这世上肯定有某个角落，存在着能完全领会我想表达的意思的人。</li>
<li>在自己喜欢的时间里，按照自己喜欢的方式，去做自己喜欢做的事，对我而言这便是自由人的定义。——《我的职业是小说家》</li>
<li>可能的话，最好在明亮些的地方见，季节但愿是夏天。——《寻羊冒险记》</li>
<li>独自一人行走在陌生的土地上，单单是呼吸着空气，眺望着风景，就觉得自己一点点变成了大人。——《假如真有时光机》</li>
<li>对相爱的人来说，对方的心才是最好的房子。</li>
<li>哪里会有人喜欢孤独，不过是不喜欢失望罢了。——《挪威的森林》</li>
<li>活着就意味必须要做点什么，请好好努力。——《地下》</li>
<li>我告诉你我喜欢你，并不是一定要和你在一起，只是希望今后的你，在遭遇人生低谷的时候，不要灰心，至少曾经有人被你的魅力吸引，曾经是，以后也会是。——《且听风吟》</li>
<li>善恶并不是一成不变的东西，而是不断改变所处的场所和立场，平衡本身就是善。——《1Q84》</li>
<li>喜欢夏天的光照，风的气息，蝉的鸣叫，喜欢这些，喜欢得不得了。——《寻羊冒险记》</li>
<li>宇宙山河浪漫，生活点滴温暖。喜欢到整个世界里的老虎全都融化成黄油。</li>
<li>或许败北，或许迷失自己，或许哪里也抵达不了，或许我已失去一切，任凭怎么挣扎也只能徒呼奈何，或许我只是徒然掬一把废墟，唯我一人蒙在鼓里，或许这里没有任何人把赌注下在我身上。无所谓，有一点是明确的：至少我有值得等待有值得寻求的东西。</li>
<li>世上的人大半不会用自己的脑袋思考，而且越是不思考的人越不愿意倾听别人说话。</li>
<li>我们是在时间之中彷徨，从宇宙诞生直到死亡的时间里。所以我们无所谓生也无所谓死，只是风。</li>
<li>不管全世界所有人怎么说，我都认为自己的感受才是正确的。无论别人怎么看，我绝不打乱自己的节奏。喜欢的事自然可以坚持，不喜欢怎么也长久不了。</li>
<li>见到你，我觉得多少适应了这个世界。</li>
<li>人一旦习惯了自己总是有求不得的人生，久而久之，甚至对自己真正需求什么都渐渐模糊起来。</li>
<li>我的人生实在太有限了，不可能对谁都亲切。</li>
<li>所谓努力，就是主动而有目的的活动。</li>
<li>说谎和沉默可以说是现在人类社会里日渐蔓延的两大罪恶。事实上，我们经常说谎，动不动就沉默不语。</li>
<li>重要的是维持一种认真保护自己的姿态。如果一味地只是遭受攻击不反抗，我们就只能止步不前，慢性的无力感是会腐蚀人的。</li>
<li>总之岁月漫长，然而值得等待。</li>
<li>孤独一人也没关系， 只要能发自内心地爱着一个人，人生就会有救。哪怕不能和他生活在一起。——《1Q84》</li>
<li>刚刚好，看见你幸福的样子，于是幸福着你的幸福。——《国境以南太阳以西》</li>
<li>在我们寻找，伤害，背离之后， 还能一如既往的相信爱情，这是一种勇气。——《挪威的森林》</li>
<li>我们领教了世界是何等凶顽， 同时又得知世界也可以变得温存和美好。——《海边的卡夫卡》</li>
<li>不必太纠结于当下， 也不必太忧虑未来， 当你经历过一些事情的时候， 眼前的风景已经和从前不一样了。——《1Q84》</li>
<li>我的人生是我的，你的人生是你的。只要你清楚自己在寻求什么， 那就尽管按自己的意愿去生活。别人怎么说与你无关。——《舞！舞！舞》</li>
<li>如果我爱你，而你也正巧爱我。你头发乱了的时候，我会笑笑地替你拨一拨， 然后 手还留恋地在你发上多待几秒。但是如果我爱你，而你不巧地不爱我。你头发乱了，我只会轻轻地告诉你:你头发乱了哦。</li>
<li>不解释就明白不了的东西，即便解释了也明白不了。</li>
<li>少年时我们追求激情，成熟后却迷恋平庸， 在我们寻找，伤害，背离之后， 还能一如既往的相信爱情，这是一种勇气。每个人都有属于自己的一片森林， 迷失的人迷失了，相逢的人会再相逢。——《挪威的森林》</li>
<li>鱼说，你看不到我眼中的泪，因为我在水中。水说，我能感觉到你的泪，因为你在我心中。——《鱼和水的爱恋》</li>
<li>所谓人生，无非是一个不断丧失的过程。很宝贵的东西，会一个接一个， 像梳子豁了齿一样，从你手中滑落。取而代之落入你手中的， 全是些不值一提的伪劣品。体能，希望，美梦和理想，信念和意义， 或你所爱的人，一样接着一样， 一人接着一人，从你身旁悄然消逝。——《1Q84》</li>
<li>.或许我的心包有一层硬壳， 能破壳而入的东西是极其有限的。所以我才不能对人一往情深。——《挪威的森林》</li>
<li>如果你掉进了黑暗里，你能做的， 不过是静心等待，直到你的双眼适应黑暗。——《挪威的森林》</li>
<li>尽管眼下十分困难，但日后必定会开花结果。——《我的职业是小说家》</li>
<li>你要记得那些黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，陪你哭过的人，在医院陪你的人，总是以你为重的人，带着你四处游荡的人， 说想念你的人。是这些人组成你生命中一点一滴的温暖 ，是这些温暖使你远离阴霾， 是这些温暖使你成为善良的人。</li>
<li>年龄一大，相信的东西就越来越少。和牙齿磨损一个样。既非玩世不恭，又不是疑神疑鬼，只是磨损而已。——《世界尽头与冷酷仙境》</li>
<li>在某种情况下， 一个人的存在本身就要伤害另一个人。——《国境以南太阳以西》</li>
<li>平庸这东西犹如白衬衣上的污痕， 一旦染上便永远洗不掉，无可挽回。——《舞！舞！舞！》</li>
<li>不存在十全十美的文章，如同不存在彻头彻尾的绝望。——《且听风吟》</li>
<li>违背了自己定下的原则， 哪怕只有一次，以后就将违背更多的原则。——《当我谈跑步时我谈些什么》</li>
<li>所谓努力，就是主动而有目的的活动。</li>
<li>如果你只读每个人都在读的书， 你也只能想到每个人都能想到的事。</li>
<li>今天不想跑，所以才去跑， 这才是长距离跑者的思维方式。——《当我谈跑步时我谈什么》</li>
<li>即使是你最心爱的人， 心中都会有一片你无法到达的森林。</li>
<li>以容量不足的脑浆再怎么思考下去，也无非落得头痛而已。</li>
<li>我想通过扔这一肉眼看得见的形式告诉森林或告诉自身，自己已变得无所畏惧，因而愿赤手空拳。</li>
<li>同崭新的纤尘不染的太阳一同醒来时的惬意之感是任凭什么都无法替代的。</li>
<li>天空无一丝云絮。然而整体上还是罩有一层春天特有的朦朦胧胧的不透明面纱。天空的湛蓝便力图透过这虚无缥缈的面纱一点点渗出。阳光如细微的尘埃悄无声息地从空中降下，不为任何人注意地积于地表。</li>
<li>无论多么爱的对象，也不可能与之朝夕相处。他每天需要孤独的精神集中力，不能忍受集中力被他人那一存在所扰乱。若同某人一起生活，迟早都可能憎恶对方。无论对方是父母还是妻子抑或儿女。他最怕的就是这点。他不是怕爱谁，反倒是怕憎恶谁。</li>
<li>如果说我的小说里有能称作原创性的东西，它大概就产生于“自由”。</li>
<li>人有时忘记本应记得的事，想起本应忘记的事，尤其在面对迫在眉睫的死亡之时。</li>
<li>正值青春年华的我们，总会一次次不知觉望向远方，对远方的道路充满憧憬。</li>
<li>如向一个人解释，说不定其他人都要听，而不久就要落到向全世界解释的地步。</li>
<li>我们最正常的地方，就是知道自已是不正常的。</li>
<li>你有那么一种地方，和沙钟一个样，沙子没了，必定有人赶来填回。</li>
<li>重要的是相信自己，相信线的力量，相信线切割出来的空间的力量。不是我说，是让线与空间说。一旦线与空间开始说话，不久颜色就会说话。而后平面缓缓向立体改头换面。我要做的是鼓励它们、协助它们，绝对不能干扰它们。</li>
<li>因为所谓欺负，本来目的就是让对方明白自己在受欺负。受欺负的人居然没有察觉，这种欺负根本不可能存在。</li>
<li>怀着巨大的偏见当机立断——此乃杀人秘诀。</li>
<li>电影中核**毁灭了地球，结局却皆大欢喜。</li>
<li>太阳高高升起，墙影往前拖得很长。我望着兽们悄无声息的尸体，直到阳光开始悄悄溶化大地的积雪。因我觉得，朝阳仿佛连它们的死也一并溶化，使得看似死去的兽们蓦然立起，开始平日那种晨光中的行进。</li>
<li>我已经到了一定的年纪，时间自会拿走它的那份额度，怨不得任何人。这就是游戏规则，就如同河水向着大海源源不断地流去一样。只能把自己这种形象当作自然光景的一部分，原封不动地接受。</li>
<li>和时间赛跑，玩的倔强，玩的大汗淋漓，直子，那是与你常在，日渐明白怪我太落寞。</li>
<li>命运是在事后回顾的东西，不是事先知道的东西。</li>
<li>她的名字叫泉。多么好听的名字啊!就像往里扔进斧头就有精灵冒出来似的。</li>
<li>.我扬起脸，望着北海上空阴沉沉的云层，浮想联翩。我想起自己在过去的人生旅途中失却的许多东西，蹉跎的岁月，死去或离开的人们，无可追回的懊悔。</li>
<li>所谓世界，就定位于“充满悲惨”和“缺少欢乐”之间，由无数形状不同的小世界聚集而成。</li>
<li>我们在一片悄然无声的松林里踱着步。小径上散见些死于夏末的蝉的骸，干干痒痒的。踩在脚下便发出哔哩啪啦的声响。</li>
<li>土耳其茶本来是普普通通的红茶。然而奇怪的是，土耳其茶就是土耳其茶。而不是红茶，原因不晓得。土耳其茶是土耳其茶味，红茶是红茶味。</li>
<li>逝去的时间变成尖利的长签，刺穿心脏</li>
<li>无论力图使之具有完备的形式，但文章的脉络总是到处流窜，最后连是否有脉络都成了问题，那就像在那摞放了几只软绵绵的小猫。</li>
<li>我已经彻底习惯了每天这种周而复始的生活模式，正如人习惯于引力和气压的存在。</li>
<li>正如此呆呆思忖之间，睡意陡然袭来，形势于是急转直下，恰如舞台由明转暗一般。一只巨大的灰猿手持大锤，不知从何处闯入房间，朝我后脑壳不容分说地重重一击，我顿时气绝似的坠入昏睡的深渊。</li>
<li>假如遇上烦心事，就盖好被子呼呼大睡。不管怎么说，这都是最好的对策。</li>
<li>如候鸟没有用来抵押的资产，我也没有所谓安排。</li>
<li>想养猫，选择可以养猫的人生就是，简单的很，你有这样选择的权利，是吧?</li>
<li>喜欢眼睛看得见的东西，和喜欢眼睛看不见的东西差不多。</li>
<li>这个世界不是依靠钱，而是依靠情分转动的。我讨厌欠别人的情，所以要尽量多施舍与人。</li>
<li>喂，由美吉，别再让我这么一个人孤孤单单。没有你，我就像被离心力抛到宇宙的终端。求求你，让我看到你，把我连接到什么地方，把我同现实世界维系在一起。我不想修炼成仙，我是个再普通不过的34岁男子。我需要你。</li>
<li>沙子往下落着，如蹉跎的时光一般同其他沙子混在一起。</li>
<li>这个世界啊，既蛮不讲理，又相当缺乏善心。或许是这样，但也没关系。这种世界反正转眼间就会完蛋。然后天国就会降临。</li>
<li>她早已烂入骨髓，剥掉那层好看的外皮，里面全是烂肉。</li>
<li>身的价值，很像给没有度量单位的物质称重。</li>
<li>萤火虫消失之后，那道光的轨迹依旧在我心中滞留不去。闭上眼睛。那抹淡淡的光彷佛无处可归的游魂似的，在浓暗中不停地徘徊。</li>
<li>我的感情在永无休止的沉默中犹如以刀具做成的沉重的摆子一样从一个极端画着大大的弧线摆向另一个极端。这种感情的弧线在我的肌体上留下一道道血淋淋的伤痕。不用说，忘却这痛楚的方法实质上只有一个：画画。</li>
<li>或许你想像不到，在我们那个天地里有修养的人混不下去。所谓有修养的人，在我们那里和“性情古怪的穷小子”是同义词，有人同情，但无人欣赏。</li>
<li>沙罗说她对我有好感。那大概是真话。然而世上有许多事情，单凭好感是无济于事的。人生漫长，有时过于残酷，有时还需要牺牲者。必须有人扮演那样的角色。而且人的身体本来就被制造得很脆弱，容易受伤，割一刀就会流血。</li>
<li>你有按自己意愿生活的权利，十五岁也罢，五十一岁也罢，都跟这个无关。但遗憾的是，这同世间的一般想法很可能不相一致。</li>
<li>所谓宗教不是提供真理，而是提供一种美丽的假设。</li>
<li>我希求的是某种心绪，至少不是理解和同情。</li>
<li>谁会喜欢孤独呢，只是不想要失望罢了。</li>
<li>活法林林总总，死法种种样样，都没有什么大不了的。剩下的惟独沙漠。</li>
<li>有些人注定要相遇，有些人注定要分别。</li>
<li>且听风吟，静待花开。</li>
<li>千万别因为懦弱和无聊的自尊失去心爱的人。</li>
<li>看海看久了想见人，见人见多了想看海。</li>
<li>人生本来就是有无数的岔路口，在没有经历过的时候，谁也无法判断哪些选择一定是到达终点的最优路径。</li>
<li>死并非生的对立面，而作为生的一部分永存。——《挪威的森林》</li>
<li>世上存在着不能流泪的悲哀，这种悲哀无法向人解释，即使解释人家也不会理解。它永远一成不变，如无风夜晚的雪花静静沉积在心底。</li>
<li>不解释就弄不懂的事，就意味着怎样解释也弄不懂。</li>
<li>无聊的交谈有时近于拷问。</li>
<li>死了的人就这样死了，活着的人还要为他的继续生活付出代价。</li>
<li>喜欢的事自然可以坚持，不喜欢怎么也长久不了。</li>
<li>这世间最折磨人的，是站在原地以为还回得去。</li>
<li>希望你可以记住我，记住我这样活过，这样在你身边呆过。</li>
<li>我在自己周围筑起高墙，没有哪个人能够入内，也尽量不放自己出去。</li>
<li>如果你还不知道自己喜欢什么，你就真的迷失了。</li>
<li>我能承受任何痛苦，只要这种痛苦有意义。</li>
<li>说谎和沉默可以说是现在人类社会里日渐蔓延的两大罪恶。事实上，我们经常说谎，动不动就沉默不语。</li>
<li>慷慨付出的，便是经常得到的。</li>
<li>一旦死去，就再也不会失去什么了，这就是死亡的起点。——《舞、舞、舞》</li>
<li>因为世间大多数人并不相信真实，而是主动去相信自己希望是真实的东西。这样的人两只眼睛哪怕睁得再大，实际上也什么都看不见。</li>
<li>直言相告永远会带来最好的结果。</li>
<li>成为另一个人不容易，成为另一个名字却不难。</li>
<li>命运就象沙尘暴，你无处逃遁。只有勇敢跨入其中，当你从沙尘暴中逃出，你已不是跨入时的你了。</li>
<li>歧视是怎样一个东西，不实际遭受过是理解不了的。</li>
<li>我毕竟有我的具体情况。我活着的目的并非为了向别人出示一张好看的脸。</li>
<li>世界上不存在误解，无非看法相左。</li>
<li>曾以为走不出的日子，现在都回不去了。</li>
<li>我的想象力就像一只动物，我所做的就是保证它好好活着。</li>
<li>旅行的好处在于可以暂时远离日常生活，还不必承担平日里琐碎的责任。</li>
<li>痛楚可以选择，而磨难不可避免。</li>
<li>幸福，是有温暖的伙伴。</li>
<li>不论到了多大年龄，只要人还活着，对自己就会有新的发现。</li>
<li>昨天，是明天的前天，是前天的明天。</li>
<li>新的一天已然迫在眉睫，而旧的一天却拖曳着沉重的衣裾犹未离去。</li>
<li>人人都有不同的战场。</li>
<li>总而言之，在这广阔的世界上，除了自己你便无人可投靠。</li>
<li>每一个人都是一座孤岛。</li>
<li>谁都不喜欢行李重啊。但不知不觉行李就变重了。这就是人生啊！</li>
<li>有光明的地方就必然有阴影，有阴影的地方就必然有光明。不存在没有阴影的光明，也不存在没有光明的阴影。</li>
<li>每个人都有只能在某个特殊年代得到的特殊东西。它好比微弱的火苗，幸运的人小心翼翼地呵护它助长它，使之作为松明燃烧下去。然而一旦失去，火苗便永远无法找回。</li>
<li>从远处看，大多数东西都美丽动人。</li>
<li>我，是个空壳啊。”“真的空壳一个，彻头彻尾空无一物。”——村上春树《神的孩子全跳舞》</li>
<li>我希望的,是某一天在某一个地方偶然遇到她。比如说在路上迎面相遇,或偶然坐在同一辆巴士上。——《1Q84》</li>
<li>仅仅是因为和别人不一样，就可能被嫌弃。大人们的世界也差不多，但这在孩子们的世界里表现的更直接。——《1Q84》</li>
<li>你再怎么才华横溢，也未必就能填饱肚皮；但只要你拥有敏锐的直觉，就不必担心混不上饭吃。——《1Q84》</li>
<li>我渐渐能意会到，深刻并不等于接近事实。——《挪威的森林》</li>
<li>死已不再是生的对立。死早已存在于我的体内，任你一再努力，你还是无法忘掉的。——《挪威的森林》</li>
<li>不要同情自己，同情自己是卑劣懦夫干的勾当。——《挪威的森林》</li>
<li>但我那时还不懂，不懂自己可能迟早要伤害一个人，给她以无法愈合的重创。在某种情况下，一个人的存在本身就要伤害另一个人。——《国境以南太阳以西》</li>
<li>追求得到之日即其终止之时，寻觅的过程亦即失去的过程——《国境以南太阳以西》</li>
<li>世上有可以挽回的和不可挽回的事，而时间经过就是一种不可挽回的事。——《国境以南太阳以西》</li>
<li>山川寂寥，街市井然，居民相安无事。可惜人无身影，无记忆，无心。男女可以相亲却不能相爱。爱须有心，而心已被嵌入无数的独角兽头盖骨化为“古老的梦”——《世界尽头与冷酷仙境》</li>
<li>至于我是何以抛弃原来世界而不得不来到这世界尽头的，我却无论如何也无从记起，记不起其过程、意义和目的。是某种东西、某种力量——是某种岂有此理的强大力量将我送到这里来的！因而我才失去身影和记忆，并正将失去心。——《世界尽头与冷酷仙境》</li>
<li>他想把胸中的感念告诉对方：我们的心不是石头。石头也迟早会粉身碎骨，面目全非。但心不会崩毁。对于那种无形的东西——无论善还是恶——我们完全可以互相传达。——《神的孩子全跳舞》</li>
<li>两人记忆的烛光委实过于微弱，两人的话语也不似十四年前那般清晰。结果连句话也没说便擦身而过，径直消失在人群中，永远永远。——《遇见百分百女孩》</li>
<li>我一直以为人是慢慢变老的，其实不是，人是一瞬间变老的。——《舞！舞！舞！》</li>
<li>网无所不在，网外有网，无处可去。若扔石块，免不了转弯落回自家头上……时代如流沙，一般流动不止，我们所站立的位置又不是我们站立的位置——《舞！舞！舞！》</li>
<li>人死总是有其相应的缘由的。看上去单纯而并不单纯。根是一样的。即使露在地面上的部分只是一点点，但用手一拉就会连接出来很多。人的意识这种东西是在黑暗深处扎根生长的。盘根错节，纵横交织……无法解析的部分过于繁多。真正原因只有本人才明白，甚至本人都懵懵懂懂。——《舞！舞！舞！》</li>
<li>那时我懂了，我们尽管是再合适不过的旅伴，但归根结蒂仍不过是描绘各自轨迹的两个孤独的金属块儿。远看如流星一般美丽，而实际上我们不外乎是被幽禁在里面的、哪里也去不了的囚徒。当两颗卫星的轨道偶尔交叉时，我们便这样相会了。也可能两颗心相碰，但不过一瞬之间。下一瞬间就重新陷入绝对的孤独中。总有一天会化为灰烬。——《斯普特尼克恋人》</li>
<li>为什么人们都必须孤独到如此地步呢？我思付着，为什么非如此孤独不可呢？这个世界上生息的芸芸众生无不在他人身上寻求什么，结果我们却又如此孤立无助，这是为什么？这颗行星莫非是以人们的寂寥为养料来维持其运转的不成？——《斯普特尼克恋人》</li>
<li>有时候，昨天的事恍若去年的，而去年的事恍若昨天的。严重的时候，居然觉得明天的事仿佛昨天的。——《1973年的弹子球》</li>
<li>孤独一个人也没关系，只要能发自内心地爱着一个人，人生就会有救。哪怕不能和他生活在一起。</li>
<li>白昼之光，岂知夜色之深。——《且听风吟》</li>
<li>有希望之处定有磨练。</li>
<li>获得自由，究竟意味着什么?难道就是从一个牢笼里巧妙地逃出来，其实只是置身于另一个更大的牢笼吗?其实我们何尝不是一只只的笼中鸟，无论怎么飞，永远也飞不出被笼罩的社会和环境。自由，也只是幻想主义的说辞，我 们最终都 是找不 到的。 而脱离了社会，我们也就无所谓自由了。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[到西安，一定要去吃的美食有哪些？]]></title>
        <id>https://konvict.github.io/post/xian-snacks/</id>
        <link href="https://konvict.github.io/post/xian-snacks/">
        </link>
        <updated>2021-11-23T16:18:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="绿豆饼">绿豆饼</h1>
<h2 id="赵记绿豆饼">赵记绿豆饼</h2>
<p>地点：西安钟楼小区内</p>
<p>人均：10元？<br>
<img src="https://oss.konvict.cn/xian-snacks/1637723239430.jpg" alt="" loading="lazy"></p>
<p>西安美食首推这家深藏在钟楼小区里的赵记绿豆饼了。绿豆饼分为不同馅的，有绿豆（这家店里叫“原味饼”）的、有山楂的、有芝麻的，当然主打绿豆饼。顾客总是应接不暇，因为每个老主顾一般都几十个的买，可见这家的绿豆饼做的多好！总之就是超级超级好吃！！！</p>
<figure data-type="image" tabindex="1"><img src="https://oss.konvict.cn/xian-snacks/1637723248196.jpg" alt="" loading="lazy"></figure>
<p>趁热的时候一口咬下去，满满的幸福的味道，真的好像《中华小当家》里的食客每每吃到美味的时候的那种心情油然而生。</p>
<figure data-type="image" tabindex="2"><img src="https://oss.konvict.cn/xian-snacks/1637723254335.jpg" alt="" loading="lazy"></figure>
<p>在大厅里排队的时候还能直接看见后厨们在一个个仔细的包着绿豆馅饼，奈何窗栏阻隔，也看不细致，但是香气早已弥漫出来。因为绿豆饼太好吃所以把它单列出来排在第一名！</p>
<h1 id="肉夹馍">肉夹馍</h1>
<h2 id="子午路张记肉夹馍">子午路张记肉夹馍</h2>
<p>地点：多加分店，推荐翠华路店</p>
<p>人均：10-15元</p>
<p>特此声明：西安的肉夹馍里没有青椒</p>
<p>都是肉 都是肉 都是肉</p>
<p>货真价实童叟无欺的肉！！</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637723280571.jpg" alt="" loading="lazy"><br>
西安肉夹馍中最好吃！子午路张记的肉夹馍无论是从味觉，还是口感，还是颜值，亦或是性价比来说，都是最棒棒的！俨然碾压其他字号的存在啊！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637723286473.jpg" alt="" loading="lazy"><br>
馍的外面有点硬，有点脆，但里面的面超级软。 肉夹馍流出油很多，外面的垫纸会被浸透，但是吃起来却一点都不腻呀！咸淡刚好，真的是超级好吃。肉是煮的很烂很烂的那种～而且里面有汤汁，仿佛肉汁已经浸入到了每个肉质纤维的缝隙之中。</p>
<figure data-type="image" tabindex="3"><img src="https://oss.konvict.cn/xian-snacks/1637723291363.jpg" alt="" loading="lazy"></figure>
<p>翠华路店面十分朴素，桌子椅子都是凑出来的，甚至还有书桌当作饭桌用的。而且能近距离看见师傅剁肉，特别爽快，感觉特别的货真价实。强推！！！</p>
<h2 id="秦豫肉夹馍">秦豫肉夹馍</h2>
<p>地点：西安碑林区东木头市</p>
<p>人均：12-15元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761538605.jpg" alt="" loading="lazy"><br>
秦豫肉夹馍是上过《舌尖上的中国》的名店！这里也能清晰直观的看到师傅捞出肉来，师傅按照顾客递给的小票切出相应的部分，然后拿起准备好的白吉馍，用刀面呈上肉夹进去，然后放进纸袋里递给顾客，整个过程很是利索。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761546766.jpg" alt="" loading="lazy"><br>
试吃后与子午路对比，馍没有那么脆，反而有那么一丝硬，肉汁较少，不会渗出很多油。肉质也很软，但是在厚厚的馍的包围下，吃起来不是那么畅快。</p>
<h2 id="樊记肉夹馍">樊记肉夹馍</h2>
<p>地点：西安碑林区竹笆市(钟楼小区外)<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761555771.jpg" alt="" loading="lazy"></p>
<p>传说中的百年老店，店面很是干净整洁，就坐落在西安鼓楼正南的竹笆市街的东侧。但是优点是有售卖真空包装的腊汁肉，可以邮寄给亲朋好友！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761559595.jpg" alt="" loading="lazy"><br>
这家的肉夹馍个头很大，馍相比较而言厚一些。也同样不像子午路张记的汤汁多，稍微有点干，但也还尚可。</p>
<h1 id="回坊">回坊</h1>
<h2 id="定家小酥肉盛家酿皮">定家小酥肉&amp;盛家酿皮</h2>
<p>地点：回坊北广济街中段</p>
<p>人均：30元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761571546.jpg" alt="" loading="lazy"><br>
提到定家小酥肉，就不得不提盛家酿皮。因为在西安本地人眼里这两家必须一起吃。跟盛家酿皮售卖的人说：“隔壁吃！”，她会毫不惊讶的拿给我一个外带塑料盒装的酿皮，然后带到定家去吃。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761575642.jpg" alt="" loading="lazy"><br>
进店的时候看到两边全都是摆好的一盆盆的小酥肉，摞起来高高的，有几层。以至于满店的肉味，真的是满满的肉味。店家端上来一盆肉一碗米饭，真的是货真价实满满的一盆肉（掩面哭泣），应该是把肉炸了之后炖的？有点麻，有点酥，就着米饭吃刚好解解腻。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761581035.jpg" alt="" loading="lazy"><br>
我在事先得知本地人的一种吃法是把米饭扣进小酥肉的碗里吃。尝试了一番还是没有接受这种吃法，毕竟小酥肉里全是油。看旁桌的男青年就点了一碗小酥肉和一碗米饭作为午餐，而且人走之后肉和饭都见底了，也真是佩服。</p>
<h2 id="志亮灌汤蒸饺">志亮灌汤蒸饺</h2>
<p>地点：洒金桥附近(所有店排队最长的就是)</p>
<p>人均：30元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761592417.jpg" alt="" loading="lazy"><br>
目测是西安本地土著公认的最好吃的灌汤蒸饺店。虽说许多人都觉得这家真正主打的应该是所谓的“稀饭”。这家真的是人山人海啊！感觉把旁边其他家的生意全给抢了，以至于和他家对门都不敢开餐馆，全是什么小旅馆之类的。从点完开始到吃上最起码要等将近一个小时！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761596109.jpg" alt="" loading="lazy"><br>
八宝稀饭真的是货真料足的满满一碗，细数里面有好多的瓜子，还有米、枣、山楂、花生、莲子、薏仁、黑豆、核桃仁……是酸甜口的，哪里是“稀饭”，分明是“粥”，但超好喝！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761601713.jpg" alt="" loading="lazy"><br>
灌汤蒸饺是这家店的招牌，羊肉馅的蒸饺里面真的汤汁四溢，刚出锅的蒸饺也不烫口，里面的汤汁也不油腻，既似清汤的透彻，又似浓汤的香味。 先打开一个口，看看圆润的羊肉馅，用最轻微的力道吮吸走汤汁，然后再几口把蒸饺吃完，如此这般，不需多久，整屉蒸饺很快就见底了。志亮灌汤蒸饺是真的良心店！</p>
<h2 id="石家包子">石家包子</h2>
<p>地点：回坊北广济街大皮院总店</p>
<p>人均：10元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761609029.jpg" alt="" loading="lazy"><br>
石家包子由于品质优良已经开了多家分店，回坊里小皮院和大皮院分别有一家店，后者是总店。来的顾客有好多老主顾，一买就要几十个的。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761613654.jpg" alt="" loading="lazy"><br>
包子味道好、个儿大、馅儿足，价格便宜，1.5块到2块钱就一个，最受欢迎的要数大葱牛肉馅包子和孜然牛肉馅包子。其中重点推荐孜然肉包，一点都不像它馅里面的鲜红色显出的那般辣，但有孜然的味道，把肉本身的膻气味给盖过了。</p>
<h2 id="马峰小炒泡馍">马峰小炒泡馍</h2>
<p>地点：回坊北广济街北段</p>
<p>人均：25元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761623426.jpg" alt="" loading="lazy"></p>
<p>马峰小炒泡馍，而不是“马蜂小炒泡馍”，而且也不是“马峰小炒/泡馍”。就坐落在北广济街和小皮院街路口往北几十米的地方，一共三层楼，可见生意兴隆。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761627586.jpg" alt="" loading="lazy"><br>
西安小炒界第一重口味。至于口味，就见仁见智了，有一点黑暗料理的感觉。味道里有浓重的香油味，有点辣，里面又是一堆食材的究极集合：馍、牛肉、粉丝、菜叶、豆干、葱、腐竹、木耳。</p>
<h2 id="东南亚甑糕">东南亚甑糕</h2>
<p>地点：回坊北广济街中段</p>
<p>人均：10元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761637312.jpg" alt="" loading="lazy"><br>
如果不是当地人，当然即使是当地人的读音也不是标准读音，但又能读出倒数第二个字的正确读音的话，那么你一定是个活汉语字典……<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761640877.jpg" alt="" loading="lazy"><br>
甑糕其实就是糯米、芸豆、大枣蒸制的粘糕，香气扑鼻，分量十足。之所以说分量十足是因为即使要小份的，也能盛满一盒。</p>
<h2 id="桂花糕">桂花糕</h2>
<p>地点：回坊遍地都是</p>
<p>人均：3元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761648698.jpg" alt="" loading="lazy"><br>
桂花糕是西安的一道著名小吃，色泽金黄诱人，造型更是别具一格，颜值超高。桂花糕底部焦黄，糕体金灿灿的，绵软细腻，味道香甜但并没有想象的那么甜，口感很棒。</p>
<h2 id="彦斌炸元宵灯">彦斌炸元宵灯</h2>
<p>地点：定家小酥肉东50米</p>
<p>人均：5元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761656722.jpg" alt="" loading="lazy"></p>
<p>许多知友推荐的一家炸元宵店，属于人气小店。</p>
<h2 id="花奶奶酸梅汤">花奶奶酸梅汤</h2>
<p>地点：回民街多家分店</p>
<p>人均：5元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761667384.jpg" alt="" loading="lazy"><br>
回坊酸梅汤认准花奶奶酸梅汤一家就好了！味道一尝就知道不是粉冲出来的...酸梅汤是从锅里盛出来的，上面还有一点点白沫子，一看就是熬了好久。而且还有醪糟可以盛，并且还可以双拼，味道诡异，没有亲自尝试过。</p>
<h2 id="石榴汁">石榴汁</h2>
<p>地点：回坊遍地都是</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637761673904.jpg" alt="" loading="lazy"><br>
回坊街边有好多鲜榨石榴汁，颜色鲜红，味道有点苦苦的，或者说是涩涩的，但是又有那么一点甜味，可谓苦尽甘来。但是可以证明确实是鲜榨的，因为可以亲眼目睹了店主使劲地用尽全是力气按压着搅拌机的机柄。</p>
<h1 id="小资餐馆">小资餐馆</h1>
<h2 id="薇酌饮陕南菜">薇酌饮(陕南菜)</h2>
<p>地点：西安城墙南门外榴园内</p>
<p>人均：70-90元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761845107.jpg" alt="" loading="lazy"></p>
<p>对于薇酌饮这家店的最好概括就是“西安城墙脚下的陕南味道”了。这家店位于西安城墙南门护城河对面的榴园内，周围绿化景致极佳，用餐环境分外别致。主打自家精酿的酒和陕南家常菜，口味略重，辣椒和麻椒兼用。无论从就餐环境，还是菜肴味道，都是高分！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637761880148.jpg" alt="" loading="lazy"></p>
<p>店内主打的是两道菜“招牌鲈鱼”和“家厨排骨”。排骨放了些许辣椒，油也是麻椒炸过的油的样子，让排骨很入味。同时还推荐一道菜——“豇豆炒茄子”。由于茄子本身吸油的特性，十分有回味。总体而言，对于一般只在西安旅行没有机会深入陕南的朋友值得推荐！</p>
<h1 id="面食">面食</h1>
<h2 id="一碗牛肉面">一碗牛肉面</h2>
<p>地点：陕西体育场北路靠东侧</p>
<p>人均：20元</p>
<figure data-type="image" tabindex="4"><img src="https://oss.konvict.cn/xian-snacks/1637761927371.jpg" alt="" loading="lazy"></figure>
<p>不是生长在三秦大地的人大都不会知道这家店名的第一个字“咥”怎么念？喜好国学的人也许能够想起《诗经·氓》中的一句“兄弟不知咥其笑矣”。但那时“咥”在此处读dié，是痛快的吃的意思，是地道的陕西方言。店门口还有老大爷带着陕腔的吆喝，会是很地道的体验！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762054578.jpg" alt="" loading="lazy"><br>
面分好几种，有牛肉面、炸酱面、油泼面、酸汤面。其中最招牌的就是牛肉面，有干的，还有带汤的。这里的牛肉面是臊子面，口味也有些重，辣中带的还是辣，配有菜码，还附送小菜。总体来说是一家非常地道的陕西面馆！</p>
<h2 id="一碗菠菜面">一碗菠菜面</h2>
<p>地点：秦豫肉夹馍总店对面</p>
<p>人均：20元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762108907.jpg" alt="" loading="lazy"><br>
这家店就在秦豫肉夹馍对面，就叫“一碗菠菜面”，属于小众美食，推荐的仍不多。虽然叫菠菜面，可面里可不是只有菠菜哦～</p>
<h1 id="街边小吃">街边小吃</h1>
<h2 id="手工锅巴">手工锅巴</h2>
<p>地点：街头或者超市一般有售</p>
<p>人均：10元/小袋 20元/大袋<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762161737.jpg" alt="" loading="lazy"><br>
西安街头巷尾小摊小贩普遍都卖的东西除了酸梅汤粉，就是手工锅巴了。口感比平时吃到的锅巴都要硬，而且不是很脆，但是味道真心没得说，孜然或者辣椒粉的味道均匀的分布在每块锅巴上，吸引人一口一口吃掉所有。</p>
<h2 id="烤馕">烤馕</h2>
<p>地点：街边</p>
<p>人均：5元<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762205998.jpg" alt="" loading="lazy"><br>
回坊里有许多清真食品，烤馕也不例外，反正馕价格实惠量又足，买几个做干粮也不错</p>
<hr>
<h1 id="其他">其他</h1>
<h2 id="牛羊肉泡馍-一真楼">牛羊肉泡馍-一真楼</h2>
<p><img src="https://oss.konvict.cn/xian-snacks/1637762337386.jpg" alt="" loading="lazy"><br>
牛肉酥烂大块，份量感人异常，配上吸收了汤汁、泡过却不失韧劲的馍、粉丝、黑木耳、豆腐干、甜脆可口的糖蒜，非常美味了~</p>
<figure data-type="image" tabindex="5"><img src="https://oss.konvict.cn/xian-snacks/1637762363080.jpg" alt="" loading="lazy"></figure>
<h2 id="八宝稀饭">八宝稀饭</h2>
<p>山楂八宝稀饭，料下得足，瓜子仁、花生、山楂、红枣、葡萄干、百合...与南方的八宝粥完全走两种风格，的确好喝。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762424946.jpg" alt="" loading="lazy"></p>
<h2 id="金家蛋菜夹馍">金家蛋菜夹馍</h2>
<p>很多微博美食大V都推荐过。虽然同样地处令人闻风丧胆的洒金桥，推荐大家早上前往洒金桥，尚且清净</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637762455856.jpg" alt="" loading="lazy"><br>
招牌蛋菜夹馍，俩咸蛋黄，一个荷包蛋，配有玫瑰咸菜和花生。食客们一般是打包了夹馍带走，寻一家酸梅汤或是八宝稀饭配着吃。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762495686.jpg" alt="" loading="lazy"></p>
<h2 id="回民街酸奶">回民街酸奶</h2>
<p>回民街上走两步就能看到的酸奶小铺，分店非常多，也是必打卡的点了。冰柜里还放着酸奶雪糕，现场还有炒酸奶卷、酸奶冰激凌、双皮奶等品种，留着下次来西安再尝试。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762532196.jpg" alt="" loading="lazy"></p>
<h2 id="回民街甑糕">回民街甑糕</h2>
<p>回民街网红，地理位置绝佳，人人瞩目的拐角处。金丝蜜枣泥软糯香甜，厚厚一层铺在现蒸的糯米饭上，软烂的花生和大颗蜜枣都不少。没有想象中那么甜~<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762565506.jpg" alt="" loading="lazy"></p>
<h2 id="花奶奶酸梅汤-2">花奶奶酸梅汤</h2>
<p>回民街网红No.1。无人不知，无人不晓。花奶奶家的酸梅汤，是真材实料每天早上新鲜熬煮的，而非回民街随处可见售卖的酸梅粉泡水冲的。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637762618486.jpg" alt="" loading="lazy"><br>
<img src="https://oss.konvict.cn/xian-snacks/1637762624955.jpg" alt="" loading="lazy"></p>
<h2 id="蜂蜜凉粽">蜂蜜凉粽</h2>
<p>事实证明，吃凉粽根本不用提前做功课，随便一家就不错。豌豆糕、芝麻凉糕、蜂蜜凉粽，浇上玫瑰、桂花糖浆，筋道甜软<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763677460.jpg" alt="" loading="lazy"></p>
<h2 id="小清新面馆-煮麦">小清新面馆-煮麦</h2>
<p>地处民乐园，游客不太去的地方。人少，清净，精致小店聚集处，牛腩面以筋道扯面打底，五色配料煞是好看，再加一勺油泼辣子，一咬爆汁，极佳。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763722781.jpg" alt="" loading="lazy"><br>
<img src="https://oss.konvict.cn/xian-snacks/1637763725516.jpg" alt="" loading="lazy"></p>
<h2 id="麻酱酿皮">麻酱酿皮</h2>
<p>获奖无数，口碑极佳，几块钱的东西竟能如此美味。凉皮与酿皮的区别在于是否洗去面筋，调味主要靠醋及油泼辣子，而盛家还加上了浓浓的芝麻酱香，口感更为丰富。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763771204.jpg" alt="" loading="lazy"></p>
<h2 id="陕西冰酪">陕西冰酪</h2>
<p>人见人爱的陕西哈根达斯，中国才有的冰酪。陕西独有的醪糟、豆腐等口味。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763806597.jpg" alt="" loading="lazy"></p>
<h2 id="蒸凉皮">蒸凉皮</h2>
<p>住在北大街上，走到回民街、钟鼓楼都很近。凉皮品种很多，黑米的、菠菜的等等。调味是醋和油泼辣子，味道重、刺激，但很勾人食欲。这种功课之外的新发现，也是有趣得很啊！<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763841547.jpg" alt="" loading="lazy"></p>
<h2 id="老乌家小炒泡馍">老乌家小炒泡馍</h2>
<p>在小炒泡馍界，老乌家的地位等同于泡馍界的一真楼，即适合入门者但仍以高品质闻名于本地人中。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637763874660.jpg" alt="" loading="lazy"></p>
<h2 id="初代宇治抹茶">初代宇治抹茶</h2>
<p>这是西安第一家专做抹茶的甜品店。抹茶三笙，冰御抹茶、宇治金时绿海（抹茶雪糕、抹茶啫喱、抹茶戚风蛋糕、栗子一枚、红豆沙），都属于无功无过的品类。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843219037.jpg" alt="" loading="lazy"><br>
<img src="https://oss.konvict.cn/xian-snacks/1637843223941.jpg" alt="" loading="lazy"></p>
<h2 id="肉丸胡辣汤西安人早餐必吃">肉丸胡辣汤：西安人早餐必吃</h2>
<p>胡辣汤是由土豆淀粉勾芡而成，花白、胡萝卜、土豆、菜花等十几种食材共同煮制，在端上来之前店家会浇上一勺辣椒油，口味略麻，区别于河南胡辣汤最大之处在于牛肉丸子，这是西安胡辣汤的亮点所在。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843263108.jpg" alt="" loading="lazy"></p>
<h3 id="刘老虎肉丸胡辣汤">刘老虎肉丸胡辣汤</h3>
<p>牛肉丸很好吃，纯肉馅的没有加淀粉，非常Q弹，里面配菜很丰富，汤底不像胡辣汤那么重口，并没有很辣也不麻，汤底浓稠，配着馍很好吃。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843293096.jpg" alt="" loading="lazy"><br>
地址：莲湖区从新巷12号</p>
<h3 id="李唯一优质肉丸胡辣汤">李唯一优质肉丸胡辣汤</h3>
<p>肉丸很紧实，汤味够麻，调味有自己的特色，辣油很香，建议调料少放一些，否则会有点咸。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843322783.jpg" alt="" loading="lazy"><br>
地址：莲湖区洒金桥130号</p>
<h3 id="邢老三肉丸胡辣汤">邢老三肉丸胡辣汤</h3>
<p>这家的辣椒是分装在小盒里酌情添加，百吉饼很劲道有韧性口感好，泡在胡辣汤里很好吃。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843347127.jpg" alt="" loading="lazy"><br>
地址：莲湖区劳动西路16号</p>
<h3 id="马尔里肉丸胡辣汤">马尔里肉丸胡辣汤</h3>
<p>他们家的肉丸胡辣汤味道不错，很地道，稀稠适中，牛肉丸子比较有味<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843372130.jpg" alt="" loading="lazy"></p>
<p>地址：莲湖区洒金桥十字向南150米路东113号，这家只是夜宵，白天不卖</p>
<h2 id="no2腊牛肉夹馍腊汁肉和馍的完美融合">NO.2腊牛肉夹馍：腊汁肉和馍的完美融合</h2>
<p>腊牛肉夹馍的牛肉一般会炖煮得非常软嫩，口感糟烂，再趁热切开一只吊炉现打、酥脆劲道的坨坨馍，两者完美融合，一口吃下去，外酥里嫩，满嘴余香，一碗肉丸胡辣汤，一只腊牛肉夹馍，是西安早餐界的绝配。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843423943.jpg" alt="" loading="lazy"></p>
<p>推荐店家：</p>
<h3 id="刘纪孝腊牛羊肉">刘纪孝腊牛羊肉：</h3>
<p>莲湖区北广济街与西羊市街十字东南角，但他家只卖腊牛羊肉，并且任性到只收现金袋子也要五毛钱一个</p>
<h3 id="杨天玉腊牛羊肉">杨天玉腊牛羊肉：</h3>
<p>莲湖区洒金桥132号</p>
<h3 id="老兰家">老兰家：</h3>
<p>报恩寺街A2号小南门里（四府街）</p>
<p>Tips：</p>
<p>一般卖肉丸胡辣汤的店铺也会卖腊牛肉夹馍，都是早晨男女老少聚集的地方，并且大部分店铺胡辣汤一天只出一锅，建议早点去。</p>
<h2 id="no3牛羊肉泡馍享受亲手掰馍的乐趣">NO.3牛羊肉泡馍：享受亲手掰馍的乐趣</h2>
<p>大部分优质的泡馍馆里，肉品一般会采用秦川黄牛肉和内蒙羊肉，它们是远近闻名的上等肉品，从剔骨、浸泡血水，上火煮、再到起锅，熬汤这个过程要足足一天一夜，期间花椒、八角、小茴香以及草果等香料的味道在熬制过程中慢慢渗进汤肉里，时间越久，味道越香。</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637843491436.jpg" alt="" loading="lazy"><br>
掰好了馍把碗递上去，大约五六分钟就会泡好，同时递上来的还有辣子酱（有的在桌上）和糖蒜，别小看了这俩样东西，没有它们泡馍吃起来总感觉不完整。<br>
关于一碗泡馍的讲究：</p>
<blockquote>
<p>馍：必须是纯手工馍，机器压的馍紧实不自然，手工馍则有自然的空气眼，其次馍只能七八成熟，半生半熟的手工馍能保证口感既筋道又不会馕掉；</p>
<p>掰馍：从中间掰开，再四分之一，接着中间撕两边，一点点掰（绿豆大小），十分考验技巧和耐心，最后泡馍好不好吃，掰馍这个环节很重要；</p>
<p>肉/汤：选择上好的秦川黄牛肉，必须要肥，肉肥才能汤香；</p>
<p>粉丝：手工打的粉丝，依然不能用机制的，因为要保证口感筋道。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843524619.jpg" alt="" loading="lazy"></p>
</blockquote>
<p>推荐店家：</p>
<p>同盛斋牛羊肉泡馍：莲湖区北夏家什字6号对面</p>
<p>老米家大雨泡馍：莲湖区西羊市127号</p>
<p>果渊斋米家泡馍馆：莲湖区北广济街227号</p>
<p>Tips：</p>
<p>①泡馍好不好吃很大程度上在于馍掰得怎么样，建议绿豆粒大小最合适，掰馍时要有耐心；</p>
<p>②泡馍的四种吃法：水围城（一圈汤，中间的馍和肉摞得稍高一些，喜欢汤多一点的就偏向这种）；口汤（快吃到最后的时候，碗里只有一口汤）；干刨（没有汤的泡馍）；单走（一碗汤，一个饼，揪着吃）</p>
<h2 id="no4卤汁凉粉传说中的坊上黑暗料理">NO.4卤汁凉粉：传说中的“坊上黑暗料理”</h2>
<p>是卤汁＋凉粉＋馍＋皮蛋＋芥末＋油泼辣子＋芝麻酱＋大蒜汁＋香醋＋香油等的混搭组合，是介于凉粉与泡馍之间的“两栖美食”，沿着碗边一层一层刨着吃，一口芝麻酱香、一口卤汁调料香、一口油泼辣子香、又一口蒜泥与芥末的呛香，凉粉的柔软、馍的劲道混入这些复杂的味道里，口感混乱奇怪，但又层次分明。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843558255.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>宏顺祥卤汁凉粉：北院门街道北广济街212号</p>
<p>老陈家卤汁凉粉：莲湖区西仓东巷39号（永丰公寓对面）</p>
<p>XX卤汁凉粉：没有具体的名字，靠近洒金桥清真西寺，很显眼的绿色牌子</p>
<p>Tips：</p>
<p>①凉粉中的芥末可以依据个人口味酌量增减，也可以不要，但是体验感会逊色一大半；</p>
<p>②松花蛋和鸡蛋也可以随意搭配，可以要整个，可以要半个；</p>
<p>③吃卤汁凉粉时千万不要随意搅动，沿着碗边一口一口，一层一层地刨着吃，否则真的是黑暗料理了。</p>
<h2 id="no5灌汤包细腻而绵软的口感">NO.5灌汤包：细腻而绵软的口感</h2>
<p>又称灌汤蒸饺，馅儿足皮儿薄，汤汁鲜美，口感细腻而绵软，是灌汤包区别于一般包子的关键所在，西安灌汤包中的牛肉汤包和虾肉汤包是招牌，吃灌汤包，是将吃面、吃肉、吃汤三位一体化，是一种整合的魅力，吃汤包时先轻轻咬一小口，让汤流进勺子里，一般刚好一勺，先尝口汤，再吃口肉馅，最后是面皮，这是吃灌汤包的正确顺序。</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637843587006.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>志亮灌汤蒸饺：莲湖区洒金桥12号（近清真西寺）</p>
<p>贾三灌汤包子馆：碑林区回坊西羊市街121号（近刘纪孝腊牛羊肉店）</p>
<p>李铁灌汤包：小寨西路58号（小寨西路与朱雀大街十字东北角）</p>
<p>Tips：</p>
<p>①咬第一口汤包时千万不要过于心急，否则会汤溅满脸，并且汤汁比较烫；</p>
<p>②吃灌汤包配上一碗八宝粥，味道很绝美。</p>
<h2 id="no6花奶奶酸梅汤乌梅酸甜略带中草气味">NO.6花奶奶酸梅汤：乌梅酸甜略带中草气味</h2>
<p>花奶奶酸梅汤没有店铺门面，是摊位，一个绿色的牌子，一个冰箱，两只桶，一只装酸梅汤，一只装醪糟，这些东西共同撑起了这个有口皆碑的老字号，区别于其他家的酸梅汤，花奶奶酸梅汤乌梅的酸甜味道不会过于浓重让人觉得腻，并且里面有一丝淡淡的中草药味，味道很清新。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843634926.jpg" alt="" loading="lazy"><br>
摊位地址：</p>
<p>回民街大皮院中段老同盛生对面（近同盛生）；</p>
<p>北院门144号（高家大院后门门口）</p>
<p>Tips：</p>
<p>花奶奶家不仅有酸梅汤，还有醪糟，都是冰镇的，还可以两掺，酸梅汤和醪糟混在一起的味道也很清爽。</p>
<h2 id="no7凉皮三秦套餐镇餐之宝">NO.7凉皮：三秦套餐镇餐之宝</h2>
<p>在陕西，凉皮有很多品种：擀面皮、米皮、秘制、麻酱酿皮等等，米皮的灵魂是辣椒油，擀面皮重在辣子和醋的黄金比例搭配，麻酱酿皮则取决于麻酱。一碗调好的凉皮，再配以一瓶冰峰、一个腊汁肉夹馍，堪称黄金搭档的“三秦套餐”。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637843672145.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>盛志望麻酱酿皮：莲湖区大皮院225号</p>
<p>云老四凉皮：长乐中路218号红花巷16号</p>
<p>马记擀面皮：雁塔区长安中路外国语大学门口向西十米</p>
<p>在西安，除了几种必吃美食外，还有很多不错的当地小吃令各地游客趋之若鹜，酸甜苦辣咸，口味多样，与主流小吃共同支撑起西安的美食一片天。</p>
<h2 id="其他-2">其他</h2>
<h3 id="no1玫瑰芝麻凉糕玫瑰清香的驱暑利器">NO.1玫瑰芝麻凉糕：玫瑰清香的驱暑利器</h3>
<p>芝麻凉糕是用豆沙、糖、糯米等食材做成的冰凉的糕点，绵软而不粘牙，沙甜而不腻口，再洒上玫瑰花瓣经过糖腌制而成的玫瑰酱，清新的玫瑰花香和豆沙馅的香甜在口腔与鼻腔里蔓延，是西安少有的小清新美食之一，尤其是在夏季，一份玫瑰芝麻凉糕，可以驱走短暂的暑热</p>
<figure data-type="image" tabindex="6"><img src="https://oss.konvict.cn/xian-snacks/1637843779776.jpg" alt="" loading="lazy"></figure>
<p>推荐店家：</p>
<p>北广济街208号对面，没有名字，一个老爷爷和他的小摊；</p>
<p>赵老五甜食：西羊市街（顺着西羊市走，左手边第一家牌子很明显）</p>
<h3 id="no2-陕拾叁冰酪陕西牌哈根达斯">NO.2 陕拾叁冰酪：陕西牌“哈根达斯”</h3>
<p>传说中陕西口味的哈根达斯，都是以西安周边的时令水果为原材料，洛川苹果味、清涧红枣味、午子绿茶味、临潼石榴味、户太八号葡萄味，除此以外，还有几款无法想象的味道：豆腐味、酱油味、醪糟味……，但是味道并不会让人难以接受，每一个口味都自带惊喜属性，代表着陕西专属味道。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637844569142.jpg" alt="" loading="lazy"></p>
<p>店家地址：</p>
<p>陕拾叁冰饼糖鼓楼店：碑林区北院门270号（西华门靠近北院门路口转角西侧）</p>
<p>陕拾叁冰饼糖雁塔威斯汀店：雁塔区慈恩路66号（威斯汀酒店一层）</p>
<h3 id="no3-八宝粥酸酸甜甜的古城早景">NO.3 八宝粥：酸酸甜甜的古城早景</h3>
<p>用烧酒火化红糖，红糖一经火化，糖汁泛出浓郁的酒香，溶解于色彩绚丽的八宝饭里，食材丰富，瓜子仁、花生、百合、枸杞、葡萄干、提子干、莲子、红枣，趁温热喝上一口，细细品味甜爽的粥里夹杂着的提子干微微的酸。在古城的微风里，来一碗温热或冰镇八宝粥，你会不会全然放松，去享受这样的慢节奏</p>
<p><img src="https://oss.konvict.cn/xian-snacks/1637844842152.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>白翔甜食店：莲湖区大皮院89号（近乌家小炒）</p>
<p>马继明回坊名吃：洒金桥13号（近清真西寺）</p>
<h3 id="no4羊肉汤杂肝汤舒爽暖胃的祖传汤食">NO.4羊肉汤/杂肝汤：舒爽暖胃的祖传汤食</h3>
<p>回坊里的杂肝汤多为祖传汤食，流传的年代久远，独特之处在于食材的自由搭配。此外，如果一些外地游客实在不能接受动物内脏，也可以选择比较清淡的羊肉汤，肉烂汤甜，汤汁乳白，再撒上碧绿的葱花或香菜，会令人食欲大增<br>
<img src="https://oss.konvict.cn/xian-snacks/1637844907748.jpg" alt="" loading="lazy"></p>
<p>推荐店家：</p>
<p>老李家杂肝汤：回民街大皮院134号（定家小酥肉对面）</p>
<p>老马家羊肉汤：大学习巷与西大街交叉口向北20米路东</p>
<h3 id="no5酸汤水饺酸辣可口的陕西风味">NO.5酸汤水饺：酸辣可口的陕西风味</h3>
<p>酸汤水饺以羊肉馅最受欢迎，贵在酸汤，馅儿大皮儿薄肉多，在西安的夜市卖得特别红火，论吃酸，人们想到山西，但秦不逊晋，论吃辣，人们想到湖南，但老陕“怕不辣”，陕西人对酸辣的追求绝不亚于任何地方，所以酸汤水饺的酸辣味道稍重，吃一口，每一个毛孔都会往外冒汗，浑身舒展自在。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637844941508.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>饺子王：回民街大皮院1号</p>
<p>马二酸汤水饺：莲湖区洒金桥131号</p>
<h1 id="西安特产">西安特产</h1>
<h2 id="no1枣夹核桃">NO.1枣夹核桃</h2>
<p>虽然色相上不够好看，但味相上真的无法挑剔，一口下去，核桃的油香酥脆和红枣的独特香味共同呈现在味觉上，甜而醇厚。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637844984413.jpg" alt="" loading="lazy"></p>
<h2 id="no2油泼辣子">NO.2油泼辣子</h2>
<p>将秦椒碾制的辣椒粉与花生芝麻等境加香味的调料拌匀，然后用熟油泼入，再用农家醋一激，香味扑鼻，“油泼辣子一道菜”是陕西八大怪之一，足以体现油泼辣子在陕西人心中的地位，擀面皮、羊肉泡馍、面食、胡辣汤等等，角角落落都离不开油泼辣子，它已经不再是简单的调料品，而是陕西人心中离不开的习以为常。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637846368684.jpg" alt="" loading="lazy"><br>
推荐店家：</p>
<p>艾牛辣子坊：莲湖区庙后街4号</p>
<p>辣子刘：莲湖区庙后街与西羊市交叉口西50米，和艾牛辣子坊是隔壁</p>
<h2 id="no3泾渭茯茶">NO.3泾渭茯茶</h2>
<p>“宁可三日无粮，不可一日无茶”，形容茶在西北少数民族中的地位，茯砖茶原产于陕西，已有六百多年的历史，近几年恢复制造，将续写“发茶性以至极，香味独绝”的辉煌篇章，此外，消食减脂、增强免疫、护血管等等，茯茶具有多种功效，是陕西茶文化的代表性伴手礼。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637846403657.jpg" alt="" loading="lazy"></p>
<h2 id="no4酸梅粉">NO.4酸梅粉</h2>
<p>从传统的酸梅汤演化而来，起源于陕西，是将中药酸梅、山楂融于一锅熬煮取汁，再辅以糖桂花等，滋味浓郁，酸甜爽口，因为内含乌梅，所以可以生津止渴，也可以消暑解腻，如果流连于回坊里带不走的酸梅汤，那么带走几包便携的酸梅粉也是不错的选择。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637846422733.jpg" alt="" loading="lazy"></p>
<p>Tips：</p>
<p>①酸梅粉以小袋分装，一小袋酸梅粉配500毫升左右温水，可以热饮可以凉饮；</p>
<p>②也可以散称，没有袋装方便携带。</p>
<h2 id="no5京畿造糕点">NO.5京畿造糕点</h2>
<p>京畿造的长安酥和水晶贡饼都是口味不错的伴手礼，不同于传统水晶饼的皮硬馅糙，京畿造糕点的饼馅口味丰富，玉子板栗酥、椒盐五仁、蛋黄山栗、红枣核桃、玫瑰庆红丝等等，还有具有陕西特色的油泼辣子酥，饼皮细腻软嫩，口味香甜清新，包装也很有设计感和档次感。<br>
<img src="https://oss.konvict.cn/xian-snacks/1637846445314.jpg" alt="" loading="lazy"><br>
店家地址：莲湖区西羊市98号</p>
<hr>
<p>总结自<br>
到西安，一定要去吃的美食有哪些？ - 马蜂窝旅游的回答 - 知乎<br>
https://www.zhihu.com/question/20253598/answer/370165027<br>
到西安，一定要去吃的美食有哪些？ - Richard Brook的回答 - 知乎<br>
https://www.zhihu.com/question/20253598/answer/171796798</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker中建立mysql的主从]]></title>
        <id>https://konvict.github.io/post/docker-mysql/</id>
        <link href="https://konvict.github.io/post/docker-mysql/">
        </link>
        <updated>2021-11-23T16:15:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于主从同步的背景">关于主从同步的背景:</h2>
<p>最近在工作上遇到一个任务：将主服务器上的mysql数据库和从服务器的mysql数据库实现主从同步。即当主库发生数据的变更时，从库也能做出同样的变更。<br>
1.环境：Linux, docker;<br>
2.mysql运行在docker容器中;</p>
<h2 id="找到mysql的配置文件">找到mysql的配置文件</h2>
<p>MySQL默认读取的配置文件是“my.cnf”，这个文件的位置可以通过以下命令查找：</p>
<pre><code class="language-bash">$ mysql --help|grep 'my.cnf' 
</code></pre>
<p>该查找命令会返回以下路径，排序靠前的路径会被优先读取，若文件不存在则往下读：</p>
<pre><code class="language-bash">order of preference, my.cnf, $MYSQL_TCP_PORT,
/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf 
</code></pre>
<p>我的my.cnf文件在路径/etc/mysql下，文件内容是这样的：</p>
<pre><code class="language-bash"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
#******
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/ 
</code></pre>
<p>“!includedir /etc/mysql/conf.d/” 表示my.cnf配置文件中引入了/etc/mysql/conf.d/目录下所有的文件内容，因此在该目录下的文件中添加配置内容也能达到配置的作用。</p>
<p>由于修改配置文件极有可能将容器挂掉，无法进入容器从而无法把配置文件复原，因此，在最初创建这个容器的时候，出于安全考虑，我将宿主机的/home/mysql/conf/目录挂载到了容器的/etc/mysql/conf.d/目录中。这样，即使无法进入容器也可以在宿主机的挂载目录中找到对应的配置文件进行复原。</p>
<h2 id="解决过程">解决过程</h2>
<h5 id="a主库和从库master-slave">a.主库和从库(master &amp; slave)</h5>
<p>我的主库和从库所在服务器分别在不同的服务器的docker中，mysql在容器的3306端口，对应着宿主机的3306端口<br>
1.主库：10.30.129.204<br>
2.从库：10.30.129.191</p>
<h5 id="b主库的配置">b.主库的配置</h5>
<p>在主库的配置文件中添加以下内容：</p>
<pre><code class="language-bash">[mysqld]
server_id=100 #服务器标志号，与从库的server_id标识不得和主库一致
log-bin=mysql-bin  #设置日志文件，从库的I/O线程通过读这个文件的日志实现同步
binlog_cache_size=1M #日志的缓存大小
binlog_format=mixed #设置bin-log日志文件格式为：mixed，防止主键重复
slave_skip_errors=1062 #忽略所有的1062错误
expire_logs_days=7 #设置bin-log日志文件保存的天数 
</code></pre>
<p>配置完成后回到宿主机上，重启mysql:</p>
<pre><code class="language-undefined">&gt;docker restart mysql 
</code></pre>
<p>重启后进入容器，在mysql shell环境下查看主库的状态：</p>
<pre><code class="language-ruby">mysql&gt; show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      154 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec) 
</code></pre>
<p>在这里记录下日志文件mysql-bin.000001和日志记录到的Position，在从库连接时需要用到。</p>
<p>除此之外，还需要在主服务器上添加一个用于从机访问的帐号, 赋予REPLICATION SLAVE权限：</p>
<pre><code class="language-bash">GRANT REPLICATION SLAVE ON *.* TO '&lt;SLAVE_NAME&gt;'@'&lt;SLAVE_ADDRESS&gt;' IDENTIFIED BY '&lt;PASSWORD&gt;'; 
</code></pre>
<p>稍后，&lt;SLAVE_NAME&gt;和&lt;PASSWORD&gt;将会在从库的配置中使用。</p>
<h5 id="c从库的配置">c.从库的配置</h5>
<p>和主库的配置过程一样，先将宿主机的相关目录挂载到配置文件所在的目录上，以防不测。现在我们来修改从库的配置文件，在配置文件中添加以下内容：</p>
<pre><code class="language-csharp">[mysqld]
server_id=101 #必须和主服务器不一致
slave_skip_errors=1062
relay_log=mysql-relay-bin #设置中继日志
log_slave_updates=1
log_error=mysql_log_error #设置错误日志，当主从同步的过程中出现错误可以翻日志
master-host=10.30.129.204
master-user=&lt;SLAVE_NAME&gt;
master-password=&lt;PASSWORD&gt;
master-port=3306 
</code></pre>
<p>配置完成后，在从服务器上重启一下mysql：</p>
<pre><code class="language-undefined">docker restart mysql 
</code></pre>
<p>然后进入mysql shell中输入以下命令：</p>
<pre><code class="language-bash">mysql&gt; change master to
master_host='10.30.129.204', #主服务器地址
master_user='&lt;SLAVE_NAME&gt;',
master_password='&lt;PASSWORD&gt;',
master_port=3306,
master_log_file='mysql-bin.000001', #先前记录的主库日志文件名
master_log_pos=154; #日志给从库I/O线程读取的起始位置 
</code></pre>
<p>开启同步：</p>
<pre><code class="language-undefined">mysql&gt; start slave; 
</code></pre>
<p>最后，查看从库同步的状态：</p>
<pre><code class="language-css">mysql&gt; show slave status \G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 10.30.129.204
                  Master_User: slave
                  Master_Port: 3306
                Connect_Retry: 30
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 50325805
               Relay_Log_File: mysql-relay-bin.000007
                Relay_Log_Pos: 50325971
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 50325805 
</code></pre>
<p>我们只需要关注以下几个指标：<br>
Slave_IO_Running: Yes<br>
Slave_SQL_Running: Yes<br>
Master_Log_File: mysql-bin.000001<br>
Relay_Master_Log_File: mysql-bin.000001<br>
Read_Master_Log_Pos: 50325805<br>
Exec_master_log_pos: 50325805</p>
<p>日志文件和记录位置必须是两两一致的，IO线程和SQL线程都要是Yes状态。若同步失败，可以在错误日志下排查一下。到这里的时候，mysql的主从同步就大功告成了。</p>
<h2 id="注意事项">注意事项</h2>
<h5 id="1主库中原先就有数据">1.主库中原先就有数据</h5>
<p>如果主库中原来就存在数据，并且需要将先前的数据同步到从库中，可以全量备份数据库到从库。通过以下命令导出和导入：</p>
<pre><code class="language-bash">#全量导出
mysqldump -h &lt;host&gt;  -u &lt;username&gt; -p &lt;password&gt; --all-databases &gt;all-databases.sql

#全量导入(在从库的mysql shell环境下)
mysql&gt; source 
</code></pre>
<h5 id="2主库一直有新数据的更新">2.主库一直有新数据的更新</h5>
<p>在从主库备份全库数据，到查看主库mysql-bin-log日志文件的记录位置position的这段时间里，如果数据库被别的用户写入数据，会导致主从不一致的情况。安全起见，可以在备份前锁库，待记录完日志文件状态后再解锁：</p>
<pre><code class="language-bash">#加锁
mysql&gt; FLUSH TABLES WITH READ LOCK;
#解锁
mysql&gt; UNLOCK TABLES; 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 交叉编译]]></title>
        <id>https://konvict.github.io/post/golang-cross-compiling/</id>
        <link href="https://konvict.github.io/post/golang-cross-compiling/">
        </link>
        <updated>2021-11-23T16:14:28.000Z</updated>
        <content type="html"><![CDATA[<p>Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。</p>
<p>Mac 下编译 Linux 和 Windows 64位可执行程序</p>
<pre><code class="language-shell">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go12
</code></pre>
<p>Linux 下编译 Mac 和 Windows 64位可执行程序</p>
<pre><code class="language-bash">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go12
</code></pre>
<p>Windows 下编译 Mac 和 Linux 64位可执行程序</p>
<pre><code class="language-batch">SET CGO_ENABLED=0
SET GOOS=darwin
SET GOARCH=amd64
go build main.go

SET CGO_ENABLED=0
SET GOOS=linux
SET GOARCH=amd64
go build main.go123456789
</code></pre>
<p>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows）<br>
GOARCH：目标平台的体系架构（386、amd64、arm）<br>
交叉编译不支持 CGO 所以要禁用它</p>
<p>上面的命令编译 64 位可执行程序，你当然应该也会使用 386 编译 32 位可执行程序<br>
很多博客都提到要先增加对其它平台的支持，但是我跳过那一步，上面所列的命令也都能成功，且得到我想要的结果，可见那一步应该是非必须的，或是我所使用的 Go 版本已默认支持所有平台。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[fail2ban shell版本]]></title>
        <id>https://konvict.github.io/post/fail2ban-shell/</id>
        <link href="https://konvict.github.io/post/fail2ban-shell/">
        </link>
        <updated>2021-11-23T16:13:36.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">#!/bin/bash
#检查安全日志，如果超过20非法登录，则将主机或IP加入黑名单
dir=/home/zhao/ip_list.txt  #定义存放所匹配内容的文件
&gt;$dir  #如果有则清空
x=`awk '/Failed/{ip[$11]++}END{for(i in ip){print i&quot;,&quot;ip[i]}}' /var/log/secure`
#查找登录失败的用户
num=0
for i in $x            #i=ip,次数
do
    ip=${i%,*}         #获取ip
    nu=${i#*,}         #获取次数
    #echo $ip
    [ $nu -gt 20 ] &amp;&amp; echo $ip &gt;&gt; $dir   #累计20次则写入到文件
done
echo &quot;总共`cat $dir | wc -l`个用户，出现违规登录被拒。&quot;
num=0
for i in `awk '$1!~/^[0-9]{1,3}\.([0-9]{1,3}\.)([0-9]{1,3}\.)([0-9]{1,3})$/' $dir`
#匹配主机名
do
    echo $i &gt;&gt;/etc/hosts.deny  #写入ssh黑名单
    let num++
done
echo &quot;$num个用户被加入hosts.deny。&quot;
sleep 0.5
num=0
for i in `awk '/^[0-9]{1,3}\.([0-9]{1,3}\.)([0-9]{1,3}\.)([0-9]{1,3})$/' $dir`        
#匹配IP地址
do
    firewall-cmd --permanent --add-rich-rule=&quot;rule family=ipv4 source address=$i drop&quot;
    #将IP加入防火墙黑名单
    let num++
done
echo &quot;$num个IP被加入防火墙黑名单&quot;
firewall-cmd --reload
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ownCloud Rest Password using OCC]]></title>
        <id>https://konvict.github.io/post/owncloud-rest-password-using-occ/</id>
        <link href="https://konvict.github.io/post/owncloud-rest-password-using-occ/">
        </link>
        <updated>2021-11-23T16:11:31.000Z</updated>
        <content type="html"><![CDATA[<p>ownCloud/Nextcloud使用OCC命令重置密码</p>
<h1 id="owncloudnextcloud使用occ命令重置密码">ownCloud/Nextcloud使用OCC命令重置密码</h1>
<p>有时因为种种原因忘记了自己ownCloud/Nextcloud的密码。</p>
<p>一般来说，可以使用管理员账户来修改密码</p>
<p>如果出现了忘记了管理员密码这种糟糕的情况，就只能通过OCC命令或修改数据库的方式来解决了。本文介绍较为方便的使用OCC命令重置密码方式。</p>
<h2 id="occ命令的用法">OCC命令的用法</h2>
<p>occ命令是ownCloud/Nextcloud的命令行界面。您可以使用occ执行许多常见的服务器操作，例如安装和升级ownCloud/Nextcloud，管理用户，加密，密码，LDAP设置等。</p>
<p>一般格式是这样的：</p>
<pre><code>sudo -u www-data php occ  [options] [arguments]
</code></pre>
<p>更多使用方法可以阅读⇒<a href="https://www.orgleaf.com/1719.html">ownCloud/Nextcloud OCC命令行工具详解（1）</a></p>
<h2 id="重置密码">重置密码</h2>
<p>user相关命令：</p>
<pre><code> user
  user:add                            添加一个用户
  user:delete                         删除特定用户
  user:disable                        禁用特定用户
  user:enable                         激活特定用户
  user:info                           显示用户信息
  user:lastseen                       显示用户最后登陆了时间
  user:list                           列出所有用户
  user:report                         显示有多少用户访问
  user:resetpassword                  为一个用户重置密码
  user:setting                        读取和修改用户设置
</code></pre>
<p>我们需要用的是user:reserpassword。</p>
<p>命令格式为为下</p>
<pre><code>sudo -u www-data php occ user:resetpassword 用户名
</code></pre>
<h3 id="实例">实例</h3>
<p>要重置密码之前，我们要先知道要给哪个用户重置密码。</p>
<pre><code>sudo -u www-data php occ user:list
</code></pre>
<p>重置用户ChengYe的密码</p>
<pre><code>sudo -u www-data php occ user:resetpassword ChengYe
</code></pre>
<p>然后会提示输入新密码（输入的密码不会显示）按回车确认密码。<br>
如果输入的密码比较简单，你会得到以下提示，那么你需要换一个更复杂的密码。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aria2 & YAAW 使用说明]]></title>
        <id>https://konvict.github.io/post/aria2-and-yaaw/</id>
        <link href="https://konvict.github.io/post/aria2-and-yaaw/">
        </link>
        <updated>2021-11-23T16:09:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="aria2-yaaw-使用说明">Aria2 &amp; YAAW 使用说明</h1>
<hr>
<h2 id="aria2-配置说明">Aria2 配置说明</h2>
<ul>
<li>
<p><strong>完整选项说明请参考 <a href="https://aria2.github.io/manual/en/html/aria2c.html">Aria2 Manual</a></strong></p>
</li>
<li>
<p><strong>参数 <code>--dir</code> <code>--input-file</code> <code>--save-session</code> 根据实际情况修改路径</strong></p>
</li>
<li>
<p><strong>配置示例, 可根据需要修改各项参数</strong></p>
<pre><code>## '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##
## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##

## 文件保存相关 ##

# 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置
dir=~/downloads
# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M
#disk-cache=32M
# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc
# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc
# falloc和trunc则需要文件系统和内核支持
# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项
#file-allocation=none
# 断点续传
continue=true

## 下载连接相关 ##

# 最大同时下载任务数, 运行时可修改, 默认:5
#max-concurrent-downloads=5
# 同一服务器连接数, 添加时可指定, 默认:1
max-connection-per-server=5
# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M
# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载
min-split-size=10M
# 单个任务最大线程数, 添加时可指定, 默认:5
#split=5
# 整体下载速度限制, 运行时可修改, 默认:0
#max-overall-download-limit=0
# 单个任务下载速度限制, 默认:0
#max-download-limit=0
# 整体上传速度限制, 运行时可修改, 默认:0
#max-overall-upload-limit=0
# 单个任务上传速度限制, 默认:0
#max-upload-limit=0
# 禁用IPv6, 默认:false
#disable-ipv6=true
# 连接超时时间, 默认:60
#timeout=60
# 最大重试次数, 设置为0表示不限制重试次数, 默认:5
#max-tries=5
# 设置重试等待的秒数, 默认:0
#retry-wait=0

## 进度保存相关 ##

# 从会话文件中读取下载任务
input-file=/etc/aria2/aria2.session
# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件
save-session=/etc/aria2/aria2.session
# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0
#save-session-interval=60

## RPC相关设置 ##

# 启用RPC, 默认:false
enable-rpc=true
# 允许所有来源, 默认:false
rpc-allow-origin-all=true
# 允许非外部访问, 默认:false
rpc-listen-all=true
# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同
#event-poll=select
# RPC监听端口, 端口被占用时可以修改, 默认:6800
#rpc-listen-port=6800
# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项
#rpc-secret=&lt;TOKEN&gt;
# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项
#rpc-user=&lt;USER&gt;
# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项
#rpc-passwd=&lt;PASSWD&gt;
# 是否启用 RPC 服务的 SSL/TLS 加密,
# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接
#rpc-secure=true
# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,
# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥
#rpc-certificate=/path/to/certificate.pem
# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件
#rpc-private-key=/path/to/certificate.key

## BT/PT下载相关 ##

# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true
#follow-torrent=true
# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999
listen-port=51413
# 单个种子最大连接数, 默认:55
#bt-max-peers=55
# 打开DHT功能, PT需要禁用, 默认:true
enable-dht=false
# 打开IPv6 DHT功能, PT需要禁用
#enable-dht6=false
# DHT网络监听端口, 默认:6881-6999
#dht-listen-port=6881-6999
# 本地节点查找, PT需要禁用, 默认:false
#bt-enable-lpd=false
# 种子交换, PT需要禁用, 默认:true
enable-peer-exchange=false
# 每个种子限速, 对少种的PT很有用, 默认:50K
#bt-request-peer-speed-limit=50K
# 客户端伪装, PT需要
peer-id-prefix=-TR2770-
user-agent=Transmission/2.77
peer-agent=Transmission/2.77
# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0
seed-ratio=0
# 强制保存会话, 即使任务已经完成, 默认:false
# 较新的版本开启后会在任务完成后依然保留.aria2文件
#force-save=false
# BT校验相关, 默认:true
#bt-hash-check-seed=true
# 继续之前的BT任务时, 无需再次校验, 默认:false
bt-seed-unverified=true
# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false
bt-save-metadata=true

</code></pre>
</li>
</ul>
<h2 id="aria2-相关下载">Aria2 相关下载</h2>
<ul>
<li>
<p><a href="https://github.com/aria2/aria2/releases/latest">Aria2 源码/程序下载</a></p>
</li>
<li>
<p><a href="http://aria2c.com/archiver/aria2.conf">配置示例下载</a></p>
</li>
<li>
<p><a href="http://aria2c.com/archiver/aria2.zip">Windows 懒人包下载 (包含以下文件)</a></p>
<pre><code>aria2.conf    # 配置文件 可以自己根据说明修改
aria2.exe     # 启动文件 使用这个来启动 aria2
aria2.session # 任务保存文件 未完成任务会保存在这里
aria2c.exe    # 32位命令行主程序
README.md     # README
Aria2Data     # 下载目录 默认下载文件会保存在这里
</code></pre>
</li>
</ul>
<h2 id="yaaw-使用说明">YAAW 使用说明</h2>
<p><strong>JSON-RPC Path</strong></p>
<ul>
<li>
<p><code>JSON-RPC Path</code> 默认为: <code>http://localhost:6800/jsonrpc</code></p>
</li>
<li>
<p>如果提示 <code>Aria2 RPC 服务器错误</code> 按照以下方法修改</p>
<ul>
<li>
<p><strong><code>host</code></strong>: 指运行 Aria2 所在机器的 IP 或者名字</p>
</li>
<li>
<p><strong><code>port</code></strong>: 使用 <code>--rpc-listen-port</code> 选项设置的端口, 未设置则是 <code>6800</code></p>
</li>
<li>
<p>普通情况设置为: <code>http://host:port/jsonrpc</code></p>
</li>
<li>
<p>使用 <code>--rpc-secret=xxxxxx</code> 选项设置为: <code>http://token:xxxxxx@host:port/jsonrpc</code></p>
</li>
<li>
<p>使用 <code>--rpc-user=user --rpc-passwd=pwd</code> 选项设置为: <code>http://user:pwd@host:port/jsonrpc</code></p>
</li>
<li>
<p>以上 <code>JSON-RPC Path</code> 中的 <code>http</code> 可以用 <code>ws</code> 替代, 代表使用 <code>WebSocket 协议</code></p>
</li>
<li>
<p>当使用 <a href="https://aria2c.com">https://aria2c.com</a> 访问时, 需要使用 <code>https</code> 或 <code>wss</code> 协议</p>
</li>
</ul>
</li>
</ul>
<p><strong>Tips</strong></p>
<ul>
<li>在 YAAW 中对 Aria2 的设置会在 Aria2 重启后丢失, 必要的设置请写入配置文件</li>
<li>已经下载完成的任务会在 Aria2 重启后消失, 除非启用了 <code>--force-save</code> 选项</li>
<li>因界面已汉化, 其他不再赘述.</li>
</ul>
<h2 id="yaaw-搭配脚本">YAAW 搭配脚本</h2>
<p><strong>迅雷离线</strong></p>
<ul>
<li>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/eehlmkfpnagoieibahhcghphdbjcdmen">ThunderLixianAssistant</a></li>
<li>UserScript: <a href="https://github.com/binux/ThunderLixianExporter">ThunderLixianExporter</a></li>
</ul>
<p><strong>旋风离线</strong></p>
<ul>
<li>UserScript: <a href="https://greasyfork.org/scripts/354-xuanfengex">XuanFengEx</a></li>
<li>UserScript: <a href="https://greasyfork.org/scripts/2398-lixianexporter">LixianExporter</a></li>
</ul>
<p><strong>百度网盘</strong></p>
<ul>
<li>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/mjaenbjdjmgolhoafkohbhhbaiedbkno">BaiduExporter</a></li>
<li>Firefox Addons: <a href="https://github.com/acgotaku/BaiduExporter">BaiduExporter</a></li>
<li>UserScript: <a href="https://greasyfork.org/scripts/294-baidupandownloadhelper">BaiduPanDownloadHelper</a></li>
</ul>
<p><strong>其他脚本</strong></p>
<ul>
<li>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/nimeojfecmndgolmlmjghjmbpdkhhogl">添加到aria2</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx SSL Config]]></title>
        <id>https://konvict.github.io/post/nginx-ssl-config/</id>
        <link href="https://konvict.github.io/post/nginx-ssl-config/">
        </link>
        <updated>2021-11-23T15:55:33.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">	openssl dhparam -out dhparam.pem 2048 # 如果你的机器性能足够强大，可以用 4096 位加密  
</code></pre>
<pre><code class="language-bash">server {
  listen 443 ssl http2;
  server_name www.example.com;
  #ssl on;
  ssl_certificate /etc/ssl/certs/ssl-bundle.crt;#证书文件
  ssl_certificate_key /etc/ssl/private/www_example_com.key;#私钥
  ssl_dhparam /etc/ssl/certs/dhparam.pem;#刚刚生成的那个pem文件的路径
  ssl_session_cache shared:SSL:10m;#开启缓存，有利于减少ssl握手开销
  ssl_session_timeout 10m;#SSL会话过期时间，有利于减少服务器开销
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;#指定可用的ssl协议，排除sslV3等容易被攻击的协议
  ssl_stapling on;#开启证书吊销状态检查
  ssl_trusted_certificate  /etc/ssl/certs/ssl-bundle.crt;#这个证书路径跟上面一样
  ssl_ciphers &quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&quot;;#屏蔽不安全的加密方式
  ssl_prefer_server_ciphers on;
  add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;#开启HSTS，强制全站加密，如果你的网站要引用不加密的资源，或者考虑将来取消加密，就不要开这个
  location / {
    ……………………
  }
}
</code></pre>
<p>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问</p>
<pre><code>add_header Strict-Transport-Security max-age=63072000;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
</code></pre>
<p>或者在 Nginx 中配置将 HTTP 请求全部重定向到 HTTPS</p>
<pre><code>server {
	listen  80;
	server_name  example.com;
	return 301 https://example.com$request_uri;
}
</code></pre>
<p>nginx websocks反代</p>
<pre><code>location / {
    proxy_pass  http://example.com:8080; # 转发规则
    proxy_set_header Host $proxy_host; # 修改转发请求头，让8080端口的应用可以受到真实的请求
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $http_connection;
  
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx php-fpm Config file]]></title>
        <id>https://konvict.github.io/post/nginx-php-fpm-config-file/</id>
        <link href="https://konvict.github.io/post/nginx-php-fpm-config-file/">
        </link>
        <updated>2021-11-23T15:53:56.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">user  www www;

worker_processes auto;
worker_cpu_affinity auto;

error_log  /home/wwwlogs/nginx_error.log  crit;

pid        /usr/local/nginx/logs/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 51200;

events
    {
        use epoll;
        worker_connections 51200;
        multi_accept off;
        accept_mutex off;
    }

http
    {
        include       mime.types;
        default_type  application/octet-stream;

        server_names_hash_bucket_size 128;
        client_header_buffer_size 32k;
        large_client_header_buffers 4 32k;
        client_max_body_size 50m;

        sendfile on;
        sendfile_max_chunk 512k;
        tcp_nopush on;

        keepalive_timeout 60;

        tcp_nodelay on;

        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 256k;

        gzip on;
        gzip_min_length  1k;
        gzip_buffers     4 16k;
        gzip_http_version 1.1;
        gzip_comp_level 2;
        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
        gzip_vary on;
        gzip_proxied   expired no-cache no-store private auth;
        gzip_disable   &quot;MSIE [1-6]\.&quot;;

        #limit_conn_zone $binary_remote_addr zone=perip:10m;
        ##If enable limit_conn_zone,add &quot;limit_conn perip 10;&quot; to server section.

        server_tokens off;
        access_log off;

server
    {
        listen 80 default_server;
        #listen [::]:80 default_server ipv6only=on;
        server_name _;
        index index.html index.htm index.php;
        root  /home/wwwroot/default;

        #error_page   404   /404.html;

        # Deny access to PHP files in specific directory
        #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }

        #include enable-php.conf; #如下为enable-php.conf 原本文件内容
		   location ~ [^/]\.php(/|$)
        {
            try_files $uri =404;
            fastcgi_pass  unix:/tmp/php-cgi.sock;
            fastcgi_index index.php;
            include fastcgi.conf;
        }

        location /nginx_status
        {
            stub_status on;
            access_log   off;
        }

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /.well-known {
            allow all;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /home/wwwlogs/access.log;
    }
include vhost/*.conf;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wizard Docker Installation]]></title>
        <id>https://konvict.github.io/post/wizard-docker-installation/</id>
        <link href="https://konvict.github.io/post/wizard-docker-installation/">
        </link>
        <updated>2021-11-23T15:51:34.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">HOST_PORT=8081
DB_PORT=3306
DB_HOST=172.17.0.1
DB_DATABASE=
DB_USERNAME=
DB_PASSWORD=
DB_ROOT_PASSWORD=
DATA_DIR=/home/docker/data/wizard
ENV_FILE=/home/docker/env/wizard.env
mkdir -p /home/docker/{conf,data,logs,db,env}
mkdir -p ${DATA_DIR}

cat&gt;${ENV_FILE}&lt;&lt;EOF
DB_PORT=3306
DB_HOST=172.17.0.1
DB_DATABASE=
DB_USERNAME=
DB_PASSWORD=
EOF

mysql -uroot -p${DB_ROOT_PASSWORD} \
-e &quot;create database ${DB_DATABASE};
	grant all privileges on ${DB_DATABASE}.* to ${DB_USERNAME}@'172.17.%' identified by '${DB_PASSWORD}';
	flush privileges;&quot;

docker run -dit --name docs --env-file=${ENV_FILE} -p ${HOST_PORT}:80 \
-v ${DATA_DIR}:/webroot/storage/app/public --restart=unless-stopped \
 mylxsw/wizard

docker exec -ti docs php artisan migrate:install
docker exec -ti docs php artisan migrate
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Volume License Keys]]></title>
        <id>https://konvict.github.io/post/VLK/</id>
        <link href="https://konvict.github.io/post/VLK/">
        </link>
        <updated>2021-11-23T15:49:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="windows-volume-license-keys-vlk"><a href="https://blog.dhampir.no/content/windows-volume-license-keys-vlk" title="Windows Volume License Keys (VLK)">Windows Volume License Keys (VLK)</a></h1>
<p>I keep having to look these up, especially the “Upgrade Key” at the bottom. So I stored them here.</p>
<h3 id="windows-server-2019">Windows Server 2019</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Server 2019 Datacenter</td>
<td>WMDGN-G9PQG-XVVXX-R3X43-63DFG</td>
</tr>
<tr>
<td>Windows Server 2019 Standard</td>
<td>N69G4-B89J2-4G8F4-WWYCC-J464C</td>
</tr>
<tr>
<td>Windows Server 2019 Essentials</td>
<td>WVDHN-86M7X-466P6-VHXV7-YY726</td>
</tr>
</tbody>
</table>
<h3 id="windows-server-2016">Windows Server 2016</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Server 2016 Datacenter</td>
<td>CB7KF-BWN84-R7R2Y-793K2-8XDDG</td>
</tr>
<tr>
<td>Windows Server 2016 Standard</td>
<td>WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</td>
</tr>
<tr>
<td>Windows Server 2016 Essentials</td>
<td>JCKRF-N37P4-C2D82-9YXRT-4M63B</td>
</tr>
</tbody>
</table>
<h3 id="windows-10">Windows 10</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 10 Professional</td>
<td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td>
</tr>
<tr>
<td>Windows 10 Professional N</td>
<td>MH37W-N47XK-V7XM9-C7227-GCQG9</td>
</tr>
<tr>
<td>Windows 10 Enterprise</td>
<td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td>
</tr>
<tr>
<td>Windows 10 Enterprise N</td>
<td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td>
</tr>
<tr>
<td>Windows 10 Education</td>
<td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td>
</tr>
<tr>
<td>Windows 10 Education N</td>
<td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2015 LTSB</td>
<td>WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2015 LTSB N</td>
<td>2F77B-TNFGY-69QQF-B8YKP-D69TJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2016 LTSB</td>
<td>DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2016 LTSB N</td>
<td>QFFDN-GRT3P-VKWWX-X7T3R-8B639</td>
</tr>
</tbody>
</table>
<h3 id="windows-server-2012-r2-and-windows-81">Windows Server 2012 R2 and Windows 8.1</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 8.1 Professional</td>
<td>GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</td>
</tr>
<tr>
<td>Windows 8.1 Professional N</td>
<td>HMCNV-VVBFX-7HMBH-CTY9B-B4FXY</td>
</tr>
<tr>
<td>Windows 8.1 Enterprise</td>
<td>MHF9N-XY6XB-WVXMC-BTDCT-MKKG7</td>
</tr>
<tr>
<td>Windows 8.1 Enterprise N</td>
<td>TT4HM-HN7YT-62K67-RGRQJ-JFFXW</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Server Standard</td>
<td>D2N9P-3P6X9-2R39C-7RTCD-MDVJX</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Datacenter</td>
<td>W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Essentials</td>
<td>KNC87-3J2TX-XB4WP-VCPJV-M4FWM</td>
</tr>
</tbody>
</table>
<h3 id="windows-server-2012-and-windows-8">Windows Server 2012 and Windows 8</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 8 Professional</td>
<td>NG4HW-VH26C-733KW-K6F98-J8CK4</td>
</tr>
<tr>
<td>Windows 8 Professional N</td>
<td>XCVCF-2NXM9-723PB-MHCB7-2RYQQ</td>
</tr>
<tr>
<td>Windows 8 Enterprise</td>
<td>32JNW-9KQ84-P47T8-D8GGY-CWCK7</td>
</tr>
<tr>
<td>Windows 8 Enterprise N</td>
<td>JMNMF-RHW7P-DMY6X-RF3DR-X2BQT</td>
</tr>
<tr>
<td>Windows Server 2012</td>
<td>BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td>
</tr>
<tr>
<td>Windows Server 2012 N</td>
<td>8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td>
</tr>
<tr>
<td>Windows Server 2012 Single Language</td>
<td>2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td>
</tr>
<tr>
<td>Windows Server 2012 Country Specific</td>
<td>4K36P-JN4VD-GDC6V-KDT89-DYFKP</td>
</tr>
<tr>
<td>Windows Server 2012 Server Standard</td>
<td>XC9B7-NBPP2-83J2H-RHMBY-92BT4</td>
</tr>
<tr>
<td>Windows Server 2012 MultiPoint Standard</td>
<td>HM7DN-YVMH3-46JC3-XYTG7-CYQJJ</td>
</tr>
<tr>
<td>Windows Server 2012 MultiPoint Premium</td>
<td>XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G</td>
</tr>
<tr>
<td>Windows Server 2012 Datacenter</td>
<td>48HP8-DN98B-MYWDG-T2DCC-8W83P</td>
</tr>
</tbody>
</table>
<h3 id="windows-7-and-windows-server-2008-r2">Windows 7 and Windows Server 2008 R2</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 7 Professional</td>
<td>FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td>
</tr>
<tr>
<td>Windows 7 Professional N</td>
<td>MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td>
</tr>
<tr>
<td>Windows 7 Professional E</td>
<td>W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td>
</tr>
<tr>
<td>Windows 7 Enterprise</td>
<td>33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td>
</tr>
<tr>
<td>Windows 7 Enterprise N</td>
<td>YDRBP-3D83W-TY26F-D46B2-XCKRJ</td>
</tr>
<tr>
<td>Windows 7 Enterprise E</td>
<td>C29WB-22CC8-VJ326-GHFJW-H9DH4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Web</td>
<td>6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 HPC edition</td>
<td>TT8MH-CG224-D3D7Q-498W2-9QCTX</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Standard</td>
<td>YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Enterprise</td>
<td>489J6-VHDMP-X63PK-3K798-CPX3Y</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Datacenter</td>
<td>74YFP-3QFB3-KQT8W-PMXWJ-7M648</td>
</tr>
<tr>
<td>Windows Server 2008 R2 for Itanium-based Systems</td>
<td>GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td>
</tr>
</tbody>
</table>
<h3 id="windows-vista-and-windows-server-2008">Windows Vista and Windows Server 2008</h3>
<table>
<thead>
<tr>
<th>Operating system edition</th>
<th>KMS Client Setup Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Vista Business</td>
<td>YFKBB-PQJJV-G996G-VWGXY-2V3X8</td>
</tr>
<tr>
<td>Windows Vista Business N</td>
<td>HMBQG-8H2RH-C77VX-27R82-VMQBT</td>
</tr>
<tr>
<td>Windows Vista Enterprise</td>
<td>VKK3X-68KWM-X2YGT-QR4M6-4BWMV</td>
</tr>
<tr>
<td>Windows Vista Enterprise N</td>
<td>VTC42-BM838-43QHV-84HX6-XJXKV</td>
</tr>
<tr>
<td>Windows Web Server 2008</td>
<td>WYR28-R7TFJ-3X2YQ-YCY4H-M249D</td>
</tr>
<tr>
<td>Windows Server 2008 Standard</td>
<td>TM24T-X9RMF-VWXK6-X8JC9-BFGM2</td>
</tr>
<tr>
<td>Windows Server 2008 Standard without Hyper-V</td>
<td>W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ</td>
</tr>
<tr>
<td>Windows Server 2008 Enterprise</td>
<td>YQGMW-MPWTJ-34KDK-48M3W-X4Q6V</td>
</tr>
<tr>
<td>Windows Server 2008 Enterprise without Hyper-V</td>
<td>39BXF-X8Q23-P2WWT-38T2F-G3FPG</td>
</tr>
<tr>
<td>Windows Server 2008 HPC</td>
<td>RCTX3-KWVHP-BR6TB-RB6DM-6X7HP</td>
</tr>
<tr>
<td>Windows Server 2008 Datacenter</td>
<td>7M67G-PC374-GR742-YH8V4-TCBY3</td>
</tr>
<tr>
<td>Windows Server 2008 Datacenter without Hyper-V</td>
<td>22XQ2-VRXRG-P8D42-K34TD-G3QQC</td>
</tr>
<tr>
<td>Windows Server 2008 for Itanium-Based Systems</td>
<td>4DWFP-JF3DJ-B7DTH-78FJB-PDRHK</td>
</tr>
</tbody>
</table>
<h3 id="the-upgrade-key">The “upgrade key”</h3>
<p>If you enter a VLK key for Windows 10 Pro on Windows 10 Home, it will not be accepted. What you can do is enter the Windows 10 Pro upgrade key, <em><strong>VK7JG-NPHTM-C97JM-9MPGT-3V66T</strong></em>, let it upgrade, and then enter the VLK.</p>
<h3 id="unable-to-upgrade-with-the-upgrade-key">Unable to upgrade with the “upgrade key”</h3>
<p>If you get a message saying you’re unable to upgrade because of error 0xC03F6506 or 0xC004F069, see <a href="https://blog.dhampir.no/content/how-to-deal-with-error-0xc03f6506-when-upgrading-stubborn-windows-10-home-edition-machines-to-pro-using-a-vlk">this post</a>.</p>
<h3 id="activating-with-a-kms-server">Activating with a KMS server</h3>
<p>If you’re about to use a VLK, you are probably going to be needing these commands.</p>
<pre><code>cd %windir%\system32
cscript slmgr.vbs /ipk &lt;kms client setup key&gt;
cscript slmgr.vbs /skms kms.server.here
cscript slmgr.vbs /ato
</code></pre>
<h3 id="activating-office-2016">Activating Office 2016</h3>
<p>IMPORTANT: To do this, make sure you set the kms server first (see the “/skms” line above)</p>
<pre><code>cd \&quot;Program Files&quot;\&quot;Microsoft Office&quot;\Office16
cscript ospp.vbs /act
</code></pre>
<p>For office VLK keys, see <a href="https://blog.dhampir.no/content/office-volume-license-keys-vlk">this post</a>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FIX “CONFIGURATION OF PMADB… NOT OK” IN PHPMYADMIN]]></title>
        <id>https://konvict.github.io/post/phpmyadmin-pmadb-error/</id>
        <link href="https://konvict.github.io/post/phpmyadmin-pmadb-error/">
        </link>
        <updated>2021-11-23T15:18:08.000Z</updated>
        <content type="html"><![CDATA[<p>To fix this you have to import/create the phpmyadmin database with it’s tables. An SQL script called create_tables.sql should be in the scripts, examples or sql folder of your phpMyAdmin installation.</p>
<pre><code class="language-shell">mysql -u root -p &lt; create_tables.sql
</code></pre>
<p>Then create a user called pma and give it permissions to the phpmyadmin database:</p>
<pre><code class="language-sql">CREATE USER 'pma'@'localhost' IDENTIFIED BY 'pmapass';
GRANT ALL PRIVILEGES ON `phpmyadmin`.* TO 'pma'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
</code></pre>
<p>Now edit config.inc.php and configure/uncomment those lines:</p>
<pre><code class="language-php">/*
 * phpMyAdmin configuration storage settings.
 */

/* User used to manipulate with storage */
$cfg['Servers'][$i]['controlhost'] = 'localhost';
// $cfg['Servers'][$i]['controlport'] = '';
$cfg['Servers'][$i]['controluser'] = 'pma';
$cfg['Servers'][$i]['controlpass'] = 'pmapass';

/* Storage database and tables */
$cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
$cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
$cfg['Servers'][$i]['relation'] = 'pma__relation';
$cfg['Servers'][$i]['table_info'] = 'pma__table_info';
$cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
$cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
$cfg['Servers'][$i]['column_info'] = 'pma__column_info';
$cfg['Servers'][$i]['history'] = 'pma__history';
$cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
$cfg['Servers'][$i]['tracking'] = 'pma__tracking';
$cfg['Servers'][$i]['designer_coords'] = 'pma__designer_coords';
$cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
$cfg['Servers'][$i]['recent'] = 'pma__recent';
$cfg['Servers'][$i]['favorite'] = 'pma__favorite';
$cfg['Servers'][$i]['users'] = 'pma__users';
$cfg['Servers'][$i]['usergroups'] = 'pma__usergroups';
$cfg['Servers'][$i]['navigationhiding'] = 'pma__navigationhiding';
$cfg['Servers'][$i]['savedsearches'] = 'pma__savedsearches';
$cfg['Servers'][$i]['central_columns'] = 'pma__central_columns';
$cfg['Servers'][$i]['designer_settings'] = 'pma__designer_settings';
$cfg['Servers'][$i]['export_templates'] = 'pma__export_templates';
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML2CSV]]></title>
        <id>https://konvict.github.io/post/html2csv/</id>
        <link href="https://konvict.github.io/post/html2csv/">
        </link>
        <updated>2021-11-23T15:17:23.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python">#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# Hello, this program is written in Python - http://python.org
programname = 'html2csv - version 2002-09-20 - http://sebsauvage.net'

import sys, getopt, os.path, glob, HTMLParser, re

try:    import psyco ; psyco.jit()  # If present, use psyco to accelerate the program
except: pass

def usage(progname):
    ''' Display program usage. '''
    progname = os.path.split(progname)[1]
    if os.path.splitext(progname)[1] in ['.py','.pyc']: progname = 'python '+progname
    return '''%s
A coarse HTML tables to CSV (Comma-Separated Values) converter.

Syntax    : %s source.html

Arguments : source.html is the HTML file you want to convert to CSV.
            By default, the file will be converted to csv with the same
            name and the csv extension (source.html -&gt; source.csv)
            You can use * and ?.

Examples   : %s mypage.html
           : %s *.html

This program is public domain.
Author : Sebastien SAUVAGE &lt;sebsauvage at sebsauvage dot net&gt;
         http://sebsauvage.net
''' % (programname, progname, progname, progname)

class html2csv(HTMLParser.HTMLParser):
    ''' A basic parser which converts HTML tables into CSV.
        Feed HTML with feed(). Get CSV with getCSV(). (See example below.)
        All tables in HTML will be converted to CSV (in the order they occur
        in the HTML file).
        You can process very large HTML files by feeding this class with chunks
        of html while getting chunks of CSV by calling getCSV().
        Should handle badly formated html (missing &lt;tr&gt;, &lt;/tr&gt;, &lt;/td&gt;,
        extraneous &lt;/td&gt;, &lt;/tr&gt;...).
        This parser uses HTMLParser from the HTMLParser module,
        not HTMLParser from the htmllib module.
        Example: parser = html2csv()
                 parser.feed( open('mypage.html','rb').read() )
                 open('mytables.csv','w+b').write( parser.getCSV() )
        This class is public domain.
        Author: SÈbastien SAUVAGE &lt;sebsauvage at sebsauvage dot net&gt;
                http://sebsauvage.net
        Versions:
           2002-09-19 : - First version
           2002-09-20 : - now uses HTMLParser.HTMLParser instead of htmllib.HTMLParser.
                        - now parses command-line.
        To do:
            - handle &lt;PRE&gt; tags
            - convert html entities (&amp;name; and &amp;#ref;) to Ascii.
            '''
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.CSV = ''      # The CSV data
        self.CSVrow = ''   # The current CSV row beeing constructed from HTML
        self.inTD = 0      # Used to track if we are inside or outside a &lt;TD&gt;...&lt;/TD&gt; tag.
        self.inTR = 0      # Used to track if we are inside or outside a &lt;TR&gt;...&lt;/TR&gt; tag.
        self.re_multiplespaces = re.compile('\s+')  # regular expression used to remove spaces in excess
        self.rowCount = 0  # CSV output line counter.
    def handle_starttag(self, tag, attrs):
        if   tag == 'tr': self.start_tr()
        elif tag == 'td': self.start_td()
    def handle_endtag(self, tag):
        if   tag == 'tr': self.end_tr()
        elif tag == 'td': self.end_td()         
    def start_tr(self):
        if self.inTR: self.end_tr()  # &lt;TR&gt; implies &lt;/TR&gt;
        self.inTR = 1
    def end_tr(self):
        if self.inTD: self.end_td()  # &lt;/TR&gt; implies &lt;/TD&gt;
        self.inTR = 0            
        if len(self.CSVrow) &gt; 0:
            self.CSV += self.CSVrow[:-1]
            self.CSVrow = ''
        self.CSV += '\n'
        self.rowCount += 1
    def start_td(self):
        if not self.inTR: self.start_tr() # &lt;TD&gt; implies &lt;TR&gt;
        self.CSVrow += '&quot;'
        self.inTD = 1
    def end_td(self):
        if self.inTD:
            self.CSVrow += '&quot;,'  
            self.inTD = 0
    def handle_data(self, data):
        if self.inTD:
            self.CSVrow += self.re_multiplespaces.sub(' ',data.replace('\t',' ').replace('\n','').replace('\r','').replace('&quot;','&quot;&quot;'))
    def getCSV(self,purge=False):
        ''' Get output CSV.
            If purge is true, getCSV() will return all remaining data,
            even if &lt;td&gt; or &lt;tr&gt; are not properly closed.
            (You would typically call getCSV with purge=True when you do not have
            any more HTML to feed and you suspect dirty HTML (unclosed tags). '''
        if purge and self.inTR: self.end_tr()  # This will also end_td and append last CSV row to output CSV.
        dataout = self.CSV[:]
        self.CSV = ''
        return dataout


if __name__ == &quot;__main__&quot;:
    try: # Put getopt in place for future usage.
        opts, args = getopt.getopt(sys.argv[1:],None)
    except getopt.GetoptError:
        print usage(sys.argv[0])  # print help information and exit:
        sys.exit(2)
    if len(args) == 0:
        print usage(sys.argv[0])  # print help information and exit:
        sys.exit(2)       
    print programname
    html_files = glob.glob(args[0])
    for htmlfilename in html_files:
        outputfilename = os.path.splitext(htmlfilename)[0]+'.csv'
        parser = html2csv()
        print 'Reading %s, writing %s...' % (htmlfilename, outputfilename)
        try:
            htmlfile = open(htmlfilename, 'rb')
            csvfile = open( outputfilename, 'w+b')
            data = htmlfile.read(8192)
            while data:
                parser.feed( data )
                csvfile.write( parser.getCSV() )
                sys.stdout.write('%d CSV rows written.\r' % parser.rowCount)
                data = htmlfile.read(8192)
            csvfile.write( parser.getCSV(True) )
            csvfile.close()
            htmlfile.close()
        except:
            print 'Error converting %s        ' % htmlfilename
            try:    htmlfile.close()
            except: pass
            try:    csvfile.close()
            except: pass
    print 'All done. '
    ```</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LINUX随机密码生成]]></title>
        <id>https://konvict.github.io/post/linux-gen-password/</id>
        <link href="https://konvict.github.io/post/linux-gen-password/">
        </link>
        <updated>2021-11-23T15:16:34.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">strings /dev/urandom | grep -o '[[:graph:]]' | head -n 15 | tr -d '\n'; echo
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CENTOS HP PRINTER 3.15.11 SETUP]]></title>
        <id>https://konvict.github.io/post/centos-printer/</id>
        <link href="https://konvict.github.io/post/centos-printer/">
        </link>
        <updated>2021-11-23T15:15:09.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">#########################################################################
# File Name: printer-3.15.11.sh
# Author: Konvict
# mail: ll360967178@126.com
# Created Time: Tue 01 Dec 2015 11:06:49 AM CST
#########################################################################
#!/bin/bash
if [ `id -u root` -ne 0 ]
     then
          echo &quot;plz run this script as root&quot;
          exit 1
fi
yum -y -d 10 -e 1 install cups cups-devel gcc-c++ ghostscript \
     libjpeg-devel glibc-headers libtool libusb-devel make python \
     python-devel PyXML openssl-devel net-snmp-devel policycoreutils-gui \
     PyQt PyQt-devel dbus-python notify-python sane-backends sane-backends-devel \
     sane-frontends xsane python-imaging python-imaging-devel libusb-devel libusb \
     libusb1-devel dbus-devel
rpm -ev --nodeps libsane-hpaio
rpm -ev hplip-gui hplip hpijs
wget http://prdownloads.sourceforge.net/hplip/hplip-3.15.11.tar.gz
wget http://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/hplip-3.15.11-plugin.run
wget http://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/hplip-3.15.11-plugin.run.asc
tar zxvf hplip-3.15.11.tar.gz
cd hplib-3.15.11
if [ -f /bin/lsblk ]then
     yum install PyQt4 -y
else
     yum install qt3 -y
fi
echo &quot;plz select your CentOS distribution&quot;
echo &quot;CentOS 5 32bit input 1&quot;
echo &quot;CentOS 5 64bit input 2&quot;
echo &quot;CentOS 6 32bit input 3&quot;
echo &quot;CentOS 6 64bit input 4&quot;
case $ver in
     1)
          ./configure --prefix=/usr --with-hpppddir=/usr/share/cups/model/HP --enable-qt3 \
               --disable-qt4 --disable-hpcups-install --disable-cups-drv-install --disable-cups-ppd-install \
               --enable-hpijs-install --enable-foomatic-drv-install --enable-foomatic-ppd-install --enable-foomatic-rip-hplip-install \
               --disable-fax-build --disable-dbus-build --enable-network-build --enable-scan-build --disable-policykit \
               --enable-libusb01_build --enable-udev_sysfs_rules --enable-doc-build
          ;;
     2)
          ./configure --prefix=/usr --with-hpppddir=/usr/share/cups/model/HP --libdir=/usr/lib64 \
               --enable-qt3 --disable-qt4 --disable-hpcups-install --disable-cups-drv-install \
               --disable-cups-ppd-install --enable-hpijs-install --enable-foomatic-drv-install \
               --enable-foomatic-ppd-install --enable-foomatic-rip-hplip-install --disable-fax-build \
               --disable-dbus-build --enable-network-build --enable-scan-build --disable-policykit \
               --enable-libusb01_build --enable-udev_sysfs_rules --enable-doc-build
          ;;
     3)
          ./configure --with-hpppddir=/usr/share/cups/model/HP --prefix=/usr --enable-qt4 \
               --disable-libusb01_build --enable-doc-build --enable-cups-ppd-install \
               --disable-foomatic-drv-install --disable-foomatic-ppd-install --disable-hpijs-install \
               --disable-udev_sysfs_rules --disable-policykit --disable-cups-drv-install --enable-hpcups-install \
               --enable-network-build --enable-dbus-build --enable-scan-build --enable-fax-build
          ;;
     4)
          ./configure --with-hpppddir=/usr/share/cups/model/HP --libdir=/usr/lib64 --prefix=/usr \
               --enable-qt4 --disable-libusb01_build --enable-doc-build --enable-cups-ppd-install \
               --disable-foomatic-drv-install --disable-foomatic-ppd-install --disable-hpijs-install \
               --disable-udev_sysfs_rules --disable-policykit --disable-cups-drv-install --enable-hpcups-install \
               --enable-network-build --enable-dbus-build --enable-scan-build --enable-fax-build
          ;;
esac
make &amp;&amp; make install
if [ `id -u lp` -ne 4 ]
then
     /usr/sbin/usermod -a -G lp,sys $USER
fi
echo &quot;hplip has installed,plz install hp-plugin and add printer manually&quot;
echo &quot;run hp-pugin to add printer. hplip-3.15.11-plugin.run and hplip-3.15.11-plugin.run.asc is in &quot;`cd -`
exit 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpaceVIM]]></title>
        <id>https://konvict.github.io/post/spacevim/</id>
        <link href="https://konvict.github.io/post/spacevim/">
        </link>
        <updated>2021-11-23T09:23:24.000Z</updated>
        <content type="html"><![CDATA[<p>入门指南 | SpaceVim</p>
<p><strong><a href="https://spacevim.org/cn/">主页</a></strong> | <strong><a href="https://spacevim.org/cn/about/">关于我们</a></strong> | <strong><a href="https://spacevim.org/cn/quick-start-guide/">入门指南</a></strong> | <strong><a href="https://spacevim.org/cn/documentation/">使用文档</a></strong> | <strong><a href="https://spacevim.org/cn/development/">开发指南</a></strong> | <strong><a href="https://spacevim.org/cn/community/">用户社区</a></strong> | <strong><a href="https://spacevim.org/cn/sponsors/">赞助</a></strong></p>
<hr>
<h1 id="主页"><a href="https://spacevim.org/cn/quick-start-guide/../">主页</a> » 入门指南</h1>
<p>如果你从未使用过 SpaceVim，建议先阅读这篇简短的教程。这篇教程主要讲述： 如何安装 SpaceVim，SpaceVim 的入门配置以及 SpaceVim 常用学习资源。</p>
<ul>
<li><a href="#%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装指南</a>
<ul>
<li><a href="#linux-%E6%88%96-macos">Linux 或 macOS</a></li>
<li><a href="#windows">Windows</a></li>
</ul>
</li>
<li><a href="#docker-%E6%94%AF%E6%8C%81">Docker 支持</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">基本配置</a></li>
<li><a href="#%E5%9C%A8%E7%BA%BF%E6%95%99%E7%A8%8B">在线教程</a></li>
<li><a href="#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90">其他资源</a></li>
</ul>
<h2 id="安装指南">安装指南</h2>
<p>在安装 SpaceVim 之前，你需要确保电脑上已经安装了 <code>Git</code> 和 <code>cURL</code>。这两个工具用来 下载插件以及字体。</p>
<p>如果在终端中使用 Vim 或 Neovim，还需要设置终端的字体。</p>
<h3 id="linux-或-macos">Linux 或 macOS</h3>
<pre><code>curl -sLf https://spacevim.org/cn/install.sh | bash

</code></pre>
<p>安装结束后，初次打开 <code>Vim</code> 或者 <code>gVim</code> 时，SpaceVim 会<strong>自动</strong>下载并安装插件。</p>
<p>如果需要获取安装脚本的帮助信息，可以执行如下命令，包括定制安装、更新和卸载等。</p>
<pre><code>curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h

</code></pre>
<h3 id="windows">Windows</h3>
<p>Windows 下最快捷的安装方法是下载安装脚本 <a href="https://spacevim.org/cn/install.cmd">install.cmd</a> 并运行。</p>
<h2 id="docker-支持">Docker 支持</h2>
<pre><code>docker pull spacevim/spacevim
docker run -it --rm spacevim/spacevim nvim

</code></pre>
<p>也可以通过挂载的方式载入本地配置：</p>
<pre><code>docker run
  \ -it -v
  \ ~/.SpaceVim.d:/home/spacevim/.SpaceVim.d
  \ --rm
  \ spacevim/spacevim nvim

</code></pre>
<h2 id="基本配置">基本配置</h2>
<p>SpaceVim 的默认配置文件为 <code>~/.SpaceVim.d/init.toml</code>。下面为一简单的配置示例。 如果需要查阅更多 SpaceVim 配置相关的信息，请阅读 SpaceVim 用户文档。</p>
<pre><code># 这是一个基础的 SpaceVim 配置示例

# 所有的 SpaceVim 选项都列在 [options] 之下
[options]
    # 设置 SpaceVim 主题及背景，默认的主题是 gruvbox，如果你需要使用更
    # 多的主题，你可以载入 colorscheme 模块
    colorscheme = &quot;gruvbox&quot;
    # 背景可以取值 &quot;dark&quot; 或 &quot;light&quot;
    colorscheme_bg = &quot;dark&quot;
    # 启用/禁用终端真色，在目前大多数终端下都是支持真色的，当然也有
    # 一小部分终端不支持真色，如果你的 SpaceVim 颜色看上去比较怪异
    # 可以禁用终端真色，将下面的值设为 false
    enable_guicolors = true
    # 设置状态栏上分割符号形状，如果字体安装失败，可以将值设为 &quot;nil&quot; 以
    # 禁用分割符号，默认为箭头 &quot;arrow&quot;
    statusline_separator = &quot;nil&quot;
    statusline_inactive_separator = &quot;bar&quot;
    # 设置顶部标签列表序号类型，有以下五种类型，分别是 0 - 4
    # 0: 1 ➛ ➊
    # 1: 1 ➛ ➀
    # 2: 1 ➛ ⓵
    # 3: 1 ➛ ¹
    # 4: 1 ➛ 1
    buffer_index_type = 4
    # 显示/隐藏顶部标签栏上的文件类型图标，这一图标需要安装 nerd fonts，
    # 如果未能成功安装这一字体，可以隐藏图标
    enable_tabline_filetype_icon = true
    # 是否在状态栏上显示当前模式，默认情况下，不显示 Normal/Insert 等
    # 字样，只以颜色区分当前模式
    enable_statusline_mode = false

# SpaceVim 模块设置，主要包括启用/禁用模块

# 启用 autocomplete 模块，启用模块时，可以列出一些模块选项，并赋值，
# 关于模块的选项，请阅读各个模块的文档
[[layers]]
    name = &quot;autocomplete&quot;
    auto-completion-return-key-behavior = &quot;complete&quot;
    auto-completion-tab-key-behavior = &quot;cycle&quot;

# 禁用 shell 模块，禁用模块时，需要加入 enable = false
[[layers]]
    name = &quot;shell&quot;
    enable = false

# 添加自定义插件
[[custom_plugins]]
    name = &quot;lilydjwg/colorizer&quot;
    merged = false

</code></pre>
<h2 id="在线教程">在线教程</h2>
<p>以下主要为 SpaceVim 的基本使用教程，侧重于各种语言开发环境的搭建，可以理解为 SpaceVim 用户文档的精简版，主要包括以下内容：</p>
<ul>
<li><a href="https://spacevim.org/cn/quick-start-guide/../use-vim-as-ide/">使用 SpaceVim 搭建基本的开发环境</a>：涵盖一些窗口及文件的常规操作。</li>
</ul>
<p>针对不同语言，一些基础的配置及使用技巧：</p>
<ul>
<li><a href="https://spacevim.org/cn/use-vim-as-a-typescript-ide/">使用 Vim 搭建 TypeScript 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-rust-ide/">使用 Vim 搭建 Rust 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-c-cpp-ide/">使用 Vim 搭建 C/C++ 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-php-ide/">使用 Vim 搭建 PHP 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-ruby-ide/">使用 Vim 搭建 Ruby 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-perl-ide/">使用 Vim 搭建 Perl 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-coffeescript-ide/">使用 Vim 搭建 CoffeeScript 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-javascript-ide/">使用 Vim 搭建 JavaScript 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-lua-ide/">使用 Vim 搭建 Lua 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-go-ide/">使用 Vim 搭建 Go 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-python-ide/">使用 Vim 搭建 Python 开发环境</a></li>
<li><a href="https://spacevim.org/cn/use-vim-as-a-java-ide/">使用 Vim 搭建 Java 开发环境</a></li>
</ul>
<h2 id="其他资源">其他资源</h2>
<ul>
<li><a href="https://github.com/Gabirel/Hack-SpaceVim">Hack-SpaceVim</a>. Tell you how to hack SpaceVim.</li>
<li><a href="https://everettjf.gitbooks.io/spacevimtutorial/content/">SpaceVim 入门教程</a>：everettjf 所著的 SpaceVim 入门教程。</li>
</ul>
<p>网站源码位于 Github, <a href="https://github.com/SpaceVim/SpaceVim/edit/master/docs/cn/quick-start-guide.md">帮助改进本页面</a> — 网站主题: <a href="https://twitter.com/michigangraham">mattgraham</a>,</p>
<p><a href="https://gitter.im/SpaceVim/cn">Open Chat</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 分析 Nignx 日志]]></title>
        <id>https://konvict.github.io/post/python- analysis-nginx-log/</id>
        <link href="https://konvict.github.io/post/python- analysis-nginx-log/">
        </link>
        <updated>2021-11-23T09:21:09.000Z</updated>
        <content type="html"><![CDATA[<p>Nginx access日志格式如下：<br>
#使用的nginx默认日志格式<br>
$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'<br>
Nginx access 日志内容如下：<br>
182.19.31.129 - - [2013-08-13T00:00:01-07:00] &quot;GET /css/anniversary.css HTTP/1.1&quot; 304 0 &quot;http://www.chlinux.net/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36&quot; &quot;-&quot;<br>
来源： http://tool.oschina.net/highlight<br>
mysql 数据表</p>
<pre><code>CREATE TABLE nginx_log.downloads (
`IP` TINYTEXT,
`Time` TINYTEXT,
`Request` TEXT,
`Status` TINYTEXT,
`Body` SMALLINT,
`Url` text,
`Agent` TINYTEXT,
`OS` TINYTEXT,
`Browser` TINYTEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre>
<p>下面是Python 分析nginx的Python代码：</p>
<pre><code class="language-python">#!/usr/bin/env python
#coding:utf8
import os
import fileinput
import re
import sys
import MySQLdb
#日志的位置
logfile=open(&quot;access_20130812.log&quot;)
#使用的nginx默认日志格式$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'
#日志分析正则表达式
#203.208.60.230
ipP = r&quot;?P&lt;ip&gt;[\d.]*&quot;
#以[开始,除[]以外的任意字符 防止匹配上下个[]项目(也可以使用非贪婪匹配*?) 不在中括号里的.可以匹配换行外的任意字符 *这样地重复是&quot;贪婪的“ 表达式引擎会试着重复尽可能多的次数。#以]结束
#[21/Jan/2011:15:04:41 +0800]
timeP = r&quot;&quot;&quot;?P&lt;time&gt;\[[^\[\]]*\]&quot;&quot;&quot;
#以&quot;开始, #除双引号以外的任意字符 防止匹配上下个&quot;&quot;项目(也可以使用非贪婪匹配*?),#以&quot;结束
#&quot;GET /EntpShop.do?method=view&amp;shop_id=391796 HTTP/1.1&quot;
#&quot;GET /EntpShop.do?method=view&amp;shop_id=391796 HTTP/1.1&quot;
requestP = r&quot;&quot;&quot;?P&lt;request&gt;\&quot;[^\&quot;]*\&quot;&quot;&quot;&quot;
statusP = r&quot;?P&lt;status&gt;\d+&quot;
bodyBytesSentP = r&quot;?P&lt;bodyByteSent&gt;\d+&quot;
#以&quot;开始, 除双引号以外的任意字符 防止匹配上下个&quot;&quot;项目(也可以使用非贪婪匹配*?),#以&quot;结束
#&quot;http://test.myweb.com/myAction.do?method=view&amp;mod_id=&amp;id=1346&quot;
referP = r&quot;&quot;&quot;?P&lt;refer&gt;\&quot;[^\&quot;]*\&quot;&quot;&quot;&quot;
#以&quot;开始, 除双引号以外的任意字符 防止匹配上下个&quot;&quot;项目(也可以使用非贪婪匹配*?),以&quot;结束
#&quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;'
userAgentP = r&quot;&quot;&quot;?P&lt;userAgent&gt;\&quot;[^\&quot;]*\&quot;&quot;&quot;&quot;
#以(开始, 除双引号以外的任意字符 防止匹配上下个()项目(也可以使用非贪婪匹配*?),以&quot;结束
#(compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;'
userSystems = re.compile(r'\([^\(\)]*\)')
#以&quot;开始，除双引号以外的任意字符防止匹配上下个&quot;&quot;项目(也可以使用非贪婪匹配*?),以&quot;结束
userlius = re.compile(r'[^\)]*\&quot;')
#原理：主要通过空格和-来区分各不同项目，各项目内部写各自的匹配表达式
nginxLogPattern = re.compile(r&quot;(%s)\ -\ -\ (%s)\ (%s)\ (%s)\ (%s)\ (%s)\ (%s)&quot; %(ipP, timeP, requestP, statusP, bodyBytesSentP, referP, userAgentP), re.VERBOSE)
#数据库连接信息
conn=MySQLdb.connect(host='192.168.1.22',user='test',passwd='pass',port=3306,db='python')
cur=conn.cursor()
sql = &quot;INSERT INTO python.test VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;
while True:
    line = logfile.readline()
    if not line:break
    matchs = nginxLogPattern.match(line)
    if matchs != None:
        allGroup = matchs.groups()
        ip = allGroup[0]
        time = allGroup[1]
        request = allGroup[2]
        status = allGroup[3]
        bodyBytesSent = allGroup[4]
        refer = allGroup[5]
        userAgent = allGroup[6]
        Time = time.replace('T',' ')[1:-7]
        if len(userAgent) &gt; 20:
            userinfo = userAgent.split(' ')
            userkel =  userinfo[0]
            try:
                usersystem = userSystems.findall(userAgent)
                usersystem = usersystem[0]
                print usersystem
                userliu = userlius.findall(userAgent)
                value = [ip,Time,request,status,bodyBytesSent,refer,userkel,usersystem,userliu[1]]
                conn.commit()
                print value
            except IndexError:
                userinfo = userAgent
                value = [ip,Time,request,status,bodyBytesSent,refer,userinfo,&quot;&quot;,&quot;&quot;]
        else:
            useraa = userAgent
            value = [ip,Time,request,status,bodyBytesSent,refer,useraa,&quot;&quot;,&quot;&quot;]
    try:
        result = cur.execute(sql,value)
        #conn.commit()
        print result
    except MySQLdb.Error,e:
        print &quot;Mysql Error %d: %s&quot; % (e.args[0], e.args[1])
conn.commit()
conn.close()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx autoindex]]></title>
        <id>https://konvict.github.io/post/nginx-autoindex/</id>
        <link href="https://konvict.github.io/post/nginx-autoindex/">
        </link>
        <updated>2021-11-23T09:19:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="autoindex-开启或者禁用-目录列表输出功能">autoindex : 开启或者禁用 目录列表输出功能</h1>
<blockquote>
<p>语法: autoindex on | off;<br>
默认: autoindex off;<br>
环境: http, server, location</p>
</blockquote>
<h1 id="autoindex_exact_size-对于-html-输出格式指定是否准确的输出文件的大小语法">autoindex_exact_size ：对于 HTML 输出格式，指定是否准确的输出文件的大小语法:</h1>
<blockquote>
<p>autoindex_exact_size on | off;<br>
默认: autoindex_exact_size on;<br>
环境: http, server, location</p>
</blockquote>
<h1 id="autoindex_format-设置目录列表的输出格式">autoindex_format： 设置目录列表的输出格式</h1>
<blockquote>
<p>语法: autoindex_format html | xml | json | jsonp;<br>
默认: autoindex_format html;<br>
环境: http, server, location<br>
命令在 1.7.9 版本出现</p>
</blockquote>
<h1 id="autoindex_localtime对于-html-输出格式指定-目录列表中-时间是否以-本地时区显示还是-utc">autoindex_localtime：对于 HTML 输出格式，指定 目录列表中 时间是否以 本地时区显示还是 UTC</h1>
<blockquote>
<p>语法: autoindex_localtime on | off;<br>
默认: autoindex_localtime off;<br>
环境: http, server, location</p>
</blockquote>
<p>查看编译是否有 <code>–with-http_addition_module </code>  参数</p>
<p>例子</p>
<pre><code class="language-bash">server {
	listen 84;
	location / {
		root d:/workspace;
		autoindex on;
		autoindex_exact_size off;
		autoindex_localtime on;
		autoindex_format html;
	}
}
</code></pre>
<h1 id="美化">美化</h1>
<blockquote>
<p>https://github.com/fulicat/autoindex</p>
</blockquote>
<p>复制 .autoindex 到相关目录<br>
修改 nginx.conf文件</p>
<pre><code class="language-bash">server {
	listen 80;
	server_name fulicat.bz;
	root D:\websites\fulicat;
	location / {
		index index.html index.htm index.php;
	}


# autoindex for nginx
	location ~ ^(.*)/$ {
		autoindex on;
		autoindex_localtime on;
		autoindex_exact_size off;
		#add_before_body /.autoindex/header.html;
		add_after_body /.autoindex/footer.html;
	}


	location ~ \.php$ {
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql 重置密码]]></title>
        <id>https://konvict.github.io/post/mysql-reset-password/</id>
        <link href="https://konvict.github.io/post/mysql-reset-password/">
        </link>
        <updated>2021-11-23T09:18:42.000Z</updated>
        <content type="html"><![CDATA[<p>mysql默认root用户没有密码，输入<code>mysql –u root</code> 进入mysql</p>
<p><strong>1、初始化root密码</strong></p>
<p>进入mysql数据库</p>
<pre><code class="language-bash">mysql&gt;update user set password=PASSWORD(‘123456’) where user=root;
</code></pre>
<p><strong>2、允许mysql远程访问,可以使用以下三种方式:</strong></p>
<p><strong>a、改表。</strong></p>
<pre><code class="language-bash">mysql -u root –p
mysql&gt;use mysql;
mysql&gt;update user set host = '%' where user = 'root';
mysql&gt;select host, user from user;
</code></pre>
<p><strong>b、授权。</strong></p>
<p>例如，你想root使用123456从任何主机连接到mysql服务器。</p>
<pre><code class="language-bash">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
</code></pre>
<p>如果你想允许用户jack从ip为10.10.50.127的主机连接到mysql服务器，并使用654321作为密码</p>
<pre><code class="language-bash">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO 'jack'@’10.10.50.127’ IDENTIFIED BY '654321' WITH GRANT OPTION;
mysql&gt;FLUSH RIVILEGES
</code></pre>
<p><strong>c:在安装mysql的机器上运行：</strong></p>
<pre><code class="language-bash">//进入MySQL服务器
d:\mysql\bin\&gt;mysql -h localhost -u root
//赋予任何主机访问数据的权限
mysql&gt;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION
//使修改生效
mysql&gt;FLUSH PRIVILEGES
//退出MySQL服务器
mysql&gt;EXIT
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Office KMS Key]]></title>
        <id>https://konvict.github.io/post/office-kms-key/</id>
        <link href="https://konvict.github.io/post/office-kms-key/">
        </link>
        <updated>2021-11-23T09:18:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="用于-office-2019-和-office-2016-的-kms-和基于-active-directory-激活的-gvlk">用于 Office 2019 和 Office 2016 的 KMS 和基于 Active Directory 激活的 GVLK</h1>
<p>适用于：Office 2019 和 Office 2016（包括 Project 和 Visio）的批量许可版本</p>
<h2 id="office-2019-的-gvlk">Office 2019 的 GVLK</h2>
<table>
<thead>
<tr>
<th><strong>Product</strong></th>
<th><strong>GVLK</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Office 专业增强版 2019</td>
<td>NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td>
</tr>
<tr>
<td>Office 标准版 2019</td>
<td>6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td>
</tr>
<tr>
<td>Project 专业版 2019</td>
<td>B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td>
</tr>
<tr>
<td>Project 标准版 2019</td>
<td>C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td>
</tr>
<tr>
<td>Visio 专业版 2019</td>
<td>9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td>
</tr>
<tr>
<td>Visio 标准版 2019</td>
<td>7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td>
</tr>
<tr>
<td>Access 2019</td>
<td>9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT</td>
</tr>
<tr>
<td>Excel 2019</td>
<td>TMJWT-YYNMB-3BKTF-644FC-RVXBD</td>
</tr>
<tr>
<td>Outlook 2019</td>
<td>7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK</td>
</tr>
<tr>
<td>PowerPoint 2019</td>
<td>RRNCX-C64HY-W2MM7-MCH9G-TJHMQ</td>
</tr>
<tr>
<td>Publisher 2019</td>
<td>G2KWX-3NW6P-PY93R-JXK2T-C9Y9V</td>
</tr>
<tr>
<td>Skype for Business 2019</td>
<td>NCJ33-JHBBY-HTK98-MYCV8-HMKHJ</td>
</tr>
<tr>
<td>Word 2019</td>
<td>PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</td>
</tr>
</tbody>
</table>
<p>备注</p>
<p>OneNote 没有 2019 版本，但 OneNote 2016 可用于 Office 2019。 有关详细信息，请参阅 <a href="https://docs.microsoft.com/zh-cn/DeployOffice/vlactivation/../deployment-guide-onenote">OneNote 部署指南</a>。</p>
<h2 id="office-2016-的-gvlk">Office 2016 的 GVLK</h2>
<table>
<thead>
<tr>
<th><strong>Product</strong></th>
<th><strong>GVLK</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Office 专业增强版 2016</td>
<td>XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td>
</tr>
<tr>
<td>Office Standard 2016</td>
<td>JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td>
</tr>
<tr>
<td>Project Professional 2016</td>
<td>YG9NW-3K39V-2T3HJ-93F3Q-G83KT</td>
</tr>
<tr>
<td>Project Standard 2016</td>
<td>GNFHQ-F6YQM-KQDGJ-327XX-KQBVC</td>
</tr>
<tr>
<td>Visio Professional 2016</td>
<td>PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</td>
</tr>
<tr>
<td>Visio Standard 2016</td>
<td>7WHWN-4T7MP-G96JF-G33KR-W8GF4</td>
</tr>
<tr>
<td>Access 2016</td>
<td>GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW</td>
</tr>
<tr>
<td>Excel 2016</td>
<td>9C2PK-NWTVB-JMPW8-BFT28-7FTBF</td>
</tr>
<tr>
<td>OneNote 2016</td>
<td>DR92N-9HTF2-97XKM-XW2WJ-XW3J6</td>
</tr>
<tr>
<td>Outlook 2016</td>
<td>R69KK-NTPKF-7M3Q4-QYBHW-6MT9B</td>
</tr>
<tr>
<td>PowerPoint 2016</td>
<td>J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6</td>
</tr>
<tr>
<td>Publisher 2016</td>
<td>F47MM-N3XJP-TQXJ9-BP99D-8 837 K</td>
</tr>
<tr>
<td>Skype for Business 2016</td>
<td>869NQ-FJ69K-466HW-QYCP2-DDBV6</td>
</tr>
<tr>
<td>Word 2016</td>
<td>WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang Log useage]]></title>
        <id>https://konvict.github.io/post/golang-log-useage/</id>
        <link href="https://konvict.github.io/post/golang-log-useage/">
        </link>
        <updated>2021-11-23T09:17:19.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-go">var (
        Info *log.Logger
        Warning *log.Logger
        Error * log.Logger
)


func init(){
        errFile,err:=os.OpenFile(&quot;errors.log&quot;,os.O_CREATE|os.O_WRONLY|os.O_APPEND,0666)
        if err!=nil{
                log.Fatalln(&quot;打开日志文件失败：&quot;,err)
        }


        Info = log.New(os.Stdout,&quot;Info:&quot;,log.Ldate | log.Ltime | log.Lshortfile)
        Warning = log.New(os.Stdout,&quot;Warning:&quot;,log.Ldate | log.Ltime | log.Lshortfile)
        Error = log.New(io.MultiWriter(os.Stderr,errFile),&quot;Error:&quot;,log.Ldate | log.Ltime | log.Lshortfile)


}


func main() {
        Info.Println(&quot;Info_level:&quot;,&quot;info&quot;)
        Warning.Printf(&quot;Warning_level：%s\n&quot;,&quot;FBI Warning&quot;)
        Error.Println(&quot;Error&quot;)}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSHD config file ]]></title>
        <id>https://konvict.github.io/post/sshd-config-file/</id>
        <link href="https://konvict.github.io/post/sshd-config-file/">
        </link>
        <updated>2021-11-23T09:16:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ssh-服务配置文件介绍">SSH 服务配置文件介绍</h1>
<ul>
<li>
<p>位置</p>
<p>/etc/ssh/sshd_config</p>
<h1 id="主要参数">主要参数</h1>
</li>
<li>
<p>Port 22</p>
<p>监听端口</p>
</li>
<li>
<p>Protocal 2</p>
<p>协议版本</p>
</li>
<li>
<p>ListenAddress 0.0.0.0</p>
<p>设置SSHD服务器绑定的IP地址</p>
</li>
<li>
<p>HostKey /etc/ssh/ssh_host_dsa_key</p>
<p>设置服务器秘钥文件的路径</p>
</li>
<li>
<p>KeyRegenerationInterval 1h</p>
<p>设置多少秒之后系统自动生成服务器的秘钥</p>
</li>
<li>
<p>ServerKeyBits 1024</p>
<p>定义服务器秘钥长度</p>
</li>
<li>
<p>SyslogFacility AUTHPRIV</p>
<p>设定记录来自sshd消息的时候，是否给出”facility code&quot;</p>
</li>
<li>
<p>LogLevel INFO</p>
<p>定义日志级别</p>
</li>
<li>
<p>LoginGraceTime 2m</p>
<p>定义用户登录失败，在切断连接前服务器要等待的时间。</p>
</li>
<li>
<p>PermitRootLogin no</p>
<p>是否允许 root用户登录ssh</p>
</li>
<li>
<p>StrictModes yes</p>
<p>设置SSH在接受登录请求之前是否检查用户根目录rhosts文件的权限和所有权。</p>
</li>
<li>
<p>RSAAuthentication no</p>
<p>是否开启RSA秘钥验证</p>
</li>
<li>
<p>PubkeyAuthentication yes</p>
<p>是否开启秘钥认证登录</p>
</li>
<li>
<p>AuthorizedKeysFile .ssh/authorized_keys</p>
<p>设置秘钥验证文件的路径。搭配PubkeyAuthentication 使用。</p>
</li>
<li>
<p>IgnoreUserKnownHosts no</p>
<p>用来设置SS在进行RhostsRSAAuthentication 验证时，是否忽略用户 $HOME/.ssh/known_hosts文件</p>
</li>
<li>
<p>IgnoreRhost yes</p>
<p>验证时是否使用 ~/.rhosts 以及 ~/.shosts文件</p>
</li>
<li>
<p>PasswordAuthentication yes</p>
<p>是否启用密码验证</p>
</li>
<li>
<p>PermitEmptyPasswords no</p>
<p>是否允许空密码</p>
</li>
<li>
<p>ChallengeResponseAuthentication no</p>
<p>禁用s/key密码</p>
</li>
<li>
<p>UsePAM no</p>
<p>不通过PAM验证</p>
</li>
<li>
<p>X11Forwarding yes</p>
<p>是否允许X11转发</p>
</li>
<li>
<p>PrintMotd yes</p>
<p>登录时是否显示 /etc/motd 内信息</p>
</li>
<li>
<p>PrintLastLog no</p>
<p>是否显示上次登录信息</p>
</li>
<li>
<p>Compresstion yes</p>
<p>是否压缩命令</p>
</li>
<li>
<p>TCPKeepAlive yes</p>
<p>防止死链接</p>
</li>
<li>
<p>UseDNS no</p>
<p>是否使用DNS反向解析</p>
</li>
<li>
<p>MaxStartups 5</p>
<p>同时允许几个尚未登入的练级。</p>
</li>
<li>
<p>MaxAuthTries 3</p>
<p>最大失败尝试登录次数</p>
</li>
<li>
<p>AllUsers &lt;用户名 用户名&gt;</p>
<p>允许通过SSH登录的用户</p>
</li>
<li>
<p>AllGroups &lt;组名 组名&gt;</p>
<p>允许通过SSH登录的用户组</p>
</li>
<li>
<p>DenyUsers &lt;用户名 用户名&gt;</p>
<p>不允许通过SSH登录的用户</p>
</li>
<li>
<p>DenyGroups &lt;组名 组名&gt;</p>
<p>不允许通过SSH登录的用户组</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firewalld]]></title>
        <id>https://konvict.github.io/post/firewalld/</id>
        <link href="https://konvict.github.io/post/firewalld/">
        </link>
        <updated>2021-11-23T09:16:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="firewalld入门手册">FirewallD入门手册</h1>
<p>https://www.linuxprobe.com/centos-firewalld.html</p>
<p>FirewallD 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 <a href="https://www.linuxprobe.com/" title="linux">Linux</a> 发行版的仓库中都有。与直接控制 iptables 相比，使用 FirewallD 有两个主要区别：</p>
<ul>
<li>FirewallD 使用区域和服务而不是链式规则。</li>
<li>它动态管理规则集，允许更新规则而不破坏现有会话和连接。</li>
</ul>
<p>本手册将向您介绍 FirewallD 的区域和服务的概念，以及一些基本的配置步骤。</p>
<p><strong>安装与管理 FirewallD</strong></p>
<p>CentOS7 和 Fedora 20+ 已经包含了 FirewallD，但是默认没有激活。可以像其它的 systemd 单元那样控制它。</p>
<p><strong>1、 启动服务，并在系统引导时启动该服务：</strong></p>
<pre><code>sudo systemctl start firewalld
sudo systemctl enable firewalld
</code></pre>
<p>要停止并禁用：</p>
<pre><code>sudo systemctl stop firewalld
sudo systemctl disable firewalld
</code></pre>
<p><strong>2、 检查防火墙状态。输出应该是 running或者 not running。</strong></p>
<pre><code>sudo firewall-cmd --state
</code></pre>
<p><strong>3、 要查看 FirewallD 守护进程的状态：</strong></p>
<pre><code>sudo systemctl status firewalld
</code></pre>
<p>示例输出</p>
<pre><code>firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled)
   Active: active (running) since Wed 2015-09-02 18:03:22 UTC; 1min 12s ago
 Main PID: 11954 (firewalld)
   CGroup: /system.slice/firewalld.service
   └─11954 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid
</code></pre>
<p><strong>4、 重新加载 FirewallD 配置：</strong></p>
<pre><code>sudo firewall-cmd --reload
</code></pre>
<p><strong>配置 FirewallD</strong></p>
<p>FirewallD 使用 XML 进行配置。除非是非常特殊的配置，你不必处理它们，而应该使用 firewall-cmd</p>
<p>配置文件位于两个目录中：<br>
/usr/lib/FirewallD下保存默认配置，如默认区域和公用服务。避免修改它们，因为每次 firewall 软件包更新时都会覆盖这些文件。<br>
/etc/firewalld 下保存系统配置文件。 这些文件将覆盖默认配置。</p>
<p><strong>配置集</strong></p>
<p>FirewallD 使用两个配置集：“运行时”和“持久”。 在系统重新启动或重新启动 FirewallD 时，不会保留运行时的配置更改，而对持久配置集的更改不会应用于正在运行的系统。</p>
<p>默认情况下，firewall-cmd 命令适用于运行时配置，但使用 --permanent 标志将保存到持久配置中。要添加和激活持久性规则，你可以使用两种方法之一。</p>
<p><strong>1、 将规则同时添加到持久规则集和运行时规则集中。</strong></p>
<pre><code>sudo firewall-cmd --zone=public --add-service=http --permanent
sudo firewall-cmd --zone=public --add-service=http
</code></pre>
<p><strong>2、 将规则添加到持久规则集中并重新加载 FirewallD。</strong></p>
<pre><code>sudo firewall-cmd --zone=public --add-service=http --permanent
sudo firewall-cmd --reload
</code></pre>
<p>reload 命令会删除所有运行时配置并应用永久配置。因为 firewalld 动态管理规则集，所以它不会破坏现有的连接和会话。</p>
<p><strong>防火墙的区域</strong></p>
<p>“区域”是针对给定位置或场景（例如家庭、公共、受信任等）可能具有的各种信任级别的预构建规则集。不同的区域允许不同的网络服务和入站流量类型，而拒绝其他任何流量。 首次启用 FirewallD 后，public 将是默认区域。</p>
<p>区域也可以用于不同的网络接口。例如，要分离内部网络和互联网的接口，你可以在 internal 区域上允许 DHCP，但在 external区域仅允许 HTTP 和 SSH。未明确设置为特定区域的任何接口将添加到默认区域。</p>
<p>要找到默认区域：</p>
<pre><code>sudo firewall-cmd --get-default-zone
</code></pre>
<p>要修改默认区域：</p>
<pre><code>sudo firewall-cmd --set-default-zone=internal
</code></pre>
<p>要查看你网络接口使用的区域：</p>
<pre><code>sudo firewall-cmd --get-active-zones
</code></pre>
<p>示例输出：</p>
<pre><code>public
  interfaces: eth0
</code></pre>
<p>要得到特定区域的所有配置：</p>
<pre><code>sudo firewall-cmd --zone=public --list-all
</code></pre>
<p>示例输出：</p>
<pre><code>public (default, active)
  interfaces: ens160
  sources:
  services: dhcpv6-client http ssh
  ports: 12345/tcp
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:
</code></pre>
<p>要得到所有区域的配置：</p>
<pre><code>sudo firewall-cmd --list-all-zones
</code></pre>
<p>示例输出：</p>
<pre><code>block
  interfaces:
  sources:
  services:
  ports:
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:
  ...
work
  interfaces:
  sources:
  services: dhcpv6-client ipp-client ssh
  ports:
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:
</code></pre>
<p><strong>与服务一起使用</strong></p>
<p>FirewallD 可以根据特定网络服务的预定义规则来允许相关流量。你可以创建自己的自定义系统规则，并将它们添加到任何区域。 默认支持的服务的配置文件位于 /usr/lib /firewalld/services，用户创建的服务文件在 /etc/firewalld/services 中。</p>
<p>要查看默认的可用服务：</p>
<pre><code>sudo firewall-cmd --get-services
</code></pre>
<p>比如，要启用或禁用 HTTP 服务：</p>
<pre><code>sudo firewall-cmd --zone=public --add-service=http --permanent
sudo firewall-cmd --zone=public --remove-service=http --permanent
</code></pre>
<p><strong>允许或者拒绝任意端口/协议</strong></p>
<p>比如：允许或者禁用 12345 端口的 TCP 流量。</p>
<pre><code>sudo firewall-cmd --zone=public --add-port=12345/tcp --permanent
sudo firewall-cmd --zone=public --remove-port=12345/tcp --permanent
</code></pre>
<p><strong>端口转发</strong></p>
<p>下面是在同一台服务器上将 80 端口的流量转发到 12345 端口。</p>
<pre><code>sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=12345
</code></pre>
<p>要将端口转发到另外一台服务器上：</p>
<p><strong>1、 在需要的区域中激活 masquerade。</strong></p>
<pre><code>sudo firewall-cmd --zone=public --add-masquerade
</code></pre>
<p><strong>2、 添加转发规则。例子中是将 IP 地址为 ：123.456.78.9 的远程服务器上 80 端口的流量转发到 8080 上。</strong></p>
<pre><code>sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=123.456.78.9
</code></pre>
<p>要删除规则，用 --remove替换 --add。比如：</p>
<pre><code>sudo firewall-cmd --zone=public --remove-masquerade
</code></pre>
<p><strong>用 FirewallD 构建规则集</strong></p>
<p>例如，以下是如何使用 FirewallD 为你的服务器配置基本规则（如果您正在运行 web 服务器）。</p>
<p><strong>1、将 eth0的默认区域设置为 dmz。 在所提供的默认区域中，dmz（非军事区）是最适合于这个程序的，因为它只允许 SSH 和 ICMP。</strong></p>
<pre><code>sudo firewall-cmd --set-default-zone=dmz
sudo firewall-cmd --zone=dmz --add-interface=eth0
</code></pre>
<p><strong>2、把 HTTP 和 HTTPS 添加永久的服务规则到 dmz 区域中：</strong></p>
<pre><code>sudo firewall-cmd --zone=dmz --add-service=http --permanent
sudo firewall-cmd --zone=dmz --add-service=https --permanent
</code></pre>
<p><strong>3、 重新加载 FirewallD 让规则立即生效：</strong></p>
<pre><code>sudo firewall-cmd --reload
</code></pre>
<p>如果你运行 firewall-cmd --zone=dmz --list-all， 会有下面的输出：</p>
<pre><code>dmz (default)
  interfaces: eth0
  sources:
  services: http https ssh
  ports:
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:
</code></pre>
<p>这告诉我们， dmz区域是我们的默认区域，它被用于 eth0 接口中所有网络的源地址和端口。 允许传入 HTTP（端口 80）、HTTPS（端口 443）和 SSH（端口 22）的流量，并且由于没有 IP 版本控制的限制，这些适用于 IPv4 和 IPv6。 不允许IP 伪装以及端口转发。 我们没有 ICMP 块，所以 ICMP 流量是完全允许的。没有丰富Rich规则，允许所有出站流量。</p>
<p><strong>高级配置</strong></p>
<p>服务和端口适用于基本配置，但对于高级情景可能会限制较多。 丰富Rich规则和直接Direct接口允许你为任何端口、协议、地址和操作向任何区域 添加完全自定义的防火墙规则。</p>
<p><strong>丰富规则</strong></p>
<p>丰富规则的语法有很多，但都完整地记录在 firewalld.richlanguage(5) 的手册页中（或在终端中 man firewalld.richlanguage。)使用 --add-rich-rule、 --list-rich-rules、 --remove-rich-rule。 和 firewall-cmd命令来管理它们。</p>
<p>这里有一些常见的例子：</p>
<p>允许来自主机 192.168.0.14 的所有 IPv4 流量。</p>
<pre><code>sudo firewall-cmd --zone=public --add-rich-rule 'rule family=&quot;ipv4&quot; source address=192.168.0.14 accept'
</code></pre>
<p>拒绝来自主机 192.168.1.10 到 22 端口的 IPv4 的 TCP 流量。</p>
<pre><code>sudo firewall-cmd --zone=public --add-rich-rule 'rule family=&quot;ipv4&quot; source address=&quot;192.168.1.10&quot; port port=22 protocol=tcp reject'
</code></pre>
<p>允许来自主机 10.1.0.3 到 80 端口的 IPv4 的 TCP 流量，并将流量转发到 6532 端口上。</p>
<pre><code>sudo firewall-cmd --zone=public --add-rich-rule 'rule family=ipv4 source address=10.1.0.3 forward-port port=80 protocol=tcp to-port=6532'
</code></pre>
<p>将主机 172.31.4.2 上 80 端口的 IPv4 流量转发到 8080 端口（需要在区域上激活 masquerade）。</p>
<pre><code>sudo firewall-cmd --zone=public --add-rich-rule 'rule family=ipv4 forward-port port=80 protocol=tcp to-port=8080 to-addr=172.31.4.2'
</code></pre>
<p>列出你目前的丰富规则：</p>
<pre><code>sudo firewall-cmd --list-rich-rules
</code></pre>
<p><strong>iptables 的直接接口</strong></p>
<p>对于最高级的使用，或对于 iptables 专家，FirewallD 提供了一个直接Direct接口，允许你给它传递原始 iptables 命令。 直接接口规则不是持久的，除非使用 --permanent。</p>
<p>要查看添加到 FirewallD 的所有自定义链或规则：</p>
<pre><code>firewall-cmd --direct --get-all-chains
firewall-cmd --direct --get-all-rules
</code></pre>
<h2 id="基础课程目录">基础课程目录</h2>
<p><a href="https://www.linuxprobe.com/chapter-00.html" title="第0章 咱们先来谈谈学习方法和红帽系统。">第0章 咱们先来谈谈学习方法和红帽系统。</a><br>
<a href="https://www.linuxprobe.com/chapter-01.html" title="第1章 部署虚拟环境安装linux系统。">第1章 部署虚拟环境安装linux系统。</a><br>
<a href="https://www.linuxprobe.com/chapter-02.html" title="第2章 新手必须掌握的Linux命令。">第2章 新手必须掌握的Linux命令。</a><br>
<a href="https://www.linuxprobe.com/chapter-03.html" title="第3章 管道符、重定向与环境变量。">第3章 管道符、重定向与环境变量。</a><br>
<a href="https://www.linuxprobe.com/chapter-04.html" title="第4章 Vim编辑器与Shell命令脚本。">第4章 Vim编辑器与Shell命令脚本。</a><br>
<a href="https://www.linuxprobe.com/chapter-05.html" title="第5章 用户身份与文件权限。">第5章 用户身份与文件权限。</a><br>
<a href="https://www.linuxprobe.com/chapter-06.html" title="第6章 存储结构与磁盘划分。">第6章 存储结构与磁盘划分。</a><br>
<a href="https://www.linuxprobe.com/chapter-07.html" title="第7章 使用RAID与LVM磁盘阵列技术。">第7章 使用RAID与LVM磁盘阵列技术。</a><br>
<a href="https://www.linuxprobe.com/chapter-08.html" title="第8章 Iptables与Firewalld防火墙。">第8章 Iptables与Firewalld防火墙。</a><br>
<a href="https://www.linuxprobe.com/chapter-09.html" title="第9章 使用ssh服务管理远程主机。">第9章 使用ssh服务管理远程主机。</a><br>
<a href="https://www.linuxprobe.com/chapter-10.html" title="第10章 使用Apache服务部署静态网站。">第10章 使用Apache服务部署静态网站。</a><br>
<a href="https://www.linuxprobe.com/chapter-11.html" title="第11章 使用Vsftpd服务传输文件。">第11章 使用Vsftpd服务传输文件。</a><br>
<a href="https://www.linuxprobe.com/chapter-12.html" title="第12章 使用Samba或NFS实现文件共享。">第12章 使用Samba或NFS实现文件共享。</a><br>
<a href="https://www.linuxprobe.com/chapter-13.html" title="第13章 使用Bind提供域名解析服务。">第13章 使用Bind提供域名解析服务。</a><br>
<a href="https://www.linuxprobe.com/chapter-14.html" title="第14章 使用DHCP动态管理主机地址。">第14章 使用DHCP动态管理主机地址。</a><br>
<a href="https://www.linuxprobe.com/chapter-15.html" title="第15章 使用Postfix与Dovecot部署邮件系统。">第15章 使用Postfix与Dovecot部署邮件系统。</a><br>
<a href="https://www.linuxprobe.com/chapter-16.html" title="第16章 使用Squid部署代理缓存服务。">第16章 使用Squid部署代理缓存服务。</a><br>
<a href="https://www.linuxprobe.com/chapter-17.html" title="第17章 使用iSCSI服务部署网络存储。">第17章 使用iSCSI服务部署网络存储。</a><br>
<a href="https://www.linuxprobe.com/chapter-18.html" title="第18章 使用MariaDB数据库管理系统。">第18章 使用MariaDB数据库管理系统。</a><br>
<a href="https://www.linuxprobe.com/chapter-19.html" title="第19章 使用PXE+Kickstart无人值守安装服务。">第19章 使用PXE+Kickstart无人值守安装服务。</a><br>
<a href="https://www.linuxprobe.com/chapter-20.html" title="第20章 使用LNMP架构部署动态网站环境。">第20章 使用LNMP架构部署动态网站环境。</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install Erlang on CentOS 7]]></title>
        <id>https://konvict.github.io/post/install-erlang-on-centos-7/</id>
        <link href="https://konvict.github.io/post/install-erlang-on-centos-7/">
        </link>
        <updated>2021-11-23T08:29:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="centos-安装-erlang">CentOS 安装 Erlang</h1>
<p>https://ken.io/note/centos7-erlang-install</p>
<h2 id="目录">目录</h2>
<ol>
<li><a href="#%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93">软件仓库</a></li>
<li><a href="#kerl">kerl</a></li>
<li><a href="#%E7%BC%96%E8%AF%91%E6%BA%90%E4%BB%A3%E7%A0%81">编译源代码</a></li>
</ol>
<h2 id="a-id软件仓库a软件仓库"><a id="软件仓库"></a>软件仓库</h2>
<p>从 CentOS 软件仓库安装 Erlang 是最简单、最省事的。</p>
<p>不过 CentOS 默认仓库中没有 Erlang，需要我们预先安装 <a href="https://fedoraproject.org/wiki/EPEL">Extra Packages for Enterprise Linux 项目</a>。</p>
<ol>
<li>
<p>安装 <code>epel-release</code></p>
<pre><code class="language-bash">$ sudo yum install epel-release -y

</code></pre>
</li>
<li>
<p>之后便可以安装 Erlang</p>
<pre><code class="language-bash">$ yum install erlang -y

</code></pre>
</li>
</ol>
<p>安装完成后，在命令行下输入 <code>erl</code>：</p>
<pre><code class="language-bash">$ erl
Erlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V5.10.4  (abort with ^G)

</code></pre>
<p>就可以查看当前安装的 Erlang 版本 - 显然，版本还比较老旧。</p>
<p>如果你嫌弃 CentOS 软件仓库中的 Erlang 版本过低，我们还可以尝试 Unix/Linux 均可使用的 <a href="https://github.com/kerl/kerl">kerl</a>，又或自己下载源码编译。</p>
<h2 id="a-idkerlakerl"><a id="kerl"></a>kerl</h2>
<p>首先请确保你的操作系统上已经安装 <code>curl</code> 与 <code>git</code>。</p>
<p>下载 <code>kerl</code>：</p>
<pre><code class="language-bash">$ curl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl

</code></pre>
<p>然后将 <code>kerl</code> 改成可执行：</p>
<pre><code class="language-bash">$ chmod a+x kerl

</code></pre>
<p>执行 <code>kerl list releases</code> 可以查看 Erlang 所有发行版本：</p>
<pre><code class="language-bash">$ ./kerl list releases
./kerl list releases
R10B-0 R10B-10 R10B-1a R10B-2 R10B-3 R10B-4 R10B-5 R10B-6 R10B-7 R10B-8 R10B-9 R11B-0 R11B-1 R11B-2 R11B-3 R11B-4 R11B-5 R12B-0 R12B-1 R12B-2 R12B-3 R12B-4 R12B-5 R13A R13B01 R13B02-1 R13B02 R13B03 R13B04 R13B R14A R14B01 R14B02 R14B03 R14B04 R14B R14B_erts-5.8.1.1 R15B01 R15B02 R15B02_with_MSVCR100_installer_fix R15B03-1 R15B03 R15B R16A_RELEASE_CANDIDATE R16B01 R16B02 R16B03-1 R16B03 R16B 17.0-rc1 17.0-rc2 17.0 17.1 17.3 17.4 17.5 18.0 18.1 18.2 18.2.1 18.3 19.0 19.1 19.2 19.3 20.0 20.1 20.2
Run './kerl update releases' to update this list from erlang.org

</code></pre>
<p>有了，最新版本是 20.2，尝试安装：</p>
<pre><code class="language-bash">$ ./kerl install 20.2

</code></pre>
<blockquote>
<p>No build named 20.2</p>
</blockquote>
<p>很遗憾，报错。出人意料的是，使用 kerl 安装 Erlang 前，我们需要先编译 Erlang，命令结构是 <code>kerl build &lt;release&gt; &lt;build_name&gt;</code>：</p>
<pre><code class="language-bash">$ ./kerl build 20.2 20.2

</code></pre>
<p>很快你就发现该命令报告大量错误。</p>
<p>这里又是一个意外：kerl 不负责安装<a href="https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md#required-utilities">编译 Erlang 必需的依赖</a>，需要我们自己安装：</p>
<pre><code class="language-bash">$ sudo yum install -y which perl openssl-devel make automake autoconf ncurses-devel gcc

</code></pre>
<p>安装完编译所需依赖后，重新执行 <code>kerl build</code>：</p>
<pre><code class="language-bash">$ ./kerl build 20.2 20.2

</code></pre>
<p>待构建成功后，将新构建出的 20.2 安装到指定目录：</p>
<pre><code class="language-bash">$ ./kerl install 20.2 ~/erlang
Installing Erlang/OTP 20.2 (20.2) in /home/sam/erlang...
You can activate this installation running the following command:
. /home/sam/erlang/activate
Later on, you can leave the installation typing:
kerl_deactivate

</code></pre>
<p>请注意<strong>提示</strong>，我们还需要执行 <code>. /home/sam/erlang/activate</code> 激活 Erlang。</p>
<p>你可能会说，看起来 kerl 没比自己编译源代码简单。从定位上说，kerl 更像 Ruby 的 RVM、rbenv 或是 Node.js 的 nvm，能够管理多个 Erlang 版本 - 而自己编译源码的话，就没这么方便。</p>
<h2 id="a-id编译源代码a编译源代码"><a id="编译源代码"></a>编译源代码</h2>
<p>如果你决定要<a href="https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md#required-utilities">自行编译 Erlang 源代码</a>，那么请按以下步骤操作。</p>
<ol>
<li>
<p>安装构建依赖：</p>
<pre><code class="language-bash">$ sudo yum install -y which wget perl openssl-devel make automake autoconf ncurses-devel gcc

</code></pre>
</li>
<li>
<p>从 <a href="http://www.erlang.org/downloads">Erlang 官网</a>下载源代码</p>
<pre><code class="language-bash">$ curl -O http://erlang.org/download/otp_src_20.2.tar.gz

</code></pre>
</li>
<li>
<p>解压 tar.gz 包</p>
<pre><code class="language-bash">$ tar zxvf otp_src_20.2.tar.gz

</code></pre>
</li>
<li>
<p>安装</p>
<pre><code class="language-bash">$ cd otp_src_20.2
$ ./otp_build autoconf
$ ./configure &amp;&amp; make &amp;&amp; sudo make install

</code></pre>
</li>
<li>
<p>验证</p>
<pre><code class="language-bash">$ erl

</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install Redmine on CentOS7]]></title>
        <id>https://konvict.github.io/post/install-redmine-on-centos7/</id>
        <link href="https://konvict.github.io/post/install-redmine-on-centos7/">
        </link>
        <updated>2021-11-23T08:28:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="centos-7安装redmine">CentOS 7安装Redmine</h1>
<p>https://blog.csdn.net/h1101723183/article/details/80954587</p>
<hr>
<h2 id="a-idt0aa-idt0a环境"><a id="t0"></a><a id="t0"></a>环境</h2>
<ol>
<li>CentOS 7</li>
<li>MariaDB</li>
<li>Ruby 2.4.2</li>
<li>Redmine 3.4.3</li>
<li>Puma</li>
</ol>
<h2 id="a-idt1aa-idt1a连接服务器"><a id="t1"></a><a id="t1"></a>连接服务器</h2>
<ol>
<li>
<p>连接服务器</p>
<pre><code>ssh root@192.168.31.1331
</code></pre>
</li>
</ol>
<h2 id="a-idt2aa-idt2a启动mariadb"><a id="t2"></a><a id="t2"></a>启动MariaDB</h2>
<ol>
<li>
<p>首先启动MariaDB</p>
<pre><code>systemctl start mariadb1
</code></pre>
</li>
<li>
<p>查看MariaDB的状态</p>
<pre><code>systemctl status mariadb1
</code></pre>
</li>
<li>
<p>设置开机启动</p>
<pre><code>systemctl enable mariadb1
</code></pre>
</li>
<li>
<p>登陆mysql，默认密码为空，直接回车进入</p>
<pre><code>mysql -u root -p 1
</code></pre>
</li>
<li>
<p>创建redmine数据库</p>
<pre><code>CREATE DATABASE redmine CHARACTER SET utf8;
CREATE USER 'redmine'@'localhost' IDENTIFIED BY 'redmine';
GRANT ALL PRIVILEGES ON redmine.* TO 'redmine'@'localhost';123
</code></pre>
</li>
</ol>
<h2 id="a-idt3aa-idt3a安装ruby"><a id="t3"></a><a id="t3"></a>安装Ruby</h2>
<ol>
<li>
<p>安装开发工具</p>
<pre><code>yum groupinstall &quot;Development tools&quot;
yum -y install zlib-devel curl-devel openssl-devel mysql-devel12
</code></pre>
</li>
<li>
<p>下载ruby-2.4.2</p>
<pre><code>wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.2.tar.gz1
</code></pre>
</li>
<li>
<p>编译安装ruby</p>
<pre><code>tar -zxvf ruby-2.4.2.tar.gz
cd ruby-2.4.2/
sudo ./configure 
sudo make
sudo make install12345
</code></pre>
</li>
<li>
<p>配置gem源</p>
<pre><code>gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
gem sources -l12
</code></pre>
</li>
</ol>
<h2 id="a-idt4aa-idt4a安装redmine"><a id="t4"></a><a id="t4"></a>安装Redmine</h2>
<ol>
<li>
<p>参考</p>
<blockquote>
<p><a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall">http://www.redmine.org/projects/redmine/wiki/RedmineInstall</a></p>
</blockquote>
</li>
<li>
<p>下载Redmine</p>
<pre><code>cd ~
wget http://www.redmine.org/releases/redmine-3.4.3.tar.gz12
</code></pre>
</li>
<li>
<p>解压redmine包</p>
<pre><code>tar -zxvf redmine-3.4.3.tar.gz1
</code></pre>
</li>
<li>
<p>将redmine移动到/var目录下</p>
<pre><code>mv redmine-3.4.3 /var/redmine1
</code></pre>
</li>
<li>
<p>拷贝 config/database.yml.example 为 config/database.yml</p>
<pre><code>cd /var/redmine/config/ 
cp database.yml.example database.yml12
</code></pre>
</li>
<li>
<p>编辑数据库配置文件</p>
<pre><code>vi database.yml1
</code></pre>
<ol>
<li>配置数据库</li>
</ol>
<pre><code>production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: redmine
  password: &quot;redmine&quot;
  encoding: utf81234567
</code></pre>
</li>
<li>
<p>安装bundle</p>
<pre><code>cd /var/redmine
gem install bundler12
</code></pre>
</li>
<li>
<p>配置bundler源</p>
<pre><code>bundle config mirror.https://rubygems.org https://gems.ruby-china.org1
</code></pre>
</li>
<li>
<p>安装redmine依赖</p>
<pre><code>bundle install --without development test rmagick1
</code></pre>
</li>
<li>
<p>初始化数据库</p>
<pre><code>
# 生成秘钥

bundle exec rake generate_secret_token


# 初始化数据库

RAILS_ENV=production bundle exec rake db:migrate123456789
</code></pre>
</li>
<li>
<p>用以下命令配置为中文，输入zh</p>
<pre><code>RAILS_ENV=production bundle exec rake redmine:load_default_data1
</code></pre>
</li>
<li>
<p>设置权限</p>
<pre><code>
# 创建目录

mkdir -p tmp tmp/pdf public/plugin_assets


# 设置权限

sudo chmod -R 755 files log tmp public/plugin_assets123456789
</code></pre>
</li>
<li>
<p>测试运行redmine</p>
<pre><code>bundle exec rails server webrick -e production


# e.g，我的主机是192.168.31.133，用以下命令绑定80端口

bundle exec rails server webrick -e production -p 80 -b 192.168.31.133123456
</code></pre>
</li>
</ol>
<h2 id="a-idt5aa-idt5a使用puma运行redmine"><a id="t5"></a><a id="t5"></a>使用puma运行redmine</h2>
<ol>
<li>
<p>Puma参考</p>
<blockquote>
<p><a href="https://github.com/puma/puma">https://github.com/puma/puma</a></p>
</blockquote>
</li>
<li>
<p>添加gem puma到Gemfile</p>
<pre><code>cd /var/redmine/
vi Gemfile12
</code></pre>
<ol>
<li>添加puma</li>
</ol>
<pre><code>gem &quot;puma&quot;1
</code></pre>
</li>
<li>
<p>重新运行安装依赖</p>
<pre><code>bundle install --without development test rmagick1
</code></pre>
</li>
<li>
<p>配置puma.rb</p>
<pre><code>vi config/puma.rb1
</code></pre>
<ol>
<li>puma.rb</li>
</ol>
<pre><code>
#!/usr/bin/env puma



# The directory to operate out of.

#

# The default is the current directory.

#
directory '/var/redmine'


# Set the environment in which the rack's app will run. The value must be a string.

#

# The default is &quot;development&quot;.

#
environment 'production'


# Daemonize the server into the background. Highly suggest that


# this be combined with &quot;pidfile&quot; and &quot;stdout_redirect&quot;.

#

# The default is &quot;false&quot;.

#

# daemonize

daemonize true


# Store the pid of the server in the file at &quot;path&quot;.

#
pidfile '/var/redmine/tmp/pids/puma.pid'


# Use &quot;path&quot; as the file to store the server info state. This is


# used by &quot;pumactl&quot; to query and control the server.

#
state_path '/var/redmine/tmp/pids/puma.state'


# Redirect STDOUT and STDERR to files specified. The 3rd parameter


# (&quot;append&quot;) specifies whether the output is appended, the default is


# &quot;false&quot;.

#
stdout_redirect '/var/redmine/log/stdout.log', '/var/redmine/log/stderr.log'

# stdout_redirect '/u/apps/lolcat/log/stdout', '/u/apps/lolcat/log/stderr', true



# Configure &quot;min&quot; to be the minimum number of threads to use to answer


# requests and &quot;max&quot; the maximum.

#

# The default is &quot;0, 16&quot;.

#
threads 2, 32


# Bind the server to &quot;url&quot;. &quot;tcp://&quot;, &quot;unix://&quot; and &quot;ssl://&quot; are the only


# accepted protocols.

#

# The default is &quot;tcp://0.0.0.0:9292&quot;.

#

# bind 'tcp://0.0.0.0:9292'


# bind 'unix:///var/run/puma.sock'


# bind 'unix:///var/run/puma.sock?umask=0111'


# bind 'ssl://127.0.0.1:9292?key=path_to_key&amp;cert=path_to_cert'


# 绑定80端口

bind 'tcp://0.0.0.0:80'


# How many worker processes to run.  Typically this is set to


# to the number of available cores.

#

# The default is &quot;0&quot;.

#
workers 3


# Preload the application before starting the workers; this conflicts with


# phased restart feature. (off by default)

preload_app!


# Verifies that all workers have checked in to the master process within


# the given timeout. If not the worker process will be restarted. This is


# not a request timeout, it is to protect against a hung or dead process.


# Setting this value will not protect against slow requests.


# Default value is 60 seconds.

#
worker_timeout 60123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149
</code></pre>
</li>
<li>
<p>运行</p>
<pre><code>cd /var/redmine


# 运行

bundle exec puma -C config/puma.rb


# 停止

bundle exec pumactl --state tmp/pids/puma.state stop


# 重启

bundle exec pumactl --state tmp/pids/puma.state restart12345678910111213141516
</code></pre>
</li>
</ol>
<h2 id="a-idt6aa-idt6a测试"><a id="t6"></a><a id="t6"></a>测试</h2>
<ol>
<li>
<p>访问<a href="http://192.168.31.133/">http://192.168.31.133/</a></p>
<img width="922" height="617" src=":/603800b94ead4526af63fb2beddfa1ca"/>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gitlab Installation on CentOS7]]></title>
        <id>https://konvict.github.io/post/gitlab-installation-on-centos7/</id>
        <link href="https://konvict.github.io/post/gitlab-installation-on-centos7/">
        </link>
        <updated>2021-11-23T08:25:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="centos-7-安装-gitlab">CentOS 7 安装 Gitlab</h1>
<h2 id="安装基本系统与依赖包">安装基本系统与依赖包</h2>
<h3 id="安装-gitlab-依赖的工具">安装 Gitlab 依赖的工具</h3>
<pre><code>yum -y update
yum -y groupinstall 'Development Tools'
yum -y install readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui git redis ruby sudo wget crontabs logwatch logrotate perl-Time-HiRes

</code></pre>
<h3 id="安装-redis">安装 Redis</h3>
<p>访问 <a href="http://www.redis.io/download"></a><a href="http://www.redis.io/download">http://www.redis.io/download</a>，下载 <strong>Redis</strong> 源代码。</p>
<pre><code>wget http://download.redis.io/releases/redis-3.0.0.tar.gz
tar zxvf redis-3.0.0.tar.gz
cd redis-3.0.0
make

</code></pre>
<p>若在编译过程中出错，则可以执行下面的命令：</p>
<pre><code>sudo make test
</code></pre>
<h4 id="安装">安装：</h4>
<pre><code>sudo make install
sudo ./utils/install_server.sh

</code></pre>
<h4 id="配置">配置</h4>
<p>创建 <code>/etc/init.d/redis</code> 并使用下面的代码作为启动脚本。</p>
<p>添加如下内容：</p>
<pre><code class="language-bash">###########################
PATH=/usr/local/bin:/sbin:/usr/bin:/bin

REDISPORT=6379
EXEC=/usr/local/bin/redis-server
REDIS_CLI=/usr/local/bin/redis-cli

PIDFILE=/var/run/redis.pid
CONF=&quot;/etc/redis/6379.conf&quot;

case &quot;$1&quot; in
    start)
        if [ -f $PIDFILE ]
        then
                echo &quot;$PIDFILE exists, process is already running or crashed&quot;
        else
                echo &quot;Starting Redis server...&quot;
                $EXEC $CONF
        fi
        if [ &quot;$?&quot;=&quot;0&quot; ]
        then
              echo &quot;Redis is running...&quot;
        fi
        ;;
    stop)
        if [ ! -f $PIDFILE ]
        then
                echo &quot;$PIDFILE does not exist, process is not running&quot;
        else
                PID=$(cat $PIDFILE)
                echo &quot;Stopping ...&quot;
                $REDIS_CLI -p $REDISPORT SHUTDOWN
                while [ -x ${PIDFILE} ]
               do
                    echo &quot;Waiting for Redis to shutdown ...&quot;
                    sleep 1
                done
                echo &quot;Redis stopped&quot;
        fi
        ;;
   restart|force-reload)
        ${0} stop
        ${0} start
        ;;
  *)
    echo &quot;Usage: /etc/init.d/redis {start|stop|restart|force-reload}&quot; &gt;&amp;2
        exit 1
esac
##############################

</code></pre>
<p>保存后，添加可执行权限：</p>
<pre><code>sudo chmod +x /etc/init.d/redis

</code></pre>
<p>确保 <code>redis</code> 能随系统启动：</p>
<pre><code>vi /etc/rc.d/rc.local

</code></pre>
<p>在文件末尾添加下面这行：</p>
<pre><code>service redis start

</code></pre>
<p>然后使用上面同样的命令启动 <code>redis</code> 服务：</p>
<pre><code>service redis start

</code></pre>
<h3 id="安装邮件服务器">安装邮件服务器</h3>
<pre><code>yum -y install postfix

</code></pre>
<h3 id="安装git">安装Git</h3>
<p>先删除系统中原有的老版本 <code>git</code>：</p>
<pre><code>yum -y remove git
yum install zlib-devel perl-CPAN gettext curl-devel expat-devel gettext-devel openssl-devel

</code></pre>
<p>从官方网站下载源代码进行：</p>
<pre><code>curl --progress https://www.kernel.org/pub/software/scm/git/git-2.4.0.tar.gz | tar xz
cd git-2.4.0/
./configure
make
make prefix=/usr/local install

</code></pre>
<p>然后使用下面这个命令检测安装是否有效：</p>
<pre><code>which git

</code></pre>
<h2 id="安装-ruby">安装 ruby</h2>
<p>如果 ruby 的版本低于 <code>2.0</code> 的话，则需要重新安装 <code>ruby</code>。</p>
<pre><code>cd ~
curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.2/ruby-2.2.2.tar.gz | tar xz
cd ruby-2.2.2
./configure --disable-install-rdoc
make
make prefix=/usr/local install

</code></pre>
<h2 id="为-gitlab-添加系统用户">为 Gitlab 添加系统用户</h2>
<pre><code>adduser --system --shell /bin/bash --comment 'GitLab' --create-home --home-dir /home/git/ git

</code></pre>
<p>为了包含/usr/local/bin到git用户的$PATH，一个方法是编辑超级用户文件。以管理员身份运行：</p>
<pre><code>visudo

</code></pre>
<p>然后搜索：</p>
<pre><code>Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin

</code></pre>
<p>将其改成：</p>
<pre><code>Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

</code></pre>
<h2 id="安装数据库">安装数据库</h2>
<p>MySQL 已经不再包含在 CentOS 7 的源中，而改用了 MariaDB，先搜索 <code>MariaDB</code> 现有的包：</p>
<pre><code>rpm -qa | grep mariadb

</code></pre>
<p>然后全部删除：</p>
<pre><code>rpm -e --nodeps mariadb-*

</code></pre>
<p>然后创建 <code>/etc/yum.repos.d/MariaDB.repo</code>：</p>
<pre><code>vi /etc/yum.repos.d/MariaDB.repo

</code></pre>
<p>将以下内容添加至该文件中：</p>
<pre><code># MariaDB 10.0 CentOS repository list - created 2015-05-04 19:16 UTC
# http://mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1

</code></pre>
<p>然后运行下面命令安装 <code>MariaDB 10.0</code>：</p>
<pre><code>sudo yum install MariaDB-server MariaDB-client

</code></pre>
<p>然后启动 MariaDB 服务：</p>
<pre><code>service mysql start

</code></pre>
<p>接着运行 <code>mysql_secure_installation</code>：</p>
<pre><code>mysql_secure_installation

</code></pre>
<p>登录 MariaDB 并创建相应的数据库用户与数据库：</p>
<pre><code>mysql -uroot -p
CREATE USER 'git'@'localhost' IDENTIFIED BY '$password';
SET storage_engine=INNODB;
CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'git'@'localhost';
\q

</code></pre>
<p>尝试使用新用户连接数据库：</p>
<pre><code>sudo -u git -H mysql -u git -p -D gitlabhq_production
\q

</code></pre>
<h2 id="安装-gitlab">安装 Gitlab</h2>
<h3 id="克隆源">克隆源</h3>
<pre><code>sudo -u -git cd /home/git
sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 7-10-stable gitlab

</code></pre>
<h3 id="配置-2">配置</h3>
<pre><code class="language-bash">cd /home/git/gitlab

# Copy the example GitLab config
# 复制GitLab的示例配置文件
sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml

# Make sure to change &quot;localhost&quot; to the fully-qualified domain name of your host serving GitLab where necessary
# 确保修改“localhost”为你的GitLab主机的FQDN
#
# If you want to use https make sure that you set `https` to `true`. See #using-https for all necessary details.
# 如果你想要使用https确保你设置了`https`为`true`。具体必要的细节参见#using-https
#
# If you installed Git from source, change the git bin_path to /usr/local/bin/git
# 如果你从源代码安装了Git，修改git的bin_path为/usr/local/bin/git
sudo -u git -H editor config/gitlab.yml

# Make sure GitLab can write to the log/ and tmp/ directories
# 确保GitLab可以写入log/和temp/目录
chown -R git {log,tmp}
chmod -R u+rwX  {log,tmp}

# Create directory for satellites
# 为卫星(?)创建目录
sudo -u git -H mkdir /home/git/gitlab-satellites
chmod u+rwx,g+rx,o-rwx /home/git/gitlab-satellites

# Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories
# 确保GitLab可以写入tmp/pids/和temp/sockets/目录
chmod -R u+rwX  tmp/{pids,sockets}

# Make sure GitLab can write to the public/uploads/ directory
# 确保GitLab可以写入public/uploads/目录
chmod -R u+rwX  public/uploads

# Copy the example Unicorn config
# 复制Unicorn的示例配置文件
sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb

# Enable cluster mode if you expect to have a high load instance
# Ex. change amount of workers to 3 for 2GB RAM server
# 启用集群模式如果你期望拥有一个高负载实例
# 附：修改worker的数量到3用于2GB内存的服务器
sudo -u git -H editor config/unicorn.rb

# Copy the example Rack attack config
# 复制Rack attack的示例配置文件
sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

# Configure Git global settings for git user, useful when editing via web
# Edit user.email according to what is set in config/gitlab.yml
# 为git用户配置Git全局设定，当通过web修改时有用
# 修改user.email根据config/gitlab.yml中的设定
sudo -u git -H git config --global user.name &quot;GitLab&quot;
sudo -u git -H git config --global user.email &quot;gitlab@localhost&quot;
sudo -u git -H git config --global core.autocrlf input

</code></pre>
<h2 id="数据库配置">数据库配置</h2>
<pre><code># MySQL only:
# 仅限MySQL：
sudo -u git cp config/database.yml.mysql config/database.yml

# MySQL and remote PostgreSQL only:
# Update username/password in config/database.yml.
# You only need to adapt the production settings (first part).
# If you followed the database guide then please do as follows:
# Change 'secure password' with the value you have given to $password
# You can keep the double quotes around the password
# 仅限MySQL和远程PostgreSQL：
# 在config/database.yml中更新用户名/密码；
# 你只需要适配生产设定（第一部分）；
# 如果你跟从数据库向导，请按以下操作：
# 修改'secure password'使用你刚才设定的$password；
# 你可以保留密码两端的双引号。
sudo -u git -H editor config/database.yml

# PostgreSQL and MySQL:
# Make config/database.yml readable to git only
# PostgreSQL和MySQL：
# 设置config/database.yml仅对git可读。
sudo -u git -H chmod o-rwx config/database.yml

</code></pre>
<h3 id="安装-gems">安装 Gems</h3>
<pre><code>cd /home/git/gitlab

# For users from China mainland only
# 仅限中国大陆用户
nano /home/git/gitlab/Gemfile
source &quot;http://ruby.taobao.org&quot; // 原始 source &quot;https://rubygems.org/&quot;

# For MySQL (note, the option says &quot;without ... postgres&quot;)
sudo -u git -H bundle install --deployment --without development test postgres aws

</code></pre>
<h2 id="install-gitlab-shell">Install GitLab shell</h2>
<h3 id="安装gitlab-shell">安装GitLab Shell</h3>
<p>GitLab Shell是一个专门为GitLab开发的SSH访问和源管理软件。</p>
<pre><code># Go to the Gitlab installation folder:
# 转到GitLab安装目录：
cd /home/git/gitlab

# For users from China mainland only
# 仅限中国大陆用户
nano /home/git/gitlab/Gemfile
source &quot;http://ruby.taobao.org&quot; // 原始 source &quot;https://rubygems.org/&quot;

# Run the installation task for gitlab-shell (replace `REDIS_URL` if needed):
# 运行gitlab-shell的安装任务（替换`REDIS_URL`如果有需要的话）：
sudo -u git -H bundle exec rake gitlab:shell:install[v1.9.6] REDIS_URL=redis://localhost:6379 RAILS_ENV=production

# By default, the gitlab-shell config is generated from your main gitlab config.
# 默认的，gitlab-shell的配置文件是由你的gitlab主配置文件生成的。
#
# Note: When using GitLab with HTTPS please change the following:
# - Provide paths to the certificates under `ca_file` and `ca_path options.
# - The `gitlab_url` option must point to the https endpoint of GitLab.
# - In case you are using self signed certificate set `self_signed_cert` to `true`.
# See #using-https for all necessary details.
# 提示：当通过HTTPS使用GitLab时，请做出如下更改：
# - 提供证书的路径在`ca_file`和`ca_path`选项；
# - `gitlab_url`选项必须指向GitLab的https端点；
# - 如果你使用自签名的证书，设置`self-signed_cert`为`true`。
# 所有必需的具体细节参见#using-https
#
# You can review (and modify) it as follows:
# 你可以检查（并修改该）通过以下方法：
sudo -u git -H editor /home/git/gitlab-shell/config.yml

# Ensure the correct SELinux contexts are set
# Read http://wiki.centos.org/HowTos/Network/SecuringSSH
# 确保正确的SELinux上下文被设置
# 阅读http://wiki.centos.org/HowTos/Network/SecuringSSH
restorecon -Rv /home/git/.ssh

</code></pre>
<h3 id="初始化数据库和激活高级功能">初始化数据库和激活高级功能</h3>
<pre><code>sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production
# Type 'yes' to create the database tables.
# When done you see 'Administrator account created:'

</code></pre>
<p>提示：你可以设置管理员密码通过在环境变量GITLAB_ROOT_PASSWORD中提供，例如：</p>
<pre><code>sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=newpassword

</code></pre>
<h3 id="安装初始化脚本">安装初始化脚本</h3>
<p>下载初始化脚本（将放在/etc/init.d/gitlab）：</p>
<pre><code>sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
chmod +x /etc/init.d/gitlab
chkconfig --add gitlab

</code></pre>
<p>设置GitLab开机启动：</p>
<pre><code>chkconfig gitlab on

</code></pre>
<p>设置日志翻转</p>
<pre><code>cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab

</code></pre>
<h3 id="检查应用状态">检查应用状态</h3>
<pre><code>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production

</code></pre>
<h3 id="编译静态文件">编译静态文件</h3>
<pre><code>sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production

</code></pre>
<h3 id="启动实例">启动实例</h3>
<pre><code>/etc/init.d/gitlab start

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[测速]]></title>
        <id>https://konvict.github.io/post/speed-test/</id>
        <link href="https://konvict.github.io/post/speed-test/">
        </link>
        <updated>2021-11-23T08:21:33.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python">#!/usr/bin/env bash
#
# Description: Test your server's network with Speedtest to China
#
# Copyright (C) 2017 - 2017 Oldking &lt;oooldking@gmail.com&gt;
#
# URL: https://www.oldking.net/305.html
#

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
SKYBLUE='\033[0;36m'
PLAIN='\033[0m'

# check root
[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;${RED}Error:${PLAIN} This script must be run as root!&quot; &amp;&amp; exit 1

# check python
if  [ ! -e '/usr/bin/python' ]; then
        echo -e
        read -p &quot;${RED}Error:${PLAIN} python is not install. You must be install python command at first.\nDo you want to install? [y/n]&quot; is_install
        if [[ ${is_install} == &quot;y&quot; || ${is_install} == &quot;Y&quot; ]]; then
            if [ &quot;${release}&quot; == &quot;centos&quot; ]; then
                        yum -y install python
                else
                        apt-get -y install python
                fi
        else
            exit
        fi
        
fi

# check wget
if  [ ! -e '/usr/bin/wget' ]; then
        echo -e
        read -p &quot;${RED}Error:${PLAIN} wget is not install. You must be install wget command at first.\nDo you want to install? [y/n]&quot; is_install
        if [[ ${is_install} == &quot;y&quot; || ${is_install} == &quot;Y&quot; ]]; then
                if [ &quot;${release}&quot; == &quot;centos&quot; ]; then
                        yum -y install wget
                else
                        apt-get -y install wget
                fi
        else
                exit
        fi
fi


clear
echo &quot;#############################################################&quot;
echo &quot;# Description: Test your server's network with Speedtest    #&quot;
echo &quot;# Intro:  https://www.oldking.net/305.html                  #&quot;
echo &quot;# Author: Oldking &lt;oooldking@gmail.com&gt;                     #&quot;
echo &quot;# Github: https://github.com/oooldking                      #&quot;
echo &quot;#############################################################&quot;
echo
echo &quot;测试服务器到&quot;
echo -ne &quot;1.中国电信 2.中国联通 3.中国移动 4.本地默认 5.全面测速&quot;

while :; do echo
        read -p &quot;请输入数字选择： &quot; telecom
        if [[ ! $telecom =~ ^[1-5]$ ]]; then
                echo &quot;输入错误! 请输入正确的数字!&quot;
        else
                break   
        fi
done

if [[ ${telecom} == 1 ]]; then
        telecomName=&quot;电信&quot;
        echo -e &quot;\n选择最靠近你的方位&quot;
    echo -ne &quot;1.北方 2.南方&quot;
    while :; do echo
            read -p &quot;请输入数字选择： &quot; pos
            if [[ ! $pos =~ ^[1-2]$ ]]; then
                    echo &quot;输入错误! 请输入正确的数字!&quot;
            else
                    break
            fi
    done
    echo -e &quot;\n选择最靠近你的城市&quot;
    if [[ ${pos} == 1 ]]; then
        echo -ne &quot;1.郑州 2.襄阳&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^[1-2]$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=4595
                cityName=&quot;郑州&quot;
        fi
        if [[ ${city} == 2 ]]; then
                num=12637
                cityName=&quot;襄阳&quot;
        fi
    fi
    if [[ ${pos} == 2 ]]; then
        echo -ne &quot;1.上海 2.杭州 3.南宁 4.南昌 5.长沙 6.深圳 7.重庆 8.成都&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^[1-8]$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=3633
                cityName=&quot;上海&quot;
        fi
        if [[ ${city} == 2 ]]; then
                num=7509
                cityName=&quot;杭州&quot;
        fi
        if [[ ${city} == 3 ]]; then
                num=10305
                cityName=&quot;南宁&quot;
        fi
        if [[ ${city} == 4 ]]; then
                num=7230
                cityName=&quot;南昌&quot;
        fi
        if [[ ${city} == 5 ]]; then
                num=6132
                cityName=&quot;长沙&quot;
        fi
        if [[ ${city} == 6 ]]; then
                num=5081
                cityName=&quot;深圳&quot;
        fi
        if [[ ${city} == 7 ]]; then
                num=6592
                cityName=&quot;重庆&quot;
        fi
        if [[ ${city} == 8 ]]; then
                num=4624
                cityName=&quot;成都&quot;
        fi
    fi
fi

if [[ ${telecom} == 2 ]]; then
        telecomName=&quot;联通&quot;
    echo -ne &quot;\n1.北方 2.南方&quot;
    while :; do echo
            read -p &quot;请输入数字选择： &quot; pos
            if [[ ! $pos =~ ^[1-2]$ ]]; then
                    echo &quot;输入错误! 请输入正确的数字!&quot;
            else
                    break
            fi
    done
    echo -e &quot;\n选择最靠近你的城市&quot;
    if [[ ${pos} == 1 ]]; then
        echo -ne &quot;1.沈阳 2.长春 3.哈尔滨 4.天津 5.济南 6.北京 7.郑州 8.西安 9.太原 10.宁夏 11.兰州 12.西宁&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^(([1-9])|(1([0-2]{1})))$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=5017
                cityName=&quot;沈阳&quot;
        fi
        if [[ ${city} == 2 ]]; then
                num=9484
                cityName=&quot;长春&quot;
        fi
        if [[ ${city} == 3 ]]; then
                num=5460
                cityName=&quot;哈尔滨&quot;
        fi
        if [[ ${city} == 4 ]]; then
                num=5475
                cityName=&quot;天津&quot;
        fi
        if [[ ${city} == 5 ]]; then
                num=5039
                cityName=&quot;济南&quot;
        fi
        if [[ ${city} == 6 ]]; then
                num=5145
                cityName=&quot;北京&quot;
        fi
        if [[ ${city} == 7 ]]; then
                num=5131
                cityName=&quot;郑州&quot;
        fi
        if [[ ${city} == 8 ]]; then
                num= 4863
                cityName=&quot;西安&quot;
        fi
        if [[ ${city} == 9 ]]; then
                num=12868
                cityName=&quot;太原&quot;
        fi
        if [[ ${city} == 10 ]]; then
                num=5509
                cityName=&quot;宁夏&quot;
        fi
        if [[ ${city} == 11 ]]; then
                num=4690
                cityName=&quot;兰州&quot;
        fi
        if [[ ${city} == 12 ]]; then
                num=5992
                cityName=&quot;西宁&quot;
        fi
    fi
    if [[ ${pos} == 2 ]]; then
        echo -ne &quot;1.上海 2.杭州 3.南宁 4.合肥 5.南昌 6.长沙 7.深圳 8.广州 9.重庆 10.昆明 11.成都&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^(([1-9])|(1([0-1]{1})))$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=5083
                cityName=&quot;上海&quot;
        fi
        if [[ ${city} == 2 ]]; then
                num=5300
                cityName=&quot;杭州&quot;
        fi
        if [[ ${city} == 3 ]]; then
                num=5674
                cityName=&quot;南宁&quot;
        fi
        if [[ ${city} == 4 ]]; then
                num=5724
                cityName=&quot;合肥&quot;
        fi
        if [[ ${city} == 5 ]]; then
                num=5079
                cityName=&quot;南昌&quot;
        fi
        if [[ ${city} == 6 ]]; then
                num=4870
                cityName=&quot;长沙&quot;
        fi
        if [[ ${city} == 7 ]]; then
                num=10201
                cityName=&quot;深圳&quot;
        fi
        if [[ ${city} == 8 ]]; then
                num=3891
                cityName=&quot;广州&quot;
        fi
        if [[ ${city} == 9 ]]; then
                num=5726
                cityName=&quot;重庆&quot;
        fi
        if [[ ${city} == 10 ]]; then
                num=5103
                cityName=&quot;昆明&quot;
        fi
        if [[ ${city} == 11 ]]; then
                num=2461
                cityName=&quot;成都&quot;
        fi
    fi
fi

if [[ ${telecom} == 3 ]]; then
        telecomName=&quot;移动&quot;
    echo -ne &quot;\n1.北方 2.南方&quot;
    while :; do echo
            read -p &quot;请输入数字选择： &quot; pos
            if [[ ! $pos =~ ^[1-2]$ ]]; then
                    echo &quot;输入错误! 请输入正确的数字!&quot;
            else
                    break
            fi
    done
    echo -e &quot;\n选择最靠近你的城市&quot;
    if [[ ${pos} == 1 ]]; then
        echo -ne &quot;1.西安&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^[1]$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=5292
        fi
    fi
    if [[ ${pos} == 2 ]]; then
        echo -ne &quot;1.上海 2.宁波 3.无锡 4.杭州 5.合肥 6.成都&quot;
        while :; do echo
                read -p &quot;请输入数字选择： &quot; city
                if [[ ! $city =~ ^[1-6]$ ]]; then
                        echo &quot;输入错误! 请输入正确的数字!&quot;
                else
                        break
            fi
        done
        if [[ ${city} == 1 ]]; then
                num=4665
                cityName=&quot;上海&quot;
        fi
        if [[ ${city} == 2 ]]; then
                num=6715
                cityName=&quot;宁波&quot;
        fi
        if [[ ${city} == 3 ]]; then
                num=5122
                cityName=&quot;无锡&quot;
        fi
        if [[ ${city} == 4 ]]; then
                num=4647
                cityName=&quot;杭州&quot;
        fi
        if [[ ${city} == 5 ]]; then
                num=4377 
                cityName=&quot;合肥&quot;
        fi
        if [[ ${city} == 6 ]]; then
                num=4575
                cityName=&quot;成都&quot;
        fi
    fi
fi

# install speedtest
if  [ ! -e '/tmp/speedtest.py' ]; then
    wget --no-check-certificate -P /tmp https://raw.github.com/sivel/speedtest-cli/master/speedtest.py &gt; /dev/null 2&gt;&amp;1
fi
chmod a+rx /tmp/speedtest.py

result() {
    download=`cat /tmp/speed.log | awk -F ':' '/Download/{print $2}'`
    upload=`cat /tmp/speed.log | awk -F ':' '/Upload/{print $2}'`
    hostby=`cat /tmp/speed.log | awk -F ':' '/Hosted/{print $1}'`
    latency=`cat /tmp/speed.log | awk -F ':' '/Hosted/{print $2}'`
    clear
    echo &quot;$hostby&quot;
    echo &quot;延迟  : $latency&quot;
    echo &quot;上传  : $upload&quot;
    echo &quot;下载  : $download&quot;
    echo -ne &quot;\n当前时间: &quot;
    echo $(date +%Y-%m-%d&quot; &quot;%H:%M:%S)
}

speed_test(){
    temp=$(python /tmp/speedtest.py --server $1 --share 2&gt;&amp;1)
    is_down=$(echo &quot;$temp&quot; | grep 'Download') 
    if [[ ${is_down} ]]; then
        local REDownload=$(echo &quot;$temp&quot; | awk -F ':' '/Download/{print $2}')
        local reupload=$(echo &quot;$temp&quot; | awk -F ':' '/Upload/{print $2}')
        local relatency=$(echo &quot;$temp&quot; | awk -F ':' '/Hosted/{print $2}')
        temp=$(echo &quot;$relatency&quot; | awk -F '.' '{print $1}')
        if [[ ${temp} -gt 1000 ]]; then
            relatency=&quot; 000.000 ms&quot;
        fi
        local nodeName=$2

        printf &quot;${YELLOW}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\n&quot; &quot;${nodeName}&quot; &quot;${reupload}&quot; &quot;${REDownload}&quot; &quot;${relatency}&quot;
    else
        local cerror=&quot;ERROR&quot;
    fi
}

if [[ ${telecom} =~ ^[1-3]$ ]]; then
    python /tmp/speedtest.py --server ${num} --share 2&gt;/dev/null | tee /tmp/speed.log 2&gt;/dev/null
    is_down=$(cat /tmp/speed.log | grep 'Download')

    if [[ ${is_down} ]]; then
        result
        echo &quot;测试到 ${cityName}${telecomName} 完成！&quot;
        rm -rf /tmp/speedtest.py
        rm -rf /tmp/speed.log
    else
        echo -e &quot;\n${RED}ERROR:${PLAIN} 当前节点不可用，请更换其他节点，或换个时间段再测试。&quot;
    fi
fi

if [[ ${telecom} == 4 ]]; then
    python /tmp/speedtest.py | tee /tmp/speed.log
    result
    echo &quot;本地测试完成！&quot;
    rm -rf /tmp/speedtest.py
    rm -rf /tmp/speed.log
fi

if [[ ${telecom} == 5 ]]; then
    echo &quot;&quot;
    printf &quot;%-14s%-18s%-20s%-12s\n&quot; &quot;Node Name&quot; &quot;Upload Speed&quot; &quot;Download Speed&quot; &quot;Latency&quot;
    start=$(date +%s) 
    speed_test '6435' '襄阳电信'
    speed_test '7509' '昆明电信'
    speed_test '3633' '上海电信'
    speed_test '4624' '成都电信'
    speed_test '5017' '沈阳联通'
    speed_test '4863' '西安联通'
    speed_test '5083' '上海联通'
    speed_test '5726' '重庆联通'
    speed_test '5292' '西安移动'
    speed_test '16314' '山东移动'
    speed_test '6715' '宁波移动'
    speed_test '4575' '成都移动'
    end=$(date +%s)  
    rm -rf /tmp/speedtest.py
    echo &quot;&quot;
    time=$(( $end - $start ))
    if [[ $time -gt 60 ]]; then
        min=$(expr $time / 60)
        sec=$(expr $time % 60)
        echo -ne &quot;花费时间：${min} 分 ${sec} 秒&quot;
    else
        echo -ne &quot;花费时间：${time} 秒&quot;
    fi
    echo -ne &quot;\n当前时间: &quot;
    echo $(date +%Y-%m-%d&quot; &quot;%H:%M:%S)
    echo &quot;全面测试完成！&quot;
fi
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudconeAgent]]></title>
        <id>https://konvict.github.io/post/cloudconeagent/</id>
        <link href="https://konvict.github.io/post/cloudconeagent/">
        </link>
        <updated>2021-11-23T08:20:40.000Z</updated>
        <summary type="html"><![CDATA[<pre><code class="language-bash">#!/bin/bash

# Set environment
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

GATEWAY=$(cat /opt/cloudcone/gateway)
SERVERKEY=$(cat /opt/cloudcone/serverkey)

function encode() {
    echo &quot;$1&quot; | base64
}

function getOS() {
    if [ -f /etc/lsb-release ]; then
        os_name=$(lsb_release -s -d)
    elif [ -f /etc/debian_version ]; then
        os_name=&quot;Debian $(cat /etc/debian_version)&quot;
    elif [ -f /etc/redhat-release ]; then
        os_name=`cat /etc/redhat-release`
    else
        os_name=&quot;$(cat /etc/*release | grep '^PRETTY_NAME=\|^NAME=\|^DISTRIB_ID=' | awk -F\= '{print $2}' | tr -d '&quot;' | tac)&quot;
        if [ -z &quot;$os_name&quot; ]; then
            os_name=&quot;$(uname -s)&quot;
        fi
    fi
    echo &quot;$os_name&quot;
}

function cpuSpeed() {
    cpu_speed=$(cat /proc/cpuinfo | grep 'cpu MHz' | awk -F\: '{print $2}' | uniq)
    if [ -z &quot;$cpu_speed&quot; ]; then
        cpu_speed=$(lscpu | grep 'CPU MHz' | awk -F\: '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
    fi
    echo &quot;$cpu_speed&quot;
}

function defaultInterface() {
    interface=&quot;$(ip route get 4.2.2.1 | grep dev | awk -F'dev' '{print $2}' | awk '{print $1}')&quot;
    if [ -z $interface ]; then
        interface=&quot;$(ip link show | grep 'eth[0-9]' | awk '{print $2}' | tr -d ':' | head -n1)&quot;
    fi
    echo &quot;$interface&quot;
}

function activeConnections() {
    if [ -n &quot;$(command -v ss)&quot; ]; then
        active_connections=&quot;$(ss -tun | tail -n +2 | wc -l)&quot;
    else
        active_connections=&quot;$(netstat -tun | tail -n +3 | wc -l)&quot;
    fi
    echo &quot;$active_connections&quot;
}

function pingLatency() {
    ping_google=&quot;$(ping -B -w 2 -n -c 2 google.com | grep rtt | awk -F '/' '{print $5}')&quot;
    echo &quot;$ping_google&quot;
}

agent_version=&quot;1.0&quot;
POST=&quot;$POST{agent_version}$agent_version{/agent_version}&quot;

serverkey=$(cat /opt/cloudcone/serverkey)
POST=&quot;$POST{serverkey}$serverkey{/serverkey}&quot;

gateway=$(cat /opt/cloudcone/gateway)
POST=&quot;$POST{gateway}$gateway{/gateway}&quot;

hostname=$(hostname)
POST=&quot;$POST{hostname}$hostname{/hostname}&quot;

kernel=$(uname -r)
POST=&quot;$POST{kernel}$kernel{/kernel}&quot;

time=$(date +%s)
POST=&quot;$POST{time}$time{/time}&quot;

os=$(getOS)
POST=&quot;$POST{os}$os{/os}&quot;

os_arch=`uname -m`&quot;,&quot;`uname -p`
POST=&quot;$POST{os_arch}$os_arch{/os_arch}&quot;

cpu_model=$(cat /proc/cpuinfo | grep 'model name' | awk -F\: '{print $2}' | uniq)
POST=&quot;$POST{cpu_model}$cpu_model{/cpu_model}&quot;

cpu_cores=$(cat /proc/cpuinfo | grep processor | wc -l)
POST=&quot;$POST{cpu_cores}$cpu_cores{/cpu_cores}&quot;

cpu_speed=$(cpuSpeed)
POST=&quot;$POST{cpu_speed}$cpu_speed{/cpu_speed}&quot;

cpu_load=$(cat /proc/loadavg | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3}')
POST=&quot;$POST{cpu_load}$cpu_load{/cpu_load}&quot;

cpu_info=$(grep -i cpu /proc/stat | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;,&quot;$8&quot;,&quot;$9&quot;,&quot;$10&quot;,&quot;$11&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{cpu_info}$cpu_info{/cpu_info}&quot;
sleep 1s
cpu_info_current=$(grep -i cpu /proc/stat | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;,&quot;$8&quot;,&quot;$9&quot;,&quot;$10&quot;,&quot;$11&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{cpu_info_current}$cpu_info_current{/cpu_info_current}&quot;

disks=$(df -P -T -B 1k | grep '^/' | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{disks}$disks{/disks}&quot;

disks_inodes=$(df -P -i | grep '^/' | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{disks_inodes}$disks_inodes{/disks_inodes}&quot;

file_descriptors=$(cat /proc/sys/fs/file-nr | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3}')
POST=&quot;$POST{file_descriptors}$file_descriptors{/file_descriptors}&quot;

ram_total=$(cat /proc/meminfo | grep ^MemTotal: | awk '{print $2}')
POST=&quot;$POST{ram_total}$ram_total{/ram_total}&quot;

ram_free=$(cat /proc/meminfo | grep ^MemFree: | awk '{print $2}')
POST=&quot;$POST{ram_free}$ram_free{/ram_free}&quot;

ram_caches=$(cat /proc/meminfo | grep ^Cached: | awk '{print $2}')
POST=&quot;$POST{ram_caches}$ram_caches{/ram_caches}&quot;

ram_buffers=$(cat /proc/meminfo | grep ^Buffers: | awk '{print $2}')
POST=&quot;$POST{ram_buffers}$ram_buffers{/ram_buffers}&quot;

ram_usage=$(($ram_total-($ram_free+$ram_caches+$ram_buffers)))
POST=&quot;$POST{ram_usage}$ram_usage{/ram_usage}&quot;

swap_total=$(cat /proc/meminfo | grep ^SwapTotal: | awk '{print $2}')
POST=&quot;$POST{swap_total}$swap_total{/swap_total}&quot;

swap_free=$(cat /proc/meminfo | grep ^SwapFree: | awk '{print $2}')
POST=&quot;$POST{swap_free}$swap_free{/swap_free}&quot;

swap_usage=$(($swap_total-$swap_free))
POST=&quot;$POST{swap_usage}$swap_usage{/swap_usage}&quot;

default_interface=$(defaultInterface)
POST=&quot;$POST{default_interface}$default_interface{/default_interface}&quot;

all_interfaces=$(tail -n +3 /proc/net/dev | tr &quot;:&quot; &quot; &quot; | awk '{print $1&quot;,&quot;$2&quot;,&quot;$10&quot;,&quot;$3&quot;,&quot;$11&quot;;&quot;}' | tr -d ':' | tr -d '\n')
POST=&quot;$POST{all_interfaces}$all_interfaces{/all_interfaces}&quot;
sleep 1s
all_interfaces_current=$(tail -n +3 /proc/net/dev | tr &quot;:&quot; &quot; &quot; | awk '{print $1&quot;,&quot;$2&quot;,&quot;$10&quot;,&quot;$3&quot;,&quot;$11&quot;;&quot;}' | tr -d ':' | tr -d '\n')
POST=&quot;$POST{all_interfaces_current}$all_interfaces_current{/all_interfaces_current}&quot;


ipv4_addresses=$(ip -f inet -o addr show | awk '{split($4,a,&quot;/&quot;); print $2&quot;,&quot;a[1]&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{ipv4_addresses}$ipv4_addresses{/ipv4_addresses}&quot;

ipv6_addresses=$(ip -f inet6 -o addr show | awk '{split($4,a,&quot;/&quot;); print $2&quot;,&quot;a[1]&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{ipv6_addresses}$ipv6_addresses{/ipv6_addresses}&quot;

active_connections=$(activeConnections)
POST=&quot;$POST{active_connections}$active_connections{/active_connections}&quot;

ping_latency=$(pingLatency)
POST=&quot;$POST{ping_latency}$ping_latency{/ping_latency}&quot;
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<pre><code class="language-bash">#!/bin/bash

# Set environment
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

GATEWAY=$(cat /opt/cloudcone/gateway)
SERVERKEY=$(cat /opt/cloudcone/serverkey)

function encode() {
    echo &quot;$1&quot; | base64
}

function getOS() {
    if [ -f /etc/lsb-release ]; then
        os_name=$(lsb_release -s -d)
    elif [ -f /etc/debian_version ]; then
        os_name=&quot;Debian $(cat /etc/debian_version)&quot;
    elif [ -f /etc/redhat-release ]; then
        os_name=`cat /etc/redhat-release`
    else
        os_name=&quot;$(cat /etc/*release | grep '^PRETTY_NAME=\|^NAME=\|^DISTRIB_ID=' | awk -F\= '{print $2}' | tr -d '&quot;' | tac)&quot;
        if [ -z &quot;$os_name&quot; ]; then
            os_name=&quot;$(uname -s)&quot;
        fi
    fi
    echo &quot;$os_name&quot;
}

function cpuSpeed() {
    cpu_speed=$(cat /proc/cpuinfo | grep 'cpu MHz' | awk -F\: '{print $2}' | uniq)
    if [ -z &quot;$cpu_speed&quot; ]; then
        cpu_speed=$(lscpu | grep 'CPU MHz' | awk -F\: '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
    fi
    echo &quot;$cpu_speed&quot;
}

function defaultInterface() {
    interface=&quot;$(ip route get 4.2.2.1 | grep dev | awk -F'dev' '{print $2}' | awk '{print $1}')&quot;
    if [ -z $interface ]; then
        interface=&quot;$(ip link show | grep 'eth[0-9]' | awk '{print $2}' | tr -d ':' | head -n1)&quot;
    fi
    echo &quot;$interface&quot;
}

function activeConnections() {
    if [ -n &quot;$(command -v ss)&quot; ]; then
        active_connections=&quot;$(ss -tun | tail -n +2 | wc -l)&quot;
    else
        active_connections=&quot;$(netstat -tun | tail -n +3 | wc -l)&quot;
    fi
    echo &quot;$active_connections&quot;
}

function pingLatency() {
    ping_google=&quot;$(ping -B -w 2 -n -c 2 google.com | grep rtt | awk -F '/' '{print $5}')&quot;
    echo &quot;$ping_google&quot;
}

agent_version=&quot;1.0&quot;
POST=&quot;$POST{agent_version}$agent_version{/agent_version}&quot;

serverkey=$(cat /opt/cloudcone/serverkey)
POST=&quot;$POST{serverkey}$serverkey{/serverkey}&quot;

gateway=$(cat /opt/cloudcone/gateway)
POST=&quot;$POST{gateway}$gateway{/gateway}&quot;

hostname=$(hostname)
POST=&quot;$POST{hostname}$hostname{/hostname}&quot;

kernel=$(uname -r)
POST=&quot;$POST{kernel}$kernel{/kernel}&quot;

time=$(date +%s)
POST=&quot;$POST{time}$time{/time}&quot;

os=$(getOS)
POST=&quot;$POST{os}$os{/os}&quot;

os_arch=`uname -m`&quot;,&quot;`uname -p`
POST=&quot;$POST{os_arch}$os_arch{/os_arch}&quot;

cpu_model=$(cat /proc/cpuinfo | grep 'model name' | awk -F\: '{print $2}' | uniq)
POST=&quot;$POST{cpu_model}$cpu_model{/cpu_model}&quot;

cpu_cores=$(cat /proc/cpuinfo | grep processor | wc -l)
POST=&quot;$POST{cpu_cores}$cpu_cores{/cpu_cores}&quot;

cpu_speed=$(cpuSpeed)
POST=&quot;$POST{cpu_speed}$cpu_speed{/cpu_speed}&quot;

cpu_load=$(cat /proc/loadavg | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3}')
POST=&quot;$POST{cpu_load}$cpu_load{/cpu_load}&quot;

cpu_info=$(grep -i cpu /proc/stat | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;,&quot;$8&quot;,&quot;$9&quot;,&quot;$10&quot;,&quot;$11&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{cpu_info}$cpu_info{/cpu_info}&quot;
sleep 1s
cpu_info_current=$(grep -i cpu /proc/stat | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;,&quot;$8&quot;,&quot;$9&quot;,&quot;$10&quot;,&quot;$11&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{cpu_info_current}$cpu_info_current{/cpu_info_current}&quot;

disks=$(df -P -T -B 1k | grep '^/' | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{disks}$disks{/disks}&quot;

disks_inodes=$(df -P -i | grep '^/' | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{disks_inodes}$disks_inodes{/disks_inodes}&quot;

file_descriptors=$(cat /proc/sys/fs/file-nr | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3}')
POST=&quot;$POST{file_descriptors}$file_descriptors{/file_descriptors}&quot;

ram_total=$(cat /proc/meminfo | grep ^MemTotal: | awk '{print $2}')
POST=&quot;$POST{ram_total}$ram_total{/ram_total}&quot;

ram_free=$(cat /proc/meminfo | grep ^MemFree: | awk '{print $2}')
POST=&quot;$POST{ram_free}$ram_free{/ram_free}&quot;

ram_caches=$(cat /proc/meminfo | grep ^Cached: | awk '{print $2}')
POST=&quot;$POST{ram_caches}$ram_caches{/ram_caches}&quot;

ram_buffers=$(cat /proc/meminfo | grep ^Buffers: | awk '{print $2}')
POST=&quot;$POST{ram_buffers}$ram_buffers{/ram_buffers}&quot;

ram_usage=$(($ram_total-($ram_free+$ram_caches+$ram_buffers)))
POST=&quot;$POST{ram_usage}$ram_usage{/ram_usage}&quot;

swap_total=$(cat /proc/meminfo | grep ^SwapTotal: | awk '{print $2}')
POST=&quot;$POST{swap_total}$swap_total{/swap_total}&quot;

swap_free=$(cat /proc/meminfo | grep ^SwapFree: | awk '{print $2}')
POST=&quot;$POST{swap_free}$swap_free{/swap_free}&quot;

swap_usage=$(($swap_total-$swap_free))
POST=&quot;$POST{swap_usage}$swap_usage{/swap_usage}&quot;

default_interface=$(defaultInterface)
POST=&quot;$POST{default_interface}$default_interface{/default_interface}&quot;

all_interfaces=$(tail -n +3 /proc/net/dev | tr &quot;:&quot; &quot; &quot; | awk '{print $1&quot;,&quot;$2&quot;,&quot;$10&quot;,&quot;$3&quot;,&quot;$11&quot;;&quot;}' | tr -d ':' | tr -d '\n')
POST=&quot;$POST{all_interfaces}$all_interfaces{/all_interfaces}&quot;
sleep 1s
all_interfaces_current=$(tail -n +3 /proc/net/dev | tr &quot;:&quot; &quot; &quot; | awk '{print $1&quot;,&quot;$2&quot;,&quot;$10&quot;,&quot;$3&quot;,&quot;$11&quot;;&quot;}' | tr -d ':' | tr -d '\n')
POST=&quot;$POST{all_interfaces_current}$all_interfaces_current{/all_interfaces_current}&quot;


ipv4_addresses=$(ip -f inet -o addr show | awk '{split($4,a,&quot;/&quot;); print $2&quot;,&quot;a[1]&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{ipv4_addresses}$ipv4_addresses{/ipv4_addresses}&quot;

ipv6_addresses=$(ip -f inet6 -o addr show | awk '{split($4,a,&quot;/&quot;); print $2&quot;,&quot;a[1]&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{ipv6_addresses}$ipv6_addresses{/ipv6_addresses}&quot;

active_connections=$(activeConnections)
POST=&quot;$POST{active_connections}$active_connections{/active_connections}&quot;

ping_latency=$(pingLatency)
POST=&quot;$POST{ping_latency}$ping_latency{/ping_latency}&quot;

&lt;!-- more --&gt;

ssh_sessions=$(who | wc -l)
POST=&quot;$POST{ssh_sessions}$ssh_sessions{/ssh_sessions}&quot;

uptime=$(cat /proc/uptime | awk '{print $1}')
POST=&quot;$POST{uptime}$uptime{/uptime}&quot;

processes=$(ps -e -o pid,ppid,rss,vsz,uname,pmem,pcpu,comm,cmd --sort=-pcpu,-pmem | awk '{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$4&quot;,&quot;$5&quot;,&quot;$6&quot;,&quot;$7&quot;,&quot;$8&quot;,&quot;$9&quot;;&quot;}' | tr -d '\n')
POST=&quot;$POST{processes}$processes{/processes}&quot;

echo &quot;data=$POST&quot; | curl -m 50 -k -s -d @- &quot;$GATEWAY&quot;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[H5 播放器]]></title>
        <id>https://konvict.github.io/post/h5-player/</id>
        <link href="https://konvict.github.io/post/h5-player/">
        </link>
        <updated>2021-11-23T01:59:38.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;

&lt;head&gt;
 &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=iso-8859-1&quot; /&gt;
 &lt;meta name=&quot;author&quot; content=&quot;GLDGN&quot; /&gt;

 &lt;title&gt;Untitled 1&lt;/title&gt;
&lt;/head&gt;
&lt;script&gt;
 function failed(e) {
   // video playback failed - show a message saying why
   switch (e.target.error.code) {
     case e.target.error.MEDIA_ERR_ABORTED:
       alert('You aborted the video playback.');
       break;
     case e.target.error.MEDIA_ERR_NETWORK:
       alert('A network error caused the video download to fail part-way.');
       break;
     case e.target.error.MEDIA_ERR_DECODE:
       alert('The video playback was aborted due to a corruption problem or because the video used features your browser did not support.');
       break;
     case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
       alert('The video could not be loaded, either because the server or network failed or because the format is not supported.');
       break;
     default:
       alert('An unknown error occurred.');
       break;
   }
 }
&lt;/script&gt;
&lt;body&gt;

&lt;p&gt;&lt;video src=&quot;x.mkv&quot; type='video/x-matroska; codecs=&quot;theora, vorbis&quot;' autoplay controls onerror=&quot;failed(event)&quot; &gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;x.mkv&quot;&gt;Download the video file&lt;/a&gt;.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
html
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[openSPUG Docker 部署]]></title>
        <id>https://konvict.github.io/post/openspug/</id>
        <link href="https://konvict.github.io/post/openspug/">
        </link>
        <updated>2021-11-23T01:48:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">#!/bin/bash
HOST_PORT=
USER_NAME=
PASSWD=
mkdir -p /home/docker/{conf,data,logs,db,env}
mkdir -p /home/docker/data/spug
docker run -dit --name spug --restart=unless-stopped -p ${HOST_PORT}:80 -v /home/docker/data/spug:/data openspug/spug

docker exec spug init_spug ${USER_NAME}  ${PASSWD}
docker restart spug
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 命令行设置IP地址]]></title>
        <id>https://konvict.github.io/post/bat-ip/</id>
        <link href="https://konvict.github.io/post/bat-ip/">
        </link>
        <updated>2021-11-23T01:31:17.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-batch">@echo off
rem 强制获取管理员权限
%1 mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit
rem //设置变量 
set NAME=&quot;以太网 2&quot;
rem //以下属性值可以根据需要更改
set ADDR=100.101.0.19
set MASK=255.255.255.0
set GATEWAY=100.101.0.1
set DNS1=
set DNS2=
rem //以上属性依次为IP地址、子网掩码、网关、首选DNS、备用DNS


echo 当前可用操作有：
echo 1 设置为静态IP
echo 2 设置为动态IP
echo 3 退出
echo 请选择后回车：
set /p operate=
if %operate%==1 goto 1
if %operate%==2 goto 2
if %operate%==3 goto 3


:1
echo 正在设置静态IP，请稍等...
rem //可以根据你的需要更改 
echo IP地址 = %ADDR%
echo 掩码 = %MASK%
echo 网关 = %GATEWAY%
netsh interface ipv4 set address %NAME% static %ADDR% %MASK% %GATEWAY% 
echo 首选DNS = %DNS1% 
if &quot;%DNS1%&quot;==&quot;&quot; (echo DNS1为空) else netsh interface ipv4 set dns %NAME% static %DNS1%
echo 备用DNS = %DNS2% 
if &quot;%DNS2%&quot;==&quot;&quot; (echo DNS2为空) else (netsh interface ipv4 add dns %NAME% %DNS2%) 
echo **********已设置为静态IP：%ADDR%***********
pause
goto 3


:2
echo 正在设置动态IP，请稍等...
echo 正在从DHCP自动获取IP地址...
netsh interface ip set address %NAME% dhcp
echo 正在从DHCP自动获取DNS地址...
netsh interface ip set dns %NAME% dhcp 
echo **********已设置为动态IP地址***********
pause
goto 3


:3
exit
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文艺到炸的句子]]></title>
        <id>https://konvict.github.io/post/literature/</id>
        <link href="https://konvict.github.io/post/literature/">
        </link>
        <updated>2021-11-22T17:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>作者：闭月羞花郭德纲<br>
链接：https://www.zhihu.com/question/308829198/answer/813810923<br>
来源：知乎</p>
<p>1.我浑浑噩噩走过二十年，做过天上仙 受过万人谴，以为甘甜苦楚全都尝过一遍，只有你回首一眼 才知这是人间</p>
<p>2.我本身是个及其故作清高的人 讨厌人间事巴不得生活只剩风月 但某一天开始我突然想与你历经世俗的浪漫庆祝每个平凡日</p>
<p>3.星河滚烫 你是人间理想。夜风寒凉 你是人间火光。万世沉浮 你是人间归途</p>
<p>4.我要去前半生的烟火气 我要后半夜的风霜雪 我要去路终己不顾的孤勇 我要客途甘之若饴的诉梦 我要胭脂色 我要颓唐客 我要你 ——四万温泉</p>
<p>5.不想和你错过下一个冬天了</p>
<p>6.你的眼神再温柔些 月亮会融化 我也会</p>
<p>7.每一杯普通的水 和喜欢的人在一起就会变成雪碧 他的胳膊轻轻和你碰到 你心里的气泡就滋儿地一下冲到嗓子 甜呀 还亮晶晶的 好像刚喝下了整个银河</p>
<p>8.从前我没有宇宙的 现在有了</p>
<p>9.“希望我能成为你的小众喜好 藏着欣喜不已 炫耀时格外骄傲。”</p>
<p>10.万丈深渊我自己创，你在岸边，你别陪我流浪。——Multiflora</p>
<p>11.想请你吃个饭 地方你选。森林 雪原 世界尽头的星空。屋顶 海洋 清晨大雾的胡同。别约在梦里</p>
<p>12.想把你 和蘸了甜酱的黄昏一起吃掉</p>
<p>13.等你音讯全无 我再去爱这世间万物</p>
<p>14.梁山伯:“英台不是女儿身,因何耳上有环痕?”<br>
祝英台:“耳环痕有原因,梁兄何必起疑云,村里酬神多庙会,年年由我扮观音,梁兄啊做文章要专心,你前程不想想钗裙！”<br>
梁山伯:“我从此不敢看观音。”——黄梅戏《梁山伯与祝英台》</p>
<p>15.我与春风皆过客 你携秋水揽星河</p>
<p>16.我野蛮生长，没能成为自己的月亮，能遇见你，是银河慷慨赠我的糖。</p>
<p>17.所有的晦暗都留给过往,从遇见你开始 凛冬散尽 星河长明.</p>
<p>18.“想做你跌落的春天，做你的多巴胺，做你阖眼后吻上眸的晚安。”</p>
<p>19.“你是个可爱又浪漫的麻烦”</p>
<p>20.“世界需要讲讲道理，但我最偏心你。”</p>
<p>21.其实啊，你的他一点也不好看。眸子里没有千山万水，掠不尽春暖花开，只有眉眼间一寸清秀害人相思，但南风不与他的衣角缠绵，他也不会是那一方绝色。他是混在人群里最平庸的男孩子。可，他依旧会是你心上朱砂痣，窗前清明月。是你藏了几百年几百年的酒，是你重峦叠嶂间那一点最艳的红。是爱人。</p>
<p>22.“有空跟我去看个星星晒个月亮吗?月亮和星星没空的话 那我们就去路灯下站站,如果你有空的话”</p>
<p>23.咬一口就能吃到满满馅料的菠萝包 住满了草莓邻居的大蛋糕 香香脆脆的炸鸡腿儿 刚刚烤好的可丽饼和牛奶味儿的不二家棒棒糖 算出他们所有的卡路里 差不多 就这么喜欢你</p>
<p>24.“我喜欢「让我一瞬间想到永远」的东西，不论是何时何地何人何物，假若能偶尔出现在我的人生里，就万分感激了。”</p>
<p>25.你如果缓缓把手举起来，举到顶，再突然张开五指，那恭喜你，刚刚给自己放了个烟花。<br>
但是，如果你牵住我的手，那我的心里就会放起千千万万多烟花。</p>
<p>26.我在心底经年累月砌了一座城关，坚不可破。有一天你轻声说要从这里过，我便拆了它，二话不说。</p>
<p>27.你真可爱 我说时来不及思索 而思索之后 还是这样说</p>
<p>28.赶去见你的时候 公车开的更慢了 地铁每一站之间的距离更长了 窗户外的风卷着我先跑了 快收起你的魔法吧</p>
<p>29.当你望向我 所有星光穿透我的心脏,而我赌你的枪里 没有子弹</p>
<p>30.“我目光比较短浅，只能看见你。也只有两个心愿：你在身边；在你身边。”</p>
<p>31.你会遇到这样一个男孩 把你捧在手心 像日出日落一样陪着你</p>
<p>32.其实“晚安”还有另一种意思，把温柔与浪漫藏进晚安里，“我对全世界说晚安 独独对你说喜欢”</p>
<p>33.“晚是世界的晚 安是给你的安。”</p>
<p>34.你是人间烟火不自知，我在俗世仰望应如是。</p>
<p>35.你就是盛开着的，漫山遍野的温柔。</p>
<p>36.夏天太浪漫了 我想请它吃顿饭 如果你有空 可以一起来</p>
<p>37.“我得到名为你的宇宙”</p>
<p>38.“我永远喜欢你，也许是我十年二十年一辈子都喜欢你。但是，这句话更深的含义，是指，我这一刻喜欢你的程度，让我有勇气说出来我永远喜欢你。”<br>
罗曼•罗兰说过：世界上只有一种英雄主义，那就是认清了生活的真相之后，还仍然热爱生活。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shell 日志]]></title>
        <id>https://konvict.github.io/post/shell-log/</id>
        <link href="https://konvict.github.io/post/shell-log/">
        </link>
        <updated>2021-11-22T17:35:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">#!/bin/bash

LOG_RED=`tput setaf 1`
LOG_GREEN=`tput setaf 2`
LOG_RESET=`tput sgr0`
LOG_FILE=
function log_info ()
{

DATE_N=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
USER_N=`whoami`
echo &quot;${DATE_N} ${USER_N} execute $0 [INFO] $@&quot; &gt;&gt; ${LOG_FILE} #执行成功日志打印路径

}

function log_error ()
{
DATE_N=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
USER_N=`whoami`
echo -e &quot;\033[41;37m ${DATE_N} ${USER_N} execute $0 [ERROR] $@ \033[0m&quot;  &gt;&gt; ${LOG_FILE} #执行失败日志打印路径

}

function fn_log ()  {
if [  $? -eq 0  ];then
        log_info &quot;$@ sucessed.&quot;
        #echo -e &quot;\033[32m $@ sucessed. \033[0m&quot;
        echo ${LOG_GREEN} $@ sucessed.${LOG_RESET}
else
        log_error &quot;$@ failed.&quot;
        #echo -e &quot;\033[41;37m $@ failed. \033[0m&quot;
        echo ${LOG_RED} $@ failed.${LOG_RESET}
        exit 1
fi
}
trap 'fn_log &quot;DO NOT SEND CTR + C WHEN EXECUTE SCRIPT !!!! &quot;'  2
</code></pre>
]]></content>
    </entry>
</feed>